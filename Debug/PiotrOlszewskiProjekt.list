
PiotrOlszewskiProjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a330  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002824  0800a4e0  0800a4e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd04  0800cd04  00020578  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd04  0800cd04  0001cd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd0c  0800cd0c  00020578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd0c  0800cd0c  0001cd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd10  0800cd10  0001cd10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000578  20000000  0800cd14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020578  2**0
                  CONTENTS
 10 .bss          000007e0  20000578  20000578  00020578  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d58  20000d58  00020578  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020578  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d78f  00000000  00000000  000205eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004003  00000000  00000000  0003dd7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be0  00000000  00000000  00041d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015a1  00000000  00000000  00043960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a09d  00000000  00000000  00044f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020b8c  00000000  00000000  0006ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbb7f  00000000  00000000  0008fb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008048  00000000  00000000  0018b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001936f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000578 	.word	0x20000578
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a4c8 	.word	0x0800a4c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000057c 	.word	0x2000057c
 80001ec:	0800a4c8 	.word	0x0800a4c8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <rysujLiniePionowa>:
static uint8_t gra_jest_przegrana = 0;
uint8_t muzyka_wlaczona = 1;

static unsigned int licznik_punktow = 0;

static void rysujLiniePionowa(int x, int y1, int h, Paleta p) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_SetTextColor(paleta[p]);
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <rysujLiniePionowa+0x38>)
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f814 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawVLine(x, y1, h);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	b291      	uxth	r1, r2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	b292      	uxth	r2, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f9af 	bl	8003928 <BSP_LCD_DrawVLine>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000f0 	.word	0x200000f0

080005d8 <wypelnijProstokat>:

static void wypelnijProstokat(int y, int x, int h, int w, Paleta p) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	603b      	str	r3, [r7, #0]
	assert(w >= 0);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da06      	bge.n	80005fa <wypelnijProstokat+0x22>
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <wypelnijProstokat+0xac>)
 80005ee:	4a26      	ldr	r2, [pc, #152]	; (8000688 <wypelnijProstokat+0xb0>)
 80005f0:	f240 1123 	movw	r1, #291	; 0x123
 80005f4:	4825      	ldr	r0, [pc, #148]	; (800068c <wypelnijProstokat+0xb4>)
 80005f6:	f008 ff45 	bl	8009484 <__assert_func>
	assert(h >= 0);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da06      	bge.n	800060e <wypelnijProstokat+0x36>
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <wypelnijProstokat+0xb8>)
 8000602:	4a21      	ldr	r2, [pc, #132]	; (8000688 <wypelnijProstokat+0xb0>)
 8000604:	f44f 7192 	mov.w	r1, #292	; 0x124
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <wypelnijProstokat+0xb4>)
 800060a:	f008 ff3b 	bl	8009484 <__assert_func>

	if (x + w > SZER_EKRANU) {
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	2bf0      	cmp	r3, #240	; 0xf0
 8000616:	dd03      	ble.n	8000620 <wypelnijProstokat+0x48>
		w = SZER_EKRANU - x;
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800061e:	603b      	str	r3, [r7, #0]
	}
	if (y + h > WYS_EKRANU) {
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800062a:	dd03      	ble.n	8000634 <wypelnijProstokat+0x5c>
		h = WYS_EKRANU - y;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000632:	607b      	str	r3, [r7, #4]
	}
	if (x < 0) {
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	2b00      	cmp	r3, #0
 8000638:	da05      	bge.n	8000646 <wypelnijProstokat+0x6e>
		w -= x;
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	603b      	str	r3, [r7, #0]
		x = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
	}
	if (y < 0) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da05      	bge.n	8000658 <wypelnijProstokat+0x80>
		h -= y;
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	607b      	str	r3, [r7, #4]
		y = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
	}

	BSP_LCD_SetTextColor(paleta[p]);
 8000658:	7e3b      	ldrb	r3, [r7, #24]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <wypelnijProstokat+0xbc>)
 800065c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000660:	4618      	mov	r0, r3
 8000662:	f002 ffbd 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, w, h);
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	b298      	uxth	r0, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	b299      	uxth	r1, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b29a      	uxth	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f003 f999 	bl	80039ac <BSP_LCD_FillRect>
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	0800a4e0 	.word	0x0800a4e0
 8000688:	0800a540 	.word	0x0800a540
 800068c:	0800a4e8 	.word	0x0800a4e8
 8000690:	0800a4fc 	.word	0x0800a4fc
 8000694:	200000f0 	.word	0x200000f0

08000698 <liczbaNaTekst>:

static void liczbaNaTekst(uint32_t liczba, char * tekst, unsigned int dlugosc_tekstu) {
 8000698:	b480      	push	{r7}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < dlugosc_tekstu; i++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e01d      	b.n	80006e6 <liczbaNaTekst+0x4e>
		char cyfra = '0' + liczba % 10;
 80006aa:	68f9      	ldr	r1, [r7, #12]
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <liczbaNaTekst+0x64>)
 80006ae:	fba3 2301 	umull	r2, r3, r3, r1
 80006b2:	08da      	lsrs	r2, r3, #3
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1aca      	subs	r2, r1, r3
 80006be:	b2d3      	uxtb	r3, r2
 80006c0:	3330      	adds	r3, #48	; 0x30
 80006c2:	74fb      	strb	r3, [r7, #19]
		tekst[dlugosc_tekstu-1-i] = cyfra;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	3b01      	subs	r3, #1
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	7cfa      	ldrb	r2, [r7, #19]
 80006d2:	701a      	strb	r2, [r3, #0]
		liczba /= 10;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4a09      	ldr	r2, [pc, #36]	; (80006fc <liczbaNaTekst+0x64>)
 80006d8:	fba2 2303 	umull	r2, r3, r2, r3
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < dlugosc_tekstu; i++) {
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d8dd      	bhi.n	80006aa <liczbaNaTekst+0x12>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	cccccccd 	.word	0xcccccccd

08000700 <rysujLicznikFPS>:

void rysujLicznikFPS(int liczba_fps) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	napis_fps[NAPIS_FPS_LICZBA_START+0] = '0' + liczba_fps / 10;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <rysujLicznikFPS+0x64>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	1092      	asrs	r2, r2, #2
 8000712:	17db      	asrs	r3, r3, #31
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3330      	adds	r3, #48	; 0x30
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <rysujLicznikFPS+0x68>)
 800071e:	73da      	strb	r2, [r3, #15]
	napis_fps[NAPIS_FPS_LICZBA_START+1] = '0' + liczba_fps % 10;
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <rysujLicznikFPS+0x64>)
 8000724:	fb83 1302 	smull	r1, r3, r3, r2
 8000728:	1099      	asrs	r1, r3, #2
 800072a:	17d3      	asrs	r3, r2, #31
 800072c:	1ac9      	subs	r1, r1, r3
 800072e:	460b      	mov	r3, r1
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	1ad1      	subs	r1, r2, r3
 8000738:	b2cb      	uxtb	r3, r1
 800073a:	3330      	adds	r3, #48	; 0x30
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <rysujLicznikFPS+0x68>)
 8000740:	741a      	strb	r2, [r3, #16]
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	f002 ff4b 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800074a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800074e:	f002 ff5f 	bl	8003610 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAtLine(LINIA_NAPISU_FPS, (uint8_t *)napis_fps);
 8000752:	4905      	ldr	r1, [pc, #20]	; (8000768 <rysujLicznikFPS+0x68>)
 8000754:	2000      	movs	r0, #0
 8000756:	f003 f8cf 	bl	80038f8 <BSP_LCD_DisplayStringAtLine>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	66666667 	.word	0x66666667
 8000768:	20000000 	.word	0x20000000

0800076c <rysujLicznikPunktow>:

static void rysujLicznikPunktow(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	liczbaNaTekst(licznik_punktow, napis_pkt+NAPIS_PKT_LICZBA_START, DLUGOSC_LICZNIKA_PUNKTOW);
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <rysujLicznikPunktow+0x30>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <rysujLicznikPunktow+0x34>)
 8000776:	2204      	movs	r2, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff8d 	bl	8000698 <liczbaNaTekst>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800077e:	f04f 30ff 	mov.w	r0, #4294967295
 8000782:	f002 ff2d 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000786:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800078a:	f002 ff41 	bl	8003610 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAtLine(LINIA_NAPISU_PKT, (uint8_t *)napis_pkt);
 800078e:	4905      	ldr	r1, [pc, #20]	; (80007a4 <rysujLicznikPunktow+0x38>)
 8000790:	2001      	movs	r0, #1
 8000792:	f003 f8b1 	bl	80038f8 <BSP_LCD_DisplayStringAtLine>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200009a4 	.word	0x200009a4
 80007a0:	20000027 	.word	0x20000027
 80007a4:	20000018 	.word	0x20000018

080007a8 <rysujPozycjeGalek>:

void rysujPozycjeGalek(uint32_t analogowe_pomiary[2]) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	liczbaNaTekst(analogowe_pomiary[0], napis_osx+NAPIS_OSX_LICZBA_START, 4);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4910      	ldr	r1, [pc, #64]	; (80007f8 <rysujPozycjeGalek+0x50>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff6d 	bl	8000698 <liczbaNaTekst>
	liczbaNaTekst(analogowe_pomiary[1], napis_osy+NAPIS_OSY_LICZBA_START, 4);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3304      	adds	r3, #4
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	490d      	ldr	r1, [pc, #52]	; (80007fc <rysujPozycjeGalek+0x54>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff65 	bl	8000698 <liczbaNaTekst>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007ce:	f04f 30ff 	mov.w	r0, #4294967295
 80007d2:	f002 ff05 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80007d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80007da:	f002 ff19 	bl	8003610 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAtLine(LINIA_NAPISU_OSX, (uint8_t *)napis_osx);
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <rysujPozycjeGalek+0x58>)
 80007e0:	2002      	movs	r0, #2
 80007e2:	f003 f889 	bl	80038f8 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(LINIA_NAPISU_OSY, (uint8_t *)napis_osy);
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <rysujPozycjeGalek+0x5c>)
 80007e8:	2003      	movs	r0, #3
 80007ea:	f003 f885 	bl	80038f8 <BSP_LCD_DisplayStringAtLine>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000041 	.word	0x20000041
 80007fc:	20000059 	.word	0x20000059
 8000800:	20000030 	.word	0x20000030
 8000804:	20000048 	.word	0x20000048

08000808 <rysujNapisyGameOver>:

void rysujNapisyGameOver(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800080e:	f04f 30ff 	mov.w	r0, #4294967295
 8000812:	f002 fee5 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000816:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800081a:	f002 fef9 	bl	8003610 <BSP_LCD_SetBackColor>
	for (int i = 0; i < LICZBA_NAPISOW_GAME_OVER; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e010      	b.n	8000846 <rysujNapisyGameOver+0x3e>
		BSP_LCD_DisplayStringAtLine(LINIA_NAPISU_GAME_OVER+i, (uint8_t *)napisy_game_over[i]);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b29b      	uxth	r3, r3
 8000828:	3307      	adds	r3, #7
 800082a:	b298      	uxth	r0, r3
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	4413      	add	r3, r2
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <rysujNapisyGameOver+0x50>)
 8000838:	4413      	add	r3, r2
 800083a:	4619      	mov	r1, r3
 800083c:	f003 f85c 	bl	80038f8 <BSP_LCD_DisplayStringAtLine>
	for (int i = 0; i < LICZBA_NAPISOW_GAME_OVER; i++) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b05      	cmp	r3, #5
 800084a:	ddeb      	ble.n	8000824 <rysujNapisyGameOver+0x1c>
	}
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000060 	.word	0x20000060

0800085c <rysujOczko>:

static void rysujOczko(int y, int x, Paleta p) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af02      	add	r7, sp, #8
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	71fb      	strb	r3, [r7, #7]
	wypelnijProstokat(POCZATEK_PLANSZY_Y + y * WYS_OCZKA, POCZATEK_PLANSZY_X + x * SZER_OCZKA, WYS_OCZKA, SZER_OCZKA, p+ROZMIAR_PALETY/2);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	0118      	lsls	r0, r3, #4
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	0119      	lsls	r1, r3, #4
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	3308      	adds	r3, #8
 8000876:	b2db      	uxtb	r3, r3
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2310      	movs	r3, #16
 800087c:	2210      	movs	r2, #16
 800087e:	f7ff feab 	bl	80005d8 <wypelnijProstokat>
	wypelnijProstokat(POCZATEK_PLANSZY_Y + y * WYS_OCZKA + SZER_RAMKI_OCZKA, POCZATEK_PLANSZY_X + x * SZER_OCZKA + SZER_RAMKI_OCZKA,
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	1cd8      	adds	r0, r3, #3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	1cd9      	adds	r1, r3, #3
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	230a      	movs	r3, #10
 8000894:	220a      	movs	r2, #10
 8000896:	f7ff fe9f 	bl	80005d8 <wypelnijProstokat>
				   	  WYS_OCZKA - SZER_RAMKI_OCZKA * 2, SZER_OCZKA - SZER_RAMKI_OCZKA * 2, p);
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <czyscOczko>:

static void czyscOczko(int y, int x) {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af02      	add	r7, sp, #8
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
	wypelnijProstokat(POCZATEK_PLANSZY_Y + y * WYS_OCZKA, POCZATEK_PLANSZY_X + x * SZER_OCZKA, WYS_OCZKA, SZER_OCZKA, C_SZARY);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	0118      	lsls	r0, r3, #4
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	0119      	lsls	r1, r3, #4
 80008b4:	230f      	movs	r3, #15
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2310      	movs	r3, #16
 80008ba:	2210      	movs	r2, #16
 80008bc:	f7ff fe8c 	bl	80005d8 <wypelnijProstokat>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <rysujKlocek>:


static void rysujKlocek(Klocek * k) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	for (int iy = 0; iy < k->dlugosc_boku_maski; iy++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e045      	b.n	8000962 <rysujKlocek+0x9a>
		for (int ix = 0; ix < k->dlugosc_boku_maski; ix++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e03a      	b.n	8000952 <rysujKlocek+0x8a>
			if (k->y+iy >= OCZKA_W_PIONIE ||
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	4413      	add	r3, r2
 80008e4:	2b13      	cmp	r3, #19
 80008e6:	dc2e      	bgt.n	8000946 <rysujKlocek+0x7e>
				k->x+ix >= OCZKA_W_POZIOMIE ||
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a1a      	ldr	r2, [r3, #32]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	4413      	add	r3, r2
			if (k->y+iy >= OCZKA_W_PIONIE ||
 80008f0:	2b09      	cmp	r3, #9
 80008f2:	dc28      	bgt.n	8000946 <rysujKlocek+0x7e>
				k->y+iy < 0 ||
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	4413      	add	r3, r2
				k->x+ix >= OCZKA_W_POZIOMIE ||
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db22      	blt.n	8000946 <rysujKlocek+0x7e>
				k->x+ix < 0) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a1a      	ldr	r2, [r3, #32]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4413      	add	r3, r2
				k->y+iy < 0 ||
 8000908:	2b00      	cmp	r3, #0
 800090a:	db1c      	blt.n	8000946 <rysujKlocek+0x7e>
				continue;
			}
			int ik = k->maska[iy][ix];
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	441a      	add	r2, r3
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]
			if (ik == 0) {
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d013      	beq.n	800094a <rysujKlocek+0x82>
				continue;
			}
			Paleta p = kolory_oczek[ik];
 8000922:	4a15      	ldr	r2, [pc, #84]	; (8000978 <rysujKlocek+0xb0>)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	72fb      	strb	r3, [r7, #11]
			rysujOczko(k->y+iy, k->x+ix, p);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	18d0      	adds	r0, r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a1a      	ldr	r2, [r3, #32]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4413      	add	r3, r2
 800093c:	7afa      	ldrb	r2, [r7, #11]
 800093e:	4619      	mov	r1, r3
 8000940:	f7ff ff8c 	bl	800085c <rysujOczko>
 8000944:	e002      	b.n	800094c <rysujKlocek+0x84>
				continue;
 8000946:	bf00      	nop
 8000948:	e000      	b.n	800094c <rysujKlocek+0x84>
				continue;
 800094a:	bf00      	nop
		for (int ix = 0; ix < k->dlugosc_boku_maski; ix++) {
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	3301      	adds	r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8bf      	bhi.n	80008dc <rysujKlocek+0x14>
	for (int iy = 0; iy < k->dlugosc_boku_maski; iy++) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8b4      	bhi.n	80008d6 <rysujKlocek+0xe>
		}
	}
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000130 	.word	0x20000130

0800097c <czyscKlocek>:

static void czyscKlocek(Klocek * k) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	for (int iy = 0; iy < k->dlugosc_boku_maski; iy++) {
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e03f      	b.n	8000a0a <czyscKlocek+0x8e>
		for (int ix = 0; ix < k->dlugosc_boku_maski; ix++) {
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	e034      	b.n	80009fa <czyscKlocek+0x7e>
			if (k->y+iy >= OCZKA_W_PIONIE ||
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4413      	add	r3, r2
 8000998:	2b13      	cmp	r3, #19
 800099a:	dc28      	bgt.n	80009ee <czyscKlocek+0x72>
				k->x+ix >= OCZKA_W_POZIOMIE ||
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a1a      	ldr	r2, [r3, #32]
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	4413      	add	r3, r2
			if (k->y+iy >= OCZKA_W_PIONIE ||
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	dc22      	bgt.n	80009ee <czyscKlocek+0x72>
				k->y+iy < 0 ||
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	4413      	add	r3, r2
				k->x+ix >= OCZKA_W_POZIOMIE ||
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db1c      	blt.n	80009ee <czyscKlocek+0x72>
				k->x+ix < 0) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a1a      	ldr	r2, [r3, #32]
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4413      	add	r3, r2
				k->y+iy < 0 ||
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db16      	blt.n	80009ee <czyscKlocek+0x72>
				continue;
			}
			int ik = k->maska[iy][ix];
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	441a      	add	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	60fb      	str	r3, [r7, #12]
			if (ik == 0) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d00d      	beq.n	80009f2 <czyscKlocek+0x76>
				continue;
			}
			czyscOczko(k->y+iy, k->x+ix);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	18d0      	adds	r0, r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a1a      	ldr	r2, [r3, #32]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	4413      	add	r3, r2
 80009e6:	4619      	mov	r1, r3
 80009e8:	f7ff ff5b 	bl	80008a2 <czyscOczko>
 80009ec:	e002      	b.n	80009f4 <czyscKlocek+0x78>
				continue;
 80009ee:	bf00      	nop
 80009f0:	e000      	b.n	80009f4 <czyscKlocek+0x78>
				continue;
 80009f2:	bf00      	nop
		for (int ix = 0; ix < k->dlugosc_boku_maski; ix++) {
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	3301      	adds	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8c5      	bhi.n	8000990 <czyscKlocek+0x14>
	for (int iy = 0; iy < k->dlugosc_boku_maski; iy++) {
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8ba      	bhi.n	800098a <czyscKlocek+0xe>
		}
	}
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <rysujPlansze>:

static void rysujPlansze(unsigned int ile_rzedow) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	for (int iy = 0; iy < ile_rzedow; iy++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e029      	b.n	8000a82 <rysujPlansze+0x62>
		for (int ix = 0; ix < OCZKA_W_POZIOMIE; ix++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	e020      	b.n	8000a76 <rysujPlansze+0x56>
			int ik = plansza[iy][ix];
 8000a34:	4917      	ldr	r1, [pc, #92]	; (8000a94 <rysujPlansze+0x74>)
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	18ca      	adds	r2, r1, r3
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
			if (ik == 0) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d104      	bne.n	8000a5a <rysujPlansze+0x3a>
				czyscOczko(iy, ix);
 8000a50:	6939      	ldr	r1, [r7, #16]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff25 	bl	80008a2 <czyscOczko>
 8000a58:	e00a      	b.n	8000a70 <rysujPlansze+0x50>
			} else {
				Paleta p = kolory_oczek[ik];
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <rysujPlansze+0x78>)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	72fb      	strb	r3, [r7, #11]
				rysujOczko(iy, ix, p);
 8000a64:	7afb      	ldrb	r3, [r7, #11]
 8000a66:	461a      	mov	r2, r3
 8000a68:	6939      	ldr	r1, [r7, #16]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff fef6 	bl	800085c <rysujOczko>
		for (int ix = 0; ix < OCZKA_W_POZIOMIE; ix++) {
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	3301      	adds	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	dddb      	ble.n	8000a34 <rysujPlansze+0x14>
	for (int iy = 0; iy < ile_rzedow; iy++) {
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d8d1      	bhi.n	8000a2e <rysujPlansze+0xe>
			}
		}
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000864 	.word	0x20000864
 8000a98:	20000130 	.word	0x20000130

08000a9c <losujNowyRuchomyKlocek>:

static int losujLiczbeNieujemna(void);

static void losujNowyRuchomyKlocek(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
	int irk = losujLiczbeNieujemna() % LICZBA_RODZAJOW_KLOCKOW;
 8000aa2:	f000 fd9d 	bl	80015e0 <losujLiczbeNieujemna>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <losujNowyRuchomyKlocek+0x130>)
 8000aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000aae:	4413      	add	r3, r2
 8000ab0:	1099      	asrs	r1, r3, #2
 8000ab2:	17d3      	asrs	r3, r2, #31
 8000ab4:	1ac9      	subs	r1, r1, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	1a5b      	subs	r3, r3, r1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	607b      	str	r3, [r7, #4]
	int ikk = (losujLiczbeNieujemna() % LICZBA_KOLOROW_OCZEK) + 1;
 8000ac0:	f000 fd8e 	bl	80015e0 <losujLiczbeNieujemna>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <losujNowyRuchomyKlocek+0x130>)
 8000ac8:	fb83 1302 	smull	r1, r3, r3, r2
 8000acc:	4413      	add	r3, r2
 8000ace:	1099      	asrs	r1, r3, #2
 8000ad0:	17d3      	asrs	r3, r2, #31
 8000ad2:	1ac9      	subs	r1, r1, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	1ad1      	subs	r1, r2, r3
 8000adc:	1c4b      	adds	r3, r1, #1
 8000ade:	603b      	str	r3, [r7, #0]

	BIEZACY_KLOCEK()->dlugosc_boku_maski = dlugosci_bokow_masek[irk];
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	493b      	ldr	r1, [pc, #236]	; (8000bd4 <losujNowyRuchomyKlocek+0x138>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000aec:	493a      	ldr	r1, [pc, #232]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000aee:	202c      	movs	r0, #44	; 0x2c
 8000af0:	fb00 f303 	mul.w	r3, r0, r3
 8000af4:	440b      	add	r3, r1
 8000af6:	3328      	adds	r3, #40	; 0x28
 8000af8:	601a      	str	r2, [r3, #0]
	BIEZACY_KLOCEK()->x = (OCZKA_W_POZIOMIE - (BIEZACY_KLOCEK()->dlugosc_boku_maski & (~1))) / 2;
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000b00:	212c      	movs	r1, #44	; 0x2c
 8000b02:	fb01 f303 	mul.w	r3, r1, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	3328      	adds	r3, #40	; 0x28
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	f1c3 030a 	rsb	r3, r3, #10
 8000b14:	085a      	lsrs	r2, r3, #1
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4a2e      	ldr	r2, [pc, #184]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000b1e:	212c      	movs	r1, #44	; 0x2c
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	3320      	adds	r3, #32
 8000b28:	6018      	str	r0, [r3, #0]
	BIEZACY_KLOCEK()->y = -BIEZACY_KLOCEK()->dlugosc_boku_maski;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000b30:	212c      	movs	r1, #44	; 0x2c
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	3328      	adds	r3, #40	; 0x28
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	425a      	negs	r2, r3
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4610      	mov	r0, r2
 8000b44:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000b46:	212c      	movs	r1, #44	; 0x2c
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	3324      	adds	r3, #36	; 0x24
 8000b50:	6018      	str	r0, [r3, #0]
	czas_przesuniecia += cooldown_na_przesuniecie;
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <losujNowyRuchomyKlocek+0x140>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <losujNowyRuchomyKlocek+0x144>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <losujNowyRuchomyKlocek+0x140>)
 8000b5e:	6013      	str	r3, [r2, #0]

	for (int iy = 0; iy < MAKSYMALNY_BOK_MASKI_KLOCKA; iy++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e02a      	b.n	8000bbc <losujNowyRuchomyKlocek+0x120>
		for (int ix = 0; ix < MAKSYMALNY_BOK_MASKI_KLOCKA; ix++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	e021      	b.n	8000bb0 <losujNowyRuchomyKlocek+0x114>
			BIEZACY_KLOCEK()->maska[iy][ix] = maski_klockow[irk][iy][ix] * ikk;
 8000b6c:	491d      	ldr	r1, [pc, #116]	; (8000be4 <losujNowyRuchomyKlocek+0x148>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	18ca      	adds	r2, r1, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	7819      	ldrb	r1, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <losujNowyRuchomyKlocek+0x134>)
 8000b86:	6812      	ldr	r2, [r2, #0]
 8000b88:	fb11 f303 	smulbb	r3, r1, r3
 8000b8c:	b2d8      	uxtb	r0, r3
 8000b8e:	4912      	ldr	r1, [pc, #72]	; (8000bd8 <losujNowyRuchomyKlocek+0x13c>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	18ca      	adds	r2, r1, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < MAKSYMALNY_BOK_MASKI_KLOCKA; ix++) {
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	ddda      	ble.n	8000b6c <losujNowyRuchomyKlocek+0xd0>
	for (int iy = 0; iy < MAKSYMALNY_BOK_MASKI_KLOCKA; iy++) {
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	ddd1      	ble.n	8000b66 <losujNowyRuchomyKlocek+0xca>
		}
	}
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	92492493 	.word	0x92492493
 8000bd0:	20000984 	.word	0x20000984
 8000bd4:	200001a8 	.word	0x200001a8
 8000bd8:	2000092c 	.word	0x2000092c
 8000bdc:	20000988 	.word	0x20000988
 8000be0:	200001c4 	.word	0x200001c4
 8000be4:	20000138 	.word	0x20000138

08000be8 <czyRuchomyKlocekKoliduje>:

static int czyRuchomyKlocekKoliduje(void) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e07b      	b.n	8000cec <czyRuchomyKlocekKoliduje+0x104>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e069      	b.n	8000cce <czyRuchomyKlocekKoliduje+0xe6>
			if (BIEZACY_KLOCEK()->maska[iy][ix] &&
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4946      	ldr	r1, [pc, #280]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18ca      	adds	r2, r1, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d055      	beq.n	8000cc8 <czyRuchomyKlocekKoliduje+0xe0>
				(BIEZACY_KLOCEK()->x+ix >= OCZKA_W_POZIOMIE || BIEZACY_KLOCEK()->x+ix < 0 ||
 8000c1c:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c22:	212c      	movs	r1, #44	; 0x2c
 8000c24:	fb01 f303 	mul.w	r3, r1, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	3320      	adds	r3, #32
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	4413      	add	r3, r2
			if (BIEZACY_KLOCEK()->maska[iy][ix] &&
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	dc46      	bgt.n	8000cc4 <czyRuchomyKlocekKoliduje+0xdc>
				(BIEZACY_KLOCEK()->x+ix >= OCZKA_W_POZIOMIE || BIEZACY_KLOCEK()->x+ix < 0 ||
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a37      	ldr	r2, [pc, #220]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c3c:	212c      	movs	r1, #44	; 0x2c
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	4413      	add	r3, r2
 8000c44:	3320      	adds	r3, #32
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db39      	blt.n	8000cc4 <czyRuchomyKlocekKoliduje+0xdc>
				 BIEZACY_KLOCEK()->y+iy >= OCZKA_W_PIONIE ||
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c56:	212c      	movs	r1, #44	; 0x2c
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3324      	adds	r3, #36	; 0x24
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
				(BIEZACY_KLOCEK()->x+ix >= OCZKA_W_POZIOMIE || BIEZACY_KLOCEK()->x+ix < 0 ||
 8000c66:	2b13      	cmp	r3, #19
 8000c68:	dc2c      	bgt.n	8000cc4 <czyRuchomyKlocekKoliduje+0xdc>
				 (BIEZACY_KLOCEK()->y+iy >= 0 && plansza[BIEZACY_KLOCEK()->y+iy][BIEZACY_KLOCEK()->x+ix]))) {
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c70:	212c      	movs	r1, #44	; 0x2c
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	3324      	adds	r3, #36	; 0x24
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
				 BIEZACY_KLOCEK()->y+iy >= OCZKA_W_PIONIE ||
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db21      	blt.n	8000cc8 <czyRuchomyKlocekKoliduje+0xe0>
				 (BIEZACY_KLOCEK()->y+iy >= 0 && plansza[BIEZACY_KLOCEK()->y+iy][BIEZACY_KLOCEK()->x+ix]))) {
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000c8a:	212c      	movs	r1, #44	; 0x2c
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	3324      	adds	r3, #36	; 0x24
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	441a      	add	r2, r3
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	491e      	ldr	r1, [pc, #120]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000ca0:	202c      	movs	r0, #44	; 0x2c
 8000ca2:	fb00 f303 	mul.w	r3, r0, r3
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3320      	adds	r3, #32
 8000caa:	6819      	ldr	r1, [r3, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	4419      	add	r1, r3
 8000cb0:	481a      	ldr	r0, [pc, #104]	; (8000d1c <czyRuchomyKlocekKoliduje+0x134>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4403      	add	r3, r0
 8000cbc:	440b      	add	r3, r1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <czyRuchomyKlocekKoliduje+0xe0>
				return 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e01f      	b.n	8000d08 <czyRuchomyKlocekKoliduje+0x120>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000cd4:	212c      	movs	r1, #44	; 0x2c
 8000cd6:	fb01 f303 	mul.w	r3, r1, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	3328      	adds	r3, #40	; 0x28
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d889      	bhi.n	8000bfa <czyRuchomyKlocekKoliduje+0x12>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <czyRuchomyKlocekKoliduje+0x12c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <czyRuchomyKlocekKoliduje+0x130>)
 8000cf2:	212c      	movs	r1, #44	; 0x2c
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3328      	adds	r3, #40	; 0x28
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f63f af77 	bhi.w	8000bf4 <czyRuchomyKlocekKoliduje+0xc>
			}
		}
	}
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000984 	.word	0x20000984
 8000d18:	2000092c 	.word	0x2000092c
 8000d1c:	20000864 	.word	0x20000864

08000d20 <obrocKlocekWPrawo>:

static void obrocKlocekWPrawo() {
 8000d20:	b490      	push	{r4, r7}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e032      	b.n	8000d92 <obrocKlocekWPrawo+0x72>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	e020      	b.n	8000d74 <obrocKlocekWPrawo+0x54>
			BIEZACY_KLOCEK()->maska_tmp[iy][ix] = BIEZACY_KLOCEK()->maska[iy][ix];
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000d38:	6819      	ldr	r1, [r3, #0]
 8000d3a:	4846      	ldr	r0, [pc, #280]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	18c2      	adds	r2, r0, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	4413      	add	r3, r2
 8000d52:	781c      	ldrb	r4, [r3, #0]
 8000d54:	483f      	ldr	r0, [pc, #252]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	009a      	lsls	r2, r3, #2
 8000d5a:	232c      	movs	r3, #44	; 0x2c
 8000d5c:	fb01 f303 	mul.w	r3, r1, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	18c2      	adds	r2, r0, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4413      	add	r3, r2
 8000d68:	3310      	adds	r3, #16
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a36      	ldr	r2, [pc, #216]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000d7a:	212c      	movs	r1, #44	; 0x2c
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	3328      	adds	r3, #40	; 0x28
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8d2      	bhi.n	8000d32 <obrocKlocekWPrawo+0x12>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000d98:	212c      	movs	r1, #44	; 0x2c
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	3328      	adds	r3, #40	; 0x28
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d8c0      	bhi.n	8000d2c <obrocKlocekWPrawo+0xc>
		}
	}
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e03d      	b.n	8000e2c <obrocKlocekWPrawo+0x10c>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	e02b      	b.n	8000e0e <obrocKlocekWPrawo+0xee>
			BIEZACY_KLOCEK()->maska[iy][ix] = BIEZACY_KLOCEK()->maska_tmp[BIEZACY_KLOCEK()->dlugosc_boku_maski-1-ix][iy];
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4925      	ldr	r1, [pc, #148]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000dc0:	202c      	movs	r0, #44	; 0x2c
 8000dc2:	fb00 f202 	mul.w	r2, r0, r2
 8000dc6:	440a      	add	r2, r1
 8000dc8:	3228      	adds	r2, #40	; 0x28
 8000dca:	6811      	ldr	r1, [r2, #0]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	1a8a      	subs	r2, r1, r2
 8000dd0:	1e51      	subs	r1, r2, #1
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000dd8:	0089      	lsls	r1, r1, #2
 8000dda:	242c      	movs	r4, #44	; 0x2c
 8000ddc:	fb04 f303 	mul.w	r3, r4, r3
 8000de0:	440b      	add	r3, r1
 8000de2:	18c1      	adds	r1, r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	440b      	add	r3, r1
 8000de8:	3310      	adds	r3, #16
 8000dea:	7818      	ldrb	r0, [r3, #0]
 8000dec:	4919      	ldr	r1, [pc, #100]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	18ca      	adds	r2, r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4602      	mov	r2, r0
 8000e06:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000e14:	212c      	movs	r1, #44	; 0x2c
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3328      	adds	r3, #40	; 0x28
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d8c7      	bhi.n	8000db6 <obrocKlocekWPrawo+0x96>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <obrocKlocekWPrawo+0x130>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <obrocKlocekWPrawo+0x134>)
 8000e32:	212c      	movs	r1, #44	; 0x2c
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	3328      	adds	r3, #40	; 0x28
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8b5      	bhi.n	8000db0 <obrocKlocekWPrawo+0x90>
		}
	}
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc90      	pop	{r4, r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000984 	.word	0x20000984
 8000e54:	2000092c 	.word	0x2000092c

08000e58 <obrocKlocekWLewo>:

static void obrocKlocekWLewo() {
 8000e58:	b4b0      	push	{r4, r5, r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e032      	b.n	8000eca <obrocKlocekWLewo+0x72>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e020      	b.n	8000eac <obrocKlocekWLewo+0x54>
			BIEZACY_KLOCEK()->maska_tmp[iy][ix] = BIEZACY_KLOCEK()->maska[iy][ix];
 8000e6a:	4b47      	ldr	r3, [pc, #284]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	4846      	ldr	r0, [pc, #280]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	18c2      	adds	r2, r0, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	781c      	ldrb	r4, [r3, #0]
 8000e8c:	483f      	ldr	r0, [pc, #252]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	232c      	movs	r3, #44	; 0x2c
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	18c2      	adds	r2, r0, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3310      	adds	r3, #16
 8000ea2:	4622      	mov	r2, r4
 8000ea4:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a36      	ldr	r2, [pc, #216]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000eb2:	212c      	movs	r1, #44	; 0x2c
 8000eb4:	fb01 f303 	mul.w	r3, r1, r3
 8000eb8:	4413      	add	r3, r2
 8000eba:	3328      	adds	r3, #40	; 0x28
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8d2      	bhi.n	8000e6a <obrocKlocekWLewo+0x12>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000ed0:	212c      	movs	r1, #44	; 0x2c
 8000ed2:	fb01 f303 	mul.w	r3, r1, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3328      	adds	r3, #40	; 0x28
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d8c0      	bhi.n	8000e64 <obrocKlocekWLewo+0xc>
		}
	}
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	e03d      	b.n	8000f64 <obrocKlocekWLewo+0x10c>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	e02b      	b.n	8000f46 <obrocKlocekWLewo+0xee>
			BIEZACY_KLOCEK()->maska[iy][ix] = BIEZACY_KLOCEK()->maska_tmp[ix][BIEZACY_KLOCEK()->dlugosc_boku_maski-1-iy];
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000ef8:	202c      	movs	r0, #44	; 0x2c
 8000efa:	fb00 f303 	mul.w	r3, r0, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	3328      	adds	r3, #40	; 0x28
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	4c1f      	ldr	r4, [pc, #124]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000f10:	6838      	ldr	r0, [r7, #0]
 8000f12:	0080      	lsls	r0, r0, #2
 8000f14:	252c      	movs	r5, #44	; 0x2c
 8000f16:	fb05 f101 	mul.w	r1, r5, r1
 8000f1a:	4401      	add	r1, r0
 8000f1c:	4421      	add	r1, r4
 8000f1e:	440b      	add	r3, r1
 8000f20:	3310      	adds	r3, #16
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	4919      	ldr	r1, [pc, #100]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	18ca      	adds	r2, r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000f4c:	212c      	movs	r1, #44	; 0x2c
 8000f4e:	fb01 f303 	mul.w	r3, r1, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	3328      	adds	r3, #40	; 0x28
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8c7      	bhi.n	8000eee <obrocKlocekWLewo+0x96>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3301      	adds	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <obrocKlocekWLewo+0x130>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <obrocKlocekWLewo+0x134>)
 8000f6a:	212c      	movs	r1, #44	; 0x2c
 8000f6c:	fb01 f303 	mul.w	r3, r1, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	3328      	adds	r3, #40	; 0x28
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8b5      	bhi.n	8000ee8 <obrocKlocekWLewo+0x90>
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bcb0      	pop	{r4, r5, r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000984 	.word	0x20000984
 8000f8c:	2000092c 	.word	0x2000092c

08000f90 <odwrocObrot>:

static void odwrocObrot() {
 8000f90:	b490      	push	{r4, r7}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e032      	b.n	8001002 <odwrocObrot+0x72>
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	e020      	b.n	8000fe4 <odwrocObrot+0x54>
			BIEZACY_KLOCEK()->maska[iy][ix] = BIEZACY_KLOCEK()->maska_tmp[iy][ix];
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <odwrocObrot+0x98>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a20      	ldr	r2, [pc, #128]	; (8001028 <odwrocObrot+0x98>)
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	4820      	ldr	r0, [pc, #128]	; (800102c <odwrocObrot+0x9c>)
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	0089      	lsls	r1, r1, #2
 8000fb0:	242c      	movs	r4, #44	; 0x2c
 8000fb2:	fb04 f303 	mul.w	r3, r4, r3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	18c1      	adds	r1, r0, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3310      	adds	r3, #16
 8000fc0:	7818      	ldrb	r0, [r3, #0]
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <odwrocObrot+0x9c>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	18ca      	adds	r2, r1, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4602      	mov	r2, r0
 8000fdc:	701a      	strb	r2, [r3, #0]
		for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <odwrocObrot+0x98>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <odwrocObrot+0x9c>)
 8000fea:	212c      	movs	r1, #44	; 0x2c
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3328      	adds	r3, #40	; 0x28
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8d2      	bhi.n	8000fa2 <odwrocObrot+0x12>
	for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <odwrocObrot+0x98>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <odwrocObrot+0x9c>)
 8001008:	212c      	movs	r1, #44	; 0x2c
 800100a:	fb01 f303 	mul.w	r3, r1, r3
 800100e:	4413      	add	r3, r2
 8001010:	3328      	adds	r3, #40	; 0x28
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d8c0      	bhi.n	8000f9c <odwrocObrot+0xc>
		}
	}
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bc90      	pop	{r4, r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000984 	.word	0x20000984
 800102c:	2000092c 	.word	0x2000092c

08001030 <aktualizujPlansze>:

static void aktualizujPlansze(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
	int liczba_wypelnionych_linii = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
	for (int iy = 0; iy < OCZKA_W_PIONIE; iy++) {
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	e058      	b.n	80010f2 <aktualizujPlansze+0xc2>
		int wypelniona = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
		for (int ix = 0; ix < OCZKA_W_POZIOMIE; ix++) {
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	e011      	b.n	800106e <aktualizujPlansze+0x3e>
			if (!plansza[iy][ix]) {
 800104a:	4936      	ldr	r1, [pc, #216]	; (8001124 <aktualizujPlansze+0xf4>)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	18ca      	adds	r2, r1, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <aktualizujPlansze+0x38>
				wypelniona = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
				break;
 8001066:	e005      	b.n	8001074 <aktualizujPlansze+0x44>
		for (int ix = 0; ix < OCZKA_W_POZIOMIE; ix++) {
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	3301      	adds	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	2b09      	cmp	r3, #9
 8001072:	ddea      	ble.n	800104a <aktualizujPlansze+0x1a>
			}
		}
		if (wypelniona) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d038      	beq.n	80010ec <aktualizujPlansze+0xbc>
			liczba_wypelnionych_linii++;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
			for (int jy = iy; jy > 0; jy--) {
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e021      	b.n	80010ca <aktualizujPlansze+0x9a>
				for (int jx = 0; jx < OCZKA_W_POZIOMIE; jx++) {
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	e018      	b.n	80010be <aktualizujPlansze+0x8e>
					plansza[jy][jx] = plansza[jy-1][jx];
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	4924      	ldr	r1, [pc, #144]	; (8001124 <aktualizujPlansze+0xf4>)
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	18ca      	adds	r2, r1, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4413      	add	r3, r2
 80010a0:	7818      	ldrb	r0, [r3, #0]
 80010a2:	4920      	ldr	r1, [pc, #128]	; (8001124 <aktualizujPlansze+0xf4>)
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	18ca      	adds	r2, r1, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	4602      	mov	r2, r0
 80010b6:	701a      	strb	r2, [r3, #0]
				for (int jx = 0; jx < OCZKA_W_POZIOMIE; jx++) {
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	dde3      	ble.n	800108c <aktualizujPlansze+0x5c>
			for (int jy = iy; jy > 0; jy--) {
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dcda      	bgt.n	8001086 <aktualizujPlansze+0x56>
				}
			}
			for (int jx = 0; jx < OCZKA_W_POZIOMIE; jx++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	e007      	b.n	80010e6 <aktualizujPlansze+0xb6>
				plansza[0][jx] = 0;
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <aktualizujPlansze+0xf4>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4413      	add	r3, r2
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			for (int jx = 0; jx < OCZKA_W_POZIOMIE; jx++) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddf4      	ble.n	80010d6 <aktualizujPlansze+0xa6>
	for (int iy = 0; iy < OCZKA_W_PIONIE; iy++) {
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	3301      	adds	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b13      	cmp	r3, #19
 80010f6:	dda3      	ble.n	8001040 <aktualizujPlansze+0x10>
			}
		}
	}
	if (liczba_wypelnionych_linii != 0) {
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <aktualizujPlansze+0xe4>
		licznik_punktow += liczba_wypelnionych_linii * liczba_wypelnionych_linii;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fb03 f303 	mul.w	r3, r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <aktualizujPlansze+0xf8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <aktualizujPlansze+0xf8>)
 800110e:	6013      	str	r3, [r2, #0]
		rysujLicznikPunktow();
 8001110:	f7ff fb2c 	bl	800076c <rysujLicznikPunktow>
	}
	rysujPlansze(OCZKA_W_PIONIE);
 8001114:	2014      	movs	r0, #20
 8001116:	f7ff fc83 	bl	8000a20 <rysujPlansze>
}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000864 	.word	0x20000864
 8001128:	200009a4 	.word	0x200009a4

0800112c <aktualizujRuchomyKlocek>:

static void aktualizujRuchomyKlocek(int czas_od_ostatniej_aktualizacji) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	memcpy(POPRZEDNI_KLOCEK(), BIEZACY_KLOCEK(), sizeof(*BIEZACY_KLOCEK()));
 8001134:	4ba2      	ldr	r3, [pc, #648]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	222c      	movs	r2, #44	; 0x2c
 8001140:	fb02 f303 	mul.w	r3, r2, r3
 8001144:	4a9f      	ldr	r2, [pc, #636]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001146:	1898      	adds	r0, r3, r2
 8001148:	4b9d      	ldr	r3, [pc, #628]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	222c      	movs	r2, #44	; 0x2c
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4a9c      	ldr	r2, [pc, #624]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001154:	4413      	add	r3, r2
 8001156:	222c      	movs	r2, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	f008 fbb0 	bl	80098be <memcpy>
	int narysuj_ponownie = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24

	cooldown_na_obrot_w_prawo = MAX(0, cooldown_na_obrot_w_prawo-czas_od_ostatniej_aktualizacji);
 8001162:	4b99      	ldr	r3, [pc, #612]	; (80013c8 <aktualizujRuchomyKlocek+0x29c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800116e:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <aktualizujRuchomyKlocek+0x29c>)
 8001170:	6013      	str	r3, [r2, #0]
	cooldown_na_obrot_w_lewo = MAX(0, cooldown_na_obrot_w_lewo-czas_od_ostatniej_aktualizacji);
 8001172:	4b96      	ldr	r3, [pc, #600]	; (80013cc <aktualizujRuchomyKlocek+0x2a0>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800117e:	4a93      	ldr	r2, [pc, #588]	; (80013cc <aktualizujRuchomyKlocek+0x2a0>)
 8001180:	6013      	str	r3, [r2, #0]
	cooldown_na_ruch_w_prawo = MAX(0, cooldown_na_ruch_w_prawo-czas_od_ostatniej_aktualizacji);
 8001182:	4b93      	ldr	r3, [pc, #588]	; (80013d0 <aktualizujRuchomyKlocek+0x2a4>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <aktualizujRuchomyKlocek+0x2a4>)
 8001190:	6013      	str	r3, [r2, #0]
	cooldown_na_ruch_w_lewo = MAX(0, cooldown_na_ruch_w_lewo-czas_od_ostatniej_aktualizacji);
 8001192:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <aktualizujRuchomyKlocek+0x2a8>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800119e:	4a8d      	ldr	r2, [pc, #564]	; (80013d4 <aktualizujRuchomyKlocek+0x2a8>)
 80011a0:	6013      	str	r3, [r2, #0]

	if (ruch_w_prawo && cooldown_na_ruch_w_prawo == 0) {
 80011a2:	4b8d      	ldr	r3, [pc, #564]	; (80013d8 <aktualizujRuchomyKlocek+0x2ac>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d036      	beq.n	8001218 <aktualizujRuchomyKlocek+0xec>
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <aktualizujRuchomyKlocek+0x2a4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d132      	bne.n	8001218 <aktualizujRuchomyKlocek+0xec>
		BIEZACY_KLOCEK()->x++;
 80011b2:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4983      	ldr	r1, [pc, #524]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 80011b8:	222c      	movs	r2, #44	; 0x2c
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	440a      	add	r2, r1
 80011c0:	3220      	adds	r2, #32
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	3201      	adds	r2, #1
 80011c6:	497f      	ldr	r1, [pc, #508]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 80011c8:	202c      	movs	r0, #44	; 0x2c
 80011ca:	fb00 f303 	mul.w	r3, r0, r3
 80011ce:	440b      	add	r3, r1
 80011d0:	3320      	adds	r3, #32
 80011d2:	601a      	str	r2, [r3, #0]
		int l_narysuj_ponownie = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
		if (czyRuchomyKlocekKoliduje()) {
 80011d8:	f7ff fd06 	bl	8000be8 <czyRuchomyKlocekKoliduje>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d013      	beq.n	800120a <aktualizujRuchomyKlocek+0xde>
			BIEZACY_KLOCEK()->x--;
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4977      	ldr	r1, [pc, #476]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 80011e8:	222c      	movs	r2, #44	; 0x2c
 80011ea:	fb03 f202 	mul.w	r2, r3, r2
 80011ee:	440a      	add	r2, r1
 80011f0:	3220      	adds	r2, #32
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	4973      	ldr	r1, [pc, #460]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 80011f8:	202c      	movs	r0, #44	; 0x2c
 80011fa:	fb00 f303 	mul.w	r3, r0, r3
 80011fe:	440b      	add	r3, r1
 8001200:	3320      	adds	r3, #32
 8001202:	601a      	str	r2, [r3, #0]
			l_narysuj_ponownie = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
 8001208:	e002      	b.n	8001210 <aktualizujRuchomyKlocek+0xe4>
		} else {
			cooldown_na_ruch_w_prawo = COOLDOWN_NA_RUCH;
 800120a:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <aktualizujRuchomyKlocek+0x2a4>)
 800120c:	22e1      	movs	r2, #225	; 0xe1
 800120e:	601a      	str	r2, [r3, #0]
		}
		narysuj_ponownie |= l_narysuj_ponownie;
 8001210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	4313      	orrs	r3, r2
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (ruch_w_lewo && cooldown_na_ruch_w_lewo == 0) {
 8001218:	4b70      	ldr	r3, [pc, #448]	; (80013dc <aktualizujRuchomyKlocek+0x2b0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d036      	beq.n	800128e <aktualizujRuchomyKlocek+0x162>
 8001220:	4b6c      	ldr	r3, [pc, #432]	; (80013d4 <aktualizujRuchomyKlocek+0x2a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d132      	bne.n	800128e <aktualizujRuchomyKlocek+0x162>
		BIEZACY_KLOCEK()->x--;
 8001228:	4b65      	ldr	r3, [pc, #404]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4965      	ldr	r1, [pc, #404]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 800122e:	222c      	movs	r2, #44	; 0x2c
 8001230:	fb03 f202 	mul.w	r2, r3, r2
 8001234:	440a      	add	r2, r1
 8001236:	3220      	adds	r2, #32
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	3a01      	subs	r2, #1
 800123c:	4961      	ldr	r1, [pc, #388]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 800123e:	202c      	movs	r0, #44	; 0x2c
 8001240:	fb00 f303 	mul.w	r3, r0, r3
 8001244:	440b      	add	r3, r1
 8001246:	3320      	adds	r3, #32
 8001248:	601a      	str	r2, [r3, #0]
		int l_narysuj_ponownie = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
		if (czyRuchomyKlocekKoliduje()) {
 800124e:	f7ff fccb 	bl	8000be8 <czyRuchomyKlocekKoliduje>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <aktualizujRuchomyKlocek+0x154>
			BIEZACY_KLOCEK()->x++;
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4959      	ldr	r1, [pc, #356]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 800125e:	222c      	movs	r2, #44	; 0x2c
 8001260:	fb03 f202 	mul.w	r2, r3, r2
 8001264:	440a      	add	r2, r1
 8001266:	3220      	adds	r2, #32
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	3201      	adds	r2, #1
 800126c:	4955      	ldr	r1, [pc, #340]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 800126e:	202c      	movs	r0, #44	; 0x2c
 8001270:	fb00 f303 	mul.w	r3, r0, r3
 8001274:	440b      	add	r3, r1
 8001276:	3320      	adds	r3, #32
 8001278:	601a      	str	r2, [r3, #0]
			l_narysuj_ponownie = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e002      	b.n	8001286 <aktualizujRuchomyKlocek+0x15a>
		} else {
			cooldown_na_ruch_w_lewo = COOLDOWN_NA_RUCH;
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <aktualizujRuchomyKlocek+0x2a8>)
 8001282:	22e1      	movs	r2, #225	; 0xe1
 8001284:	601a      	str	r2, [r3, #0]
		}
		narysuj_ponownie |= l_narysuj_ponownie;
 8001286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4313      	orrs	r3, r2
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (obrot_w_prawo && cooldown_na_obrot_w_prawo == 0) {
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <aktualizujRuchomyKlocek+0x2b4>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <aktualizujRuchomyKlocek+0x19e>
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <aktualizujRuchomyKlocek+0x29c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <aktualizujRuchomyKlocek+0x19e>
		obrocKlocekWPrawo();
 800129e:	f7ff fd3f 	bl	8000d20 <obrocKlocekWPrawo>
		int l_narysuj_ponownie = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
		if (czyRuchomyKlocekKoliduje()) {
 80012a6:	f7ff fc9f 	bl	8000be8 <czyRuchomyKlocekKoliduje>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <aktualizujRuchomyKlocek+0x18e>
			odwrocObrot();
 80012b0:	f7ff fe6e 	bl	8000f90 <odwrocObrot>
			l_narysuj_ponownie = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	e003      	b.n	80012c2 <aktualizujRuchomyKlocek+0x196>
		} else {
			cooldown_na_obrot_w_prawo = COOLDOWN_NA_OBROT;
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <aktualizujRuchomyKlocek+0x29c>)
 80012bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012c0:	601a      	str	r2, [r3, #0]
		}
		narysuj_ponownie |= l_narysuj_ponownie;
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (obrot_w_lewo && cooldown_na_obrot_w_lewo == 0) {
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <aktualizujRuchomyKlocek+0x2b8>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d019      	beq.n	8001306 <aktualizujRuchomyKlocek+0x1da>
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <aktualizujRuchomyKlocek+0x2a0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d115      	bne.n	8001306 <aktualizujRuchomyKlocek+0x1da>
		obrocKlocekWLewo();
 80012da:	f7ff fdbd 	bl	8000e58 <obrocKlocekWLewo>
		int l_narysuj_ponownie = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
		if (czyRuchomyKlocekKoliduje()) {
 80012e2:	f7ff fc81 	bl	8000be8 <czyRuchomyKlocekKoliduje>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <aktualizujRuchomyKlocek+0x1ca>
			odwrocObrot();
 80012ec:	f7ff fe50 	bl	8000f90 <odwrocObrot>
			l_narysuj_ponownie = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e003      	b.n	80012fe <aktualizujRuchomyKlocek+0x1d2>
		} else {
			cooldown_na_obrot_w_lewo = COOLDOWN_NA_OBROT;
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <aktualizujRuchomyKlocek+0x2a0>)
 80012f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fc:	601a      	str	r2, [r3, #0]
		}
		narysuj_ponownie |= l_narysuj_ponownie;
 80012fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4313      	orrs	r3, r2
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if (ruch_w_dol) {
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <aktualizujRuchomyKlocek+0x2bc>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <aktualizujRuchomyKlocek+0x1f2>
		czas_przesuniecia += czas_od_ostatniej_aktualizacji * MULTIPLIKATOR_RUCHU;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	00da      	lsls	r2, r3, #3
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a34      	ldr	r2, [pc, #208]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e11a      	b.n	8001554 <aktualizujRuchomyKlocek+0x428>
	} else {
		czas_przesuniecia += czas_od_ostatniej_aktualizacji;
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a31      	ldr	r2, [pc, #196]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 8001328:	6013      	str	r3, [r2, #0]
	}

	while (czas_przesuniecia >= cooldown_na_przesuniecie) {
 800132a:	e113      	b.n	8001554 <aktualizujRuchomyKlocek+0x428>
		czas_przesuniecia -= cooldown_na_przesuniecie;
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <aktualizujRuchomyKlocek+0x2c4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <aktualizujRuchomyKlocek+0x2c0>)
 8001338:	6013      	str	r3, [r2, #0]
		BIEZACY_KLOCEK()->y++;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4921      	ldr	r1, [pc, #132]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001340:	222c      	movs	r2, #44	; 0x2c
 8001342:	fb03 f202 	mul.w	r2, r3, r2
 8001346:	440a      	add	r2, r1
 8001348:	3224      	adds	r2, #36	; 0x24
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	3201      	adds	r2, #1
 800134e:	491d      	ldr	r1, [pc, #116]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001350:	202c      	movs	r0, #44	; 0x2c
 8001352:	fb00 f303 	mul.w	r3, r0, r3
 8001356:	440b      	add	r3, r1
 8001358:	3324      	adds	r3, #36	; 0x24
 800135a:	601a      	str	r2, [r3, #0]
		int l_narysuj_ponownie = 1;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
		if (czyRuchomyKlocekKoliduje()) {
 8001360:	f7ff fc42 	bl	8000be8 <czyRuchomyKlocekKoliduje>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80f0 	beq.w	800154c <aktualizujRuchomyKlocek+0x420>
			BIEZACY_KLOCEK()->y--;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4914      	ldr	r1, [pc, #80]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001372:	222c      	movs	r2, #44	; 0x2c
 8001374:	fb03 f202 	mul.w	r2, r3, r2
 8001378:	440a      	add	r2, r1
 800137a:	3224      	adds	r2, #36	; 0x24
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	3a01      	subs	r2, #1
 8001380:	4910      	ldr	r1, [pc, #64]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001382:	202c      	movs	r0, #44	; 0x2c
 8001384:	fb00 f303 	mul.w	r3, r0, r3
 8001388:	440b      	add	r3, r1
 800138a:	3324      	adds	r3, #36	; 0x24
 800138c:	601a      	str	r2, [r3, #0]
			if (BIEZACY_KLOCEK()->y <= 0) {
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <aktualizujRuchomyKlocek+0x294>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <aktualizujRuchomyKlocek+0x298>)
 8001394:	212c      	movs	r1, #44	; 0x2c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	3324      	adds	r3, #36	; 0x24
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dc05      	bgt.n	80013b0 <aktualizujRuchomyKlocek+0x284>
				gra_jest_przegrana = 1;
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <aktualizujRuchomyKlocek+0x2c8>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
				rysujNapisyGameOver();
 80013aa:	f7ff fa2d 	bl	8000808 <rysujNapisyGameOver>
				return;
 80013ae:	e0f2      	b.n	8001596 <aktualizujRuchomyKlocek+0x46a>
			}
			l_narysuj_ponownie = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
			for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e098      	b.n	80014ec <aktualizujRuchomyKlocek+0x3c0>
				for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	e086      	b.n	80014ce <aktualizujRuchomyKlocek+0x3a2>
 80013c0:	20000984 	.word	0x20000984
 80013c4:	2000092c 	.word	0x2000092c
 80013c8:	2000098c 	.word	0x2000098c
 80013cc:	20000990 	.word	0x20000990
 80013d0:	20000994 	.word	0x20000994
 80013d4:	20000998 	.word	0x20000998
 80013d8:	2000099c 	.word	0x2000099c
 80013dc:	2000099d 	.word	0x2000099d
 80013e0:	2000099f 	.word	0x2000099f
 80013e4:	200009a0 	.word	0x200009a0
 80013e8:	2000099e 	.word	0x2000099e
 80013ec:	20000988 	.word	0x20000988
 80013f0:	200001c4 	.word	0x200001c4
 80013f4:	200009a1 	.word	0x200009a1
					if (!BIEZACY_KLOCEK()->maska[iy][ix]) {
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4968      	ldr	r1, [pc, #416]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	18ca      	adds	r2, r1, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d055      	beq.n	80014c6 <aktualizujRuchomyKlocek+0x39a>
						continue;
					}
					assert(!plansza[BIEZACY_KLOCEK()->y+iy][BIEZACY_KLOCEK()->x+ix]);
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3324      	adds	r3, #36	; 0x24
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	441a      	add	r2, r3
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	495a      	ldr	r1, [pc, #360]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001436:	202c      	movs	r0, #44	; 0x2c
 8001438:	fb00 f303 	mul.w	r3, r0, r3
 800143c:	440b      	add	r3, r1
 800143e:	3320      	adds	r3, #32
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4419      	add	r1, r3
 8001446:	4857      	ldr	r0, [pc, #348]	; (80015a4 <aktualizujRuchomyKlocek+0x478>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4403      	add	r3, r0
 8001452:	440b      	add	r3, r1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <aktualizujRuchomyKlocek+0x33c>
 800145a:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <aktualizujRuchomyKlocek+0x47c>)
 800145c:	4a53      	ldr	r2, [pc, #332]	; (80015ac <aktualizujRuchomyKlocek+0x480>)
 800145e:	f240 214e 	movw	r1, #590	; 0x24e
 8001462:	4853      	ldr	r0, [pc, #332]	; (80015b0 <aktualizujRuchomyKlocek+0x484>)
 8001464:	f008 f80e 	bl	8009484 <__assert_func>
					plansza[BIEZACY_KLOCEK()->y+iy][BIEZACY_KLOCEK()->x+ix] = BIEZACY_KLOCEK()->maska[iy][ix];
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	494b      	ldr	r1, [pc, #300]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001472:	202c      	movs	r0, #44	; 0x2c
 8001474:	fb00 f303 	mul.w	r3, r0, r3
 8001478:	440b      	add	r3, r1
 800147a:	3324      	adds	r3, #36	; 0x24
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4419      	add	r1, r3
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4846      	ldr	r0, [pc, #280]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001488:	242c      	movs	r4, #44	; 0x2c
 800148a:	fb04 f303 	mul.w	r3, r4, r3
 800148e:	4403      	add	r3, r0
 8001490:	3320      	adds	r3, #32
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4418      	add	r0, r3
 8001498:	4c41      	ldr	r4, [pc, #260]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	18e2      	adds	r2, r4, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	781c      	ldrb	r4, [r3, #0]
 80014b2:	4a3c      	ldr	r2, [pc, #240]	; (80015a4 <aktualizujRuchomyKlocek+0x478>)
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	4403      	add	r3, r0
 80014c0:	4622      	mov	r2, r4
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e000      	b.n	80014c8 <aktualizujRuchomyKlocek+0x39c>
						continue;
 80014c6:	bf00      	nop
				for (int ix = 0; ix < BIEZACY_KLOCEK()->dlugosc_boku_maski; ix++) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a33      	ldr	r2, [pc, #204]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 80014d4:	212c      	movs	r1, #44	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	3328      	adds	r3, #40	; 0x28
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d888      	bhi.n	80013f8 <aktualizujRuchomyKlocek+0x2cc>
			for (int iy = 0; iy < BIEZACY_KLOCEK()->dlugosc_boku_maski; iy++) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3328      	adds	r3, #40	; 0x28
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	f63f af5a 	bhi.w	80013ba <aktualizujRuchomyKlocek+0x28e>
				}
			}
			aktualizujPlansze();
 8001506:	f7ff fd93 	bl	8001030 <aktualizujPlansze>
			losujNowyRuchomyKlocek();
 800150a:	f7ff fac7 	bl	8000a9c <losujNowyRuchomyKlocek>
			memcpy(POPRZEDNI_KLOCEK(), BIEZACY_KLOCEK(), sizeof(*BIEZACY_KLOCEK()));
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	222c      	movs	r2, #44	; 0x2c
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001520:	1898      	adds	r0, r3, r2
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	222c      	movs	r2, #44	; 0x2c
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 800152e:	4413      	add	r3, r2
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	4619      	mov	r1, r3
 8001534:	f008 f9c3 	bl	80098be <memcpy>
			rysujKlocek(BIEZACY_KLOCEK());
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	222c      	movs	r2, #44	; 0x2c
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 8001544:	4413      	add	r3, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f9be 	bl	80008c8 <rysujKlocek>
		}
		narysuj_ponownie |= l_narysuj_ponownie;
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	while (czas_przesuniecia >= cooldown_na_przesuniecie) {
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <aktualizujRuchomyKlocek+0x488>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <aktualizujRuchomyKlocek+0x48c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	f6bf aee5 	bge.w	800132c <aktualizujRuchomyKlocek+0x200>
	}

	if (narysuj_ponownie) {
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d016      	beq.n	8001596 <aktualizujRuchomyKlocek+0x46a>
		czyscKlocek(POPRZEDNI_KLOCEK());
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	222c      	movs	r2, #44	; 0x2c
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 800157a:	4413      	add	r3, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f9fd 	bl	800097c <czyscKlocek>
		rysujKlocek(BIEZACY_KLOCEK());
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <aktualizujRuchomyKlocek+0x470>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	222c      	movs	r2, #44	; 0x2c
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <aktualizujRuchomyKlocek+0x474>)
 800158e:	4413      	add	r3, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff f999 	bl	80008c8 <rysujKlocek>
	}
}
 8001596:	372c      	adds	r7, #44	; 0x2c
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20000984 	.word	0x20000984
 80015a0:	2000092c 	.word	0x2000092c
 80015a4:	20000864 	.word	0x20000864
 80015a8:	0800a504 	.word	0x0800a504
 80015ac:	0800a554 	.word	0x0800a554
 80015b0:	0800a4e8 	.word	0x0800a4e8
 80015b4:	20000988 	.word	0x20000988
 80015b8:	200001c4 	.word	0x200001c4

080015bc <inicjujRNG>:

static void inicjujRNG(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint32_t seed;
	HAL_RNG_GenerateRandomNumber(&hrng, &seed);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <inicjujRNG+0x20>)
 80015c8:	f005 fe3c 	bl	8007244 <HAL_RNG_GenerateRandomNumber>
	srand(seed);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 ff76 	bl	80094c0 <srand>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000760 	.word	0x20000760

080015e0 <losujLiczbeNieujemna>:

static int losujLiczbeNieujemna(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	return rand();
 80015e4:	f007 ff9a 	bl	800951c <rand>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}

080015ee <liczbaMilisekundOdStartuProgramu>:

static int liczbaMilisekundOdStartuProgramu() {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80015f2:	f002 fe53 	bl	800429c <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}

080015fc <czekaj>:

static void czekaj(int ile_milisekund) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	HAL_Delay(ile_milisekund);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fe54 	bl	80042b4 <HAL_Delay>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b09b      	sub	sp, #108	; 0x6c
 8001618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f002 fdd9 	bl	80041d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f9e7 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 fd59 	bl	80020d8 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8001626:	f000 fafd 	bl	8001c24 <MX_DMA2D_Init>
  MX_FMC_Init();
 800162a:	f000 fd07 	bl	800203c <MX_FMC_Init>
  MX_I2C3_Init();
 800162e:	f000 fb2b 	bl	8001c88 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001632:	f000 fb69 	bl	8001d08 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001636:	f000 fc53 	bl	8001ee0 <MX_SPI5_Init>
  MX_ADC1_Init();
 800163a:	f000 fa4b 	bl	8001ad4 <MX_ADC1_Init>
  MX_RNG_Init();
 800163e:	f000 fc15 	bl	8001e6c <MX_RNG_Init>
  MX_RTC_Init();
 8001642:	f000 fc27 	bl	8001e94 <MX_RTC_Init>
  MX_ADC2_Init();
 8001646:	f000 fa99 	bl	8001b7c <MX_ADC2_Init>
  MX_TIM3_Init();
 800164a:	f000 fc7f 	bl	8001f4c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	HAL_TIM_Base_Start_IT(&htim3);
 800164e:	48ae      	ldr	r0, [pc, #696]	; (8001908 <main+0x2f4>)
 8001650:	f006 fe08 	bl	8008264 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	48ac      	ldr	r0, [pc, #688]	; (8001908 <main+0x2f4>)
 8001658:	f006 fece 	bl	80083f8 <HAL_TIM_PWM_Start>
  	__HAL_TIM_SET_AUTORELOAD(&htim3, 1);
 800165c:	4baa      	ldr	r3, [pc, #680]	; (8001908 <main+0x2f4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
 8001664:	4ba8      	ldr	r3, [pc, #672]	; (8001908 <main+0x2f4>)
 8001666:	2201      	movs	r2, #1
 8001668:	60da      	str	r2, [r3, #12]

	BSP_LCD_Init();
 800166a:	f001 fed3 	bl	8003414 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 800166e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001672:	2000      	movs	r0, #0
 8001674:	f001 ff50 	bl	8003518 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001678:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800167c:	f001 ffc8 	bl	8003610 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f001 ffac 	bl	80035e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8001688:	48a0      	ldr	r0, [pc, #640]	; (800190c <main+0x2f8>)
 800168a:	f001 ffdb 	bl	8003644 <BSP_LCD_SetFont>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800168e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001692:	f002 f807 	bl	80036a4 <BSP_LCD_Clear>

	int licznik_klatek_w_sekundzie = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	65fb      	str	r3, [r7, #92]	; 0x5c
	int moment_poprzedniej_aktualizacji = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	65bb      	str	r3, [r7, #88]	; 0x58
	int moment_poprzedniej_sekundy = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	657b      	str	r3, [r7, #84]	; 0x54
	int reszta_czasu_s16 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50

	inicjujRNG();
 80016a6:	f7ff ff89 	bl	80015bc <inicjujRNG>
	losujNowyRuchomyKlocek();
 80016aa:	f7ff f9f7 	bl	8000a9c <losujNowyRuchomyKlocek>
	czekaj(500);
 80016ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b2:	f7ff ffa3 	bl	80015fc <czekaj>
	rysujLicznikFPS(00);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff f822 	bl	8000700 <rysujLicznikFPS>
	rysujLicznikPunktow();
 80016bc:	f7ff f856 	bl	800076c <rysujLicznikPunktow>
	rysujLiniePionowa(160, 0, 320, J_SZARY);
 80016c0:	2307      	movs	r3, #7
 80016c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016c6:	2100      	movs	r1, #0
 80016c8:	20a0      	movs	r0, #160	; 0xa0
 80016ca:	f7fe ff67 	bl	800059c <rysujLiniePionowa>

	for (int i = 0; i < 10; i++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016d2:	e025      	b.n	8001720 <main+0x10c>
		int ii = (1 << (i>>1)) ^ (i & 1);
 80016d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d6:	105b      	asrs	r3, r3, #1
 80016d8:	2201      	movs	r2, #1
 80016da:	409a      	lsls	r2, r3
 80016dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	4053      	eors	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
		wypelnijProstokat(64+4 + ii, 168 + ii, 320-64-8-ii*2, 80-14-ii*2, (i & 1) == 0 ? J_SZARY : C_SZARY);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1c3 037c 	rsb	r3, r3, #124	; 0x7c
 80016f8:	005a      	lsls	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 8001700:	005c      	lsls	r4, r3, #1
 8001702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <main+0xfc>
 800170c:	2307      	movs	r3, #7
 800170e:	e000      	b.n	8001712 <main+0xfe>
 8001710:	230f      	movs	r3, #15
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7fe ff5f 	bl	80005d8 <wypelnijProstokat>
	for (int i = 0; i < 10; i++) {
 800171a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171c:	3301      	adds	r3, #1
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001722:	2b09      	cmp	r3, #9
 8001724:	ddd6      	ble.n	80016d4 <main+0xc0>
	}

	moment_poprzedniej_aktualizacji = liczbaMilisekundOdStartuProgramu();
 8001726:	f7ff ff62 	bl	80015ee <liczbaMilisekundOdStartuProgramu>
 800172a:	65b8      	str	r0, [r7, #88]	; 0x58
	moment_poprzedniej_sekundy = moment_poprzedniej_aktualizacji;
 800172c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800172e:	657b      	str	r3, [r7, #84]	; 0x54

	int ostatni_moment_zmiany_stanu_muzyki = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t analogowe_pomiary[2];

	while (1) {
		int poczatek_obliczen_w_obecnej_klatce = liczbaMilisekundOdStartuProgramu();
 8001734:	f7ff ff5b 	bl	80015ee <liczbaMilisekundOdStartuProgramu>
 8001738:	6438      	str	r0, [r7, #64]	; 0x40

		// odczyt sterowania
		HAL_ADC_Start(&hadc1);
 800173a:	4875      	ldr	r0, [pc, #468]	; (8001910 <main+0x2fc>)
 800173c:	f002 fe22 	bl	8004384 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8001740:	4874      	ldr	r0, [pc, #464]	; (8001914 <main+0x300>)
 8001742:	f002 fe1f 	bl	8004384 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001746:	f04f 31ff 	mov.w	r1, #4294967295
 800174a:	4871      	ldr	r0, [pc, #452]	; (8001910 <main+0x2fc>)
 800174c:	f002 ff1f 	bl	800458e <HAL_ADC_PollForConversion>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	486f      	ldr	r0, [pc, #444]	; (8001914 <main+0x300>)
 8001756:	f002 ff1a 	bl	800458e <HAL_ADC_PollForConversion>
		analogowe_pomiary[0] = 3 * HAL_ADC_GetValue(&hadc1);
 800175a:	486d      	ldr	r0, [pc, #436]	; (8001910 <main+0x2fc>)
 800175c:	f002 ffa2 	bl	80046a4 <HAL_ADC_GetValue>
 8001760:	4602      	mov	r2, r0
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	607b      	str	r3, [r7, #4]
		analogowe_pomiary[1] = 3 * HAL_ADC_GetValue(&hadc2);
 800176a:	486a      	ldr	r0, [pc, #424]	; (8001914 <main+0x300>)
 800176c:	f002 ff9a 	bl	80046a4 <HAL_ADC_GetValue>
 8001770:	4602      	mov	r2, r0
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]
		HAL_ADC_Stop(&hadc1);
 800177a:	4865      	ldr	r0, [pc, #404]	; (8001910 <main+0x2fc>)
 800177c:	f002 fed4 	bl	8004528 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 8001780:	4864      	ldr	r0, [pc, #400]	; (8001914 <main+0x300>)
 8001782:	f002 fed1 	bl	8004528 <HAL_ADC_Stop>

		if (analogowe_pomiary[0] < 3 || (analogowe_pomiary[0] < 30 && analogowe_pomiary[0] < analogowe_pomiary[1] / 50)) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d90a      	bls.n	80017a2 <main+0x18e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b1d      	cmp	r3, #29
 8001790:	d80b      	bhi.n	80017aa <main+0x196>
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4960      	ldr	r1, [pc, #384]	; (8001918 <main+0x304>)
 8001798:	fba1 1303 	umull	r1, r3, r1, r3
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	429a      	cmp	r2, r3
 80017a0:	d203      	bcs.n	80017aa <main+0x196>
			ruch_w_lewo = 1;
 80017a2:	4b5e      	ldr	r3, [pc, #376]	; (800191c <main+0x308>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e002      	b.n	80017b0 <main+0x19c>
		} else {
			ruch_w_lewo = 0;
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <main+0x308>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
		}

		if (analogowe_pomiary[0] > 500) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b6:	d903      	bls.n	80017c0 <main+0x1ac>
			ruch_w_prawo = 1;
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <main+0x30c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e002      	b.n	80017c6 <main+0x1b2>
		} else {
			ruch_w_prawo = 0;
 80017c0:	4b57      	ldr	r3, [pc, #348]	; (8001920 <main+0x30c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		}

		if (analogowe_pomiary[1] > 500) {
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017cc:	d903      	bls.n	80017d6 <main+0x1c2>
			ruch_w_dol = 1;
 80017ce:	4b55      	ldr	r3, [pc, #340]	; (8001924 <main+0x310>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e002      	b.n	80017dc <main+0x1c8>
		} else {
			ruch_w_dol = 0;
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <main+0x310>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET &&
 80017dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e0:	4851      	ldr	r0, [pc, #324]	; (8001928 <main+0x314>)
 80017e2:	f004 f9af 	bl	8005b44 <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d111      	bne.n	8001810 <main+0x1fc>
			poczatek_obliczen_w_obecnej_klatce - ostatni_moment_zmiany_stanu_muzyki >= 500) {
 80017ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80017ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f0:	1ad3      	subs	r3, r2, r3
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET &&
 80017f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017f6:	db0b      	blt.n	8001810 <main+0x1fc>
			muzyka_wlaczona = !muzyka_wlaczona;
 80017f8:	4b4c      	ldr	r3, [pc, #304]	; (800192c <main+0x318>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <main+0x318>)
 800180a:	701a      	strb	r2, [r3, #0]
			ostatni_moment_zmiany_stanu_muzyki = poczatek_obliczen_w_obecnej_klatce;
 800180c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	4844      	ldr	r0, [pc, #272]	; (8001928 <main+0x314>)
 8001816:	f004 f995 	bl	8005b44 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	2b01      	cmp	r3, #1
 800181e:	d103      	bne.n	8001828 <main+0x214>
			obrot_w_lewo = 1;
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <main+0x31c>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e002      	b.n	800182e <main+0x21a>
		} else {
			obrot_w_lewo = 0;
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <main+0x31c>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET) {
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	483d      	ldr	r0, [pc, #244]	; (8001928 <main+0x314>)
 8001834:	f004 f986 	bl	8005b44 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d103      	bne.n	8001846 <main+0x232>
			obrot_w_prawo = 1;
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <main+0x320>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e002      	b.n	800184c <main+0x238>
		} else {
			obrot_w_prawo = 0;
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <main+0x320>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
		}

		// aktualizacje rzadkie
		int moment_obecnej_aktualizacji = liczbaMilisekundOdStartuProgramu();
 800184c:	f7ff fecf 	bl	80015ee <liczbaMilisekundOdStartuProgramu>
 8001850:	63f8      	str	r0, [r7, #60]	; 0x3c
		int czas_od_ostatniej_aktualizacji = moment_obecnej_aktualizacji - moment_poprzedniej_aktualizacji;
 8001852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
		if (moment_obecnej_aktualizacji / INTERWAL_AKTUALIZACJI_RZADKICH > moment_poprzedniej_aktualizacji / INTERWAL_AKTUALIZACJI_RZADKICH) {
 800185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185c:	4a36      	ldr	r2, [pc, #216]	; (8001938 <main+0x324>)
 800185e:	fb82 1203 	smull	r1, r2, r2, r3
 8001862:	1192      	asrs	r2, r2, #6
 8001864:	17db      	asrs	r3, r3, #31
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800186a:	4933      	ldr	r1, [pc, #204]	; (8001938 <main+0x324>)
 800186c:	fb81 0103 	smull	r0, r1, r1, r3
 8001870:	1189      	asrs	r1, r1, #6
 8001872:	17db      	asrs	r3, r3, #31
 8001874:	1acb      	subs	r3, r1, r3
 8001876:	429a      	cmp	r2, r3
 8001878:	f340 8088 	ble.w	800198c <main+0x378>
			cooldown_na_przesuniecie -= 2;
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <main+0x328>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3b02      	subs	r3, #2
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <main+0x328>)
 8001884:	6013      	str	r3, [r2, #0]
			int moment_obecnej_sekundy = moment_obecnej_aktualizacji;
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
			int czas_poprzedniej_sekundy = moment_obecnej_sekundy - moment_poprzedniej_sekundy;
 800188a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
			int l_licznik_klatek_w_sekundzie = (licznik_klatek_w_sekundzie * INTERWAL_AKTUALIZACJI_RZADKICH + INTERWAL_AKTUALIZACJI_RZADKICH/2) / czas_poprzedniej_sekundy;
 8001892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80018a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			rysujLicznikFPS(l_licznik_klatek_w_sekundzie);
 80018a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018aa:	f7fe ff29 	bl	8000700 <rysujLicznikFPS>
			rysujPozycjeGalek(analogowe_pomiary);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe ff79 	bl	80007a8 <rysujPozycjeGalek>
			rysujPlansze(LICZBA_LINII_TEKSTU);
 80018b6:	2004      	movs	r0, #4
 80018b8:	f7ff f8b2 	bl	8000a20 <rysujPlansze>
			rysujKlocek(BIEZACY_KLOCEK());
 80018bc:	4b20      	ldr	r3, [pc, #128]	; (8001940 <main+0x32c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	222c      	movs	r2, #44	; 0x2c
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <main+0x330>)
 80018c8:	4413      	add	r3, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fffc 	bl	80008c8 <rysujKlocek>
			rysujLiniePionowa(160, 0, 320, J_SZARY);
 80018d0:	2307      	movs	r3, #7
 80018d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018d6:	2100      	movs	r1, #0
 80018d8:	20a0      	movs	r0, #160	; 0xa0
 80018da:	f7fe fe5f 	bl	800059c <rysujLiniePionowa>
			licznik_klatek_w_sekundzie = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	65fb      	str	r3, [r7, #92]	; 0x5c
			moment_poprzedniej_sekundy = moment_obecnej_sekundy;
 80018e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
			if (gra_jest_przegrana) {
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <main+0x334>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04e      	beq.n	800198c <main+0x378>
				char * ruchomy_napis = napisy_game_over[1];
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <main+0x338>)
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
				int n = strlen(ruchomy_napis) - 2;
 80018f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018f4:	f7fe fc7c 	bl	80001f0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	3b02      	subs	r3, #2
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = n-1; i >= 0; i--) {
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3b01      	subs	r3, #1
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	e03d      	b.n	8001982 <main+0x36e>
 8001906:	bf00      	nop
 8001908:	200007e8 	.word	0x200007e8
 800190c:	20000508 	.word	0x20000508
 8001910:	20000594 	.word	0x20000594
 8001914:	200005dc 	.word	0x200005dc
 8001918:	51eb851f 	.word	0x51eb851f
 800191c:	2000099d 	.word	0x2000099d
 8001920:	2000099c 	.word	0x2000099c
 8001924:	2000099e 	.word	0x2000099e
 8001928:	40020c00 	.word	0x40020c00
 800192c:	200001c8 	.word	0x200001c8
 8001930:	200009a0 	.word	0x200009a0
 8001934:	2000099f 	.word	0x2000099f
 8001938:	10624dd3 	.word	0x10624dd3
 800193c:	200001c4 	.word	0x200001c4
 8001940:	20000984 	.word	0x20000984
 8001944:	2000092c 	.word	0x2000092c
 8001948:	200009a1 	.word	0x200009a1
 800194c:	20000078 	.word	0x20000078
					ruchomy_napis[1 + i] = ruchomy_napis[1 + (i+n-1)%n];
 8001950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	4413      	add	r3, r2
 8001956:	3b01      	subs	r3, #1
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	fb93 f2f2 	sdiv	r2, r3, r2
 800195e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001960:	fb01 f202 	mul.w	r2, r1, r2
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	3301      	adds	r3, #1
 8001968:	461a      	mov	r2, r3
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	441a      	add	r2, r3
 800196e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001970:	3301      	adds	r3, #1
 8001972:	4619      	mov	r1, r3
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	440b      	add	r3, r1
 8001978:	7812      	ldrb	r2, [r2, #0]
 800197a:	701a      	strb	r2, [r3, #0]
				for (int i = n-1; i >= 0; i--) {
 800197c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197e:	3b01      	subs	r3, #1
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
 8001982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001984:	2b00      	cmp	r3, #0
 8001986:	dae3      	bge.n	8001950 <main+0x33c>
				}
				rysujNapisyGameOver();
 8001988:	f7fe ff3e 	bl	8000808 <rysujNapisyGameOver>
			}
		}
		licznik_klatek_w_sekundzie++;
 800198c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198e:	3301      	adds	r3, #1
 8001990:	65fb      	str	r3, [r7, #92]	; 0x5c
		moment_poprzedniej_aktualizacji = moment_obecnej_aktualizacji;
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	65bb      	str	r3, [r7, #88]	; 0x58

		// aktualizuj i ewentualnie renderuj potrzebne elementy
		if (!gra_jest_przegrana) {
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <main+0x3d4>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <main+0x390>
			aktualizujRuchomyKlocek(czas_od_ostatniej_aktualizacji);
 800199e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019a0:	f7ff fbc4 	bl	800112c <aktualizujRuchomyKlocek>
		}

		// kontrola klatkazu
		int koniec_obliczen_w_obecnej_klatce = liczbaMilisekundOdStartuProgramu();
 80019a4:	f7ff fe23 	bl	80015ee <liczbaMilisekundOdStartuProgramu>
 80019a8:	6238      	str	r0, [r7, #32]
		int idealny_czas_klatki_s16 = (1000 << 16) / CEL_KLATKAZU;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <main+0x3d8>)
 80019ac:	61fb      	str	r3, [r7, #28]
		int czas_obliczen_w_obecnej_klatce_s16 = (koniec_obliczen_w_obecnej_klatce - poczatek_obliczen_w_obecnej_klatce) << 16;
 80019ae:	6a3a      	ldr	r2, [r7, #32]
 80019b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	61bb      	str	r3, [r7, #24]
		int czas_bezczynnosci_s16 = idealny_czas_klatki_s16 + reszta_czasu_s16 - czas_obliczen_w_obecnej_klatce_s16;
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019bc:	441a      	add	r2, r3
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
		if (czas_bezczynnosci_s16 > 0) {
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dd0b      	ble.n	80019e2 <main+0x3ce>
			int czas_bezczynnosci = czas_bezczynnosci_s16 >> 16;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	141b      	asrs	r3, r3, #16
 80019ce:	613b      	str	r3, [r7, #16]
			czekaj(czas_bezczynnosci);
 80019d0:	6938      	ldr	r0, [r7, #16]
 80019d2:	f7ff fe13 	bl	80015fc <czekaj>
			reszta_czasu_s16 = czas_bezczynnosci_s16 - (czas_bezczynnosci << 16);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
 80019e0:	e6a8      	b.n	8001734 <main+0x120>
		} else {
			reszta_czasu_s16 = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
	while (1) {
 80019e6:	e6a5      	b.n	8001734 <main+0x120>
 80019e8:	200009a1 	.word	0x200009a1
 80019ec:	00215555 	.word	0x00215555

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 fee1 	bl	80097c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <SystemClock_Config+0xdc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a2b      	ldr	r2, [pc, #172]	; (8001acc <SystemClock_Config+0xdc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <SystemClock_Config+0xdc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <SystemClock_Config+0xe0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2309      	movs	r3, #9
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a56:	2301      	movs	r3, #1
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a64:	2310      	movs	r3, #16
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a68:	23b4      	movs	r3, #180	; 0xb4
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a70:	2308      	movs	r3, #8
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 fd75 	bl	8006568 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a84:	f000 fbd0 	bl	8002228 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a88:	f004 fd1e 	bl	80064c8 <HAL_PWREx_EnableOverDrive>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a92:	f000 fbc9 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 ffcf 	bl	8006a58 <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ac0:	f000 fbb2 	bl	8002228 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3750      	adds	r7, #80	; 0x50
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <MX_ADC1_Init+0xa0>)
 8001aea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001aee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <MX_ADC1_Init+0xa4>)
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b38:	f002 fbe0 	bl	80042fc <HAL_ADC_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001b42:	f000 fb71 	bl	8002228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_ADC1_Init+0x9c>)
 8001b58:	f002 fdb2 	bl	80046c0 <HAL_ADC_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b62:	f000 fb61 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000594 	.word	0x20000594
 8001b74:	40012000 	.word	0x40012000
 8001b78:	0f000001 	.word	0x0f000001

08001b7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <MX_ADC2_Init+0xa0>)
 8001b92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <MX_ADC2_Init+0xa4>)
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001bde:	480e      	ldr	r0, [pc, #56]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001be0:	f002 fb8c 	bl	80042fc <HAL_ADC_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001bea:	f000 fb1d 	bl	8002228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <MX_ADC2_Init+0x9c>)
 8001c00:	f002 fd5e 	bl	80046c0 <HAL_ADC_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001c0a:	f000 fb0d 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200005dc 	.word	0x200005dc
 8001c1c:	40012100 	.word	0x40012100
 8001c20:	0f000001 	.word	0x0f000001

08001c24 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <MX_DMA2D_Init+0x60>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c48:	2202      	movs	r2, #2
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c5a:	f003 fa2f 	bl	80050bc <HAL_DMA2D_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c64:	f000 fae0 	bl	8002228 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_DMA2D_Init+0x5c>)
 8001c6c:	f003 fb84 	bl	8005378 <HAL_DMA2D_ConfigLayer>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c76:	f000 fad7 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000624 	.word	0x20000624
 8001c84:	4002b000 	.word	0x4002b000

08001c88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <MX_I2C3_Init+0x78>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <MX_I2C3_Init+0x7c>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cc6:	f003 ff6f 	bl	8005ba8 <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 faaa 	bl	8002228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cd8:	f004 f8aa 	bl	8005e30 <HAL_I2CEx_ConfigAnalogFilter>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001ce2:	f000 faa1 	bl	8002228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_I2C3_Init+0x74>)
 8001cea:	f004 f8dd 	bl	8005ea8 <HAL_I2CEx_ConfigDigitalFilter>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001cf4:	f000 fa98 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000664 	.word	0x20000664
 8001d00:	40005c00 	.word	0x40005c00
 8001d04:	000186a0 	.word	0x000186a0

08001d08 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09a      	sub	sp, #104	; 0x68
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001d0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d12:	2234      	movs	r2, #52	; 0x34
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f007 fd55 	bl	80097c6 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2234      	movs	r2, #52	; 0x34
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f007 fd4f 	bl	80097c6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001d28:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d2a:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <MX_LTDC_Init+0x160>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d4e:	2203      	movs	r2, #3
 8001d50:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d54:	220e      	movs	r2, #14
 8001d56:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d5a:	2205      	movs	r2, #5
 8001d5c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 254;
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d60:	22fe      	movs	r2, #254	; 0xfe
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 325;
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d66:	f240 1245 	movw	r2, #325	; 0x145
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 260;
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d6e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001d74:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d76:	f240 1247 	movw	r2, #327	; 0x147
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d7c:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d94:	4833      	ldr	r0, [pc, #204]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001d96:	f004 f8c7 	bl	8005f28 <HAL_LTDC_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_LTDC_Init+0x9c>
  {
    Error_Handler();
 8001da0:	f000 fa42 	bl	8002228 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001db4:	2300      	movs	r3, #0
 8001db6:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	481c      	ldr	r0, [pc, #112]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001df2:	f004 f969 	bl	80060c8 <HAL_LTDC_ConfigLayer>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001dfc:	f000 fa14 	bl	8002228 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e20:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001e22:	2305      	movs	r3, #5
 8001e24:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_LTDC_Init+0x15c>)
 8001e4c:	f004 f93c 	bl	80060c8 <HAL_LTDC_ConfigLayer>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_LTDC_Init+0x152>
  {
    Error_Handler();
 8001e56:	f000 f9e7 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3768      	adds	r7, #104	; 0x68
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200006b8 	.word	0x200006b8
 8001e68:	40016800 	.word	0x40016800

08001e6c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_RNG_Init+0x20>)
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <MX_RNG_Init+0x24>)
 8001e74:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_RNG_Init+0x20>)
 8001e78:	f005 f9ba 	bl	80071f0 <HAL_RNG_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e82:	f000 f9d1 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000760 	.word	0x20000760
 8001e90:	50060800 	.word	0x50060800

08001e94 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001e9a:	4a10      	ldr	r2, [pc, #64]	; (8001edc <MX_RTC_Init+0x48>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ea6:	227f      	movs	r2, #127	; 0x7f
 8001ea8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eac:	22ff      	movs	r2, #255	; 0xff
 8001eae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_RTC_Init+0x44>)
 8001ec4:	f005 fa14 	bl	80072f0 <HAL_RTC_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001ece:	f000 f9ab 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000770 	.word	0x20000770
 8001edc:	40002800 	.word	0x40002800

08001ee0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	; (8001f48 <MX_SPI5_Init+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f10:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_SPI5_Init+0x64>)
 8001f32:	f005 fb68 	bl	8007606 <HAL_SPI_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001f3c:	f000 f974 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000790 	.word	0x20000790
 8001f48:	40015000 	.word	0x40015000

08001f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <MX_TIM3_Init+0xec>)
 8001f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2224;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f84:	f44f 620b 	mov.w	r2, #2224	; 0x8b0
 8001f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fa4:	4823      	ldr	r0, [pc, #140]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fa6:	f006 f90d 	bl	80081c4 <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fb0:	f000 f93a 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481c      	ldr	r0, [pc, #112]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fc2:	f006 fcab 	bl	800891c <HAL_TIM_ConfigClockSource>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fcc:	f000 f92c 	bl	8002228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fd2:	f006 f9b7 	bl	8008344 <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fdc:	f000 f924 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4619      	mov	r1, r3
 8001fee:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001ff0:	f007 f89e 	bl	8009130 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ffa:	f000 f915 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffe:	2360      	movs	r3, #96	; 0x60
 8002000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8002002:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002008:	2302      	movs	r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_TIM3_Init+0xe8>)
 8002018:	f006 fbbe 	bl	8008798 <HAL_TIM_PWM_ConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002022:	f000 f901 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002026:	4803      	ldr	r0, [pc, #12]	; (8002034 <MX_TIM3_Init+0xe8>)
 8002028:	f000 fc2e 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800202c:	bf00      	nop
 800202e:	3738      	adds	r7, #56	; 0x38
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200007e8 	.word	0x200007e8
 8002038:	40000400 	.word	0x40000400

0800203c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_FMC_Init+0x94>)
 8002056:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <MX_FMC_Init+0x98>)
 8002058:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <MX_FMC_Init+0x94>)
 800205c:	2201      	movs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_FMC_Init+0x94>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_FMC_Init+0x94>)
 8002068:	2204      	movs	r2, #4
 800206a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_FMC_Init+0x94>)
 800206e:	2210      	movs	r2, #16
 8002070:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_FMC_Init+0x94>)
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_FMC_Init+0x94>)
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_FMC_Init+0x94>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_FMC_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_FMC_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_FMC_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002096:	2310      	movs	r3, #16
 8002098:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800209a:	2310      	movs	r3, #16
 800209c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800209e:	2310      	movs	r3, #16
 80020a0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80020a2:	2310      	movs	r3, #16
 80020a4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80020a6:	2310      	movs	r3, #16
 80020a8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80020aa:	2310      	movs	r3, #16
 80020ac:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80020ae:	2310      	movs	r3, #16
 80020b0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <MX_FMC_Init+0x94>)
 80020b8:	f005 fa14 	bl	80074e4 <HAL_SDRAM_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80020c2:	f000 f8b1 	bl	8002228 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000830 	.word	0x20000830
 80020d4:	a0000140 	.word	0xa0000140

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <MX_GPIO_Init+0x144>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a49      	ldr	r2, [pc, #292]	; (800221c <MX_GPIO_Init+0x144>)
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <MX_GPIO_Init+0x144>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <MX_GPIO_Init+0x144>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a42      	ldr	r2, [pc, #264]	; (800221c <MX_GPIO_Init+0x144>)
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <MX_GPIO_Init+0x144>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <MX_GPIO_Init+0x144>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a3b      	ldr	r2, [pc, #236]	; (800221c <MX_GPIO_Init+0x144>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <MX_GPIO_Init+0x144>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	4b35      	ldr	r3, [pc, #212]	; (800221c <MX_GPIO_Init+0x144>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a34      	ldr	r2, [pc, #208]	; (800221c <MX_GPIO_Init+0x144>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <MX_GPIO_Init+0x144>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <MX_GPIO_Init+0x144>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <MX_GPIO_Init+0x144>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <MX_GPIO_Init+0x144>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b27      	ldr	r3, [pc, #156]	; (800221c <MX_GPIO_Init+0x144>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <MX_GPIO_Init+0x144>)
 8002184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <MX_GPIO_Init+0x144>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <MX_GPIO_Init+0x144>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <MX_GPIO_Init+0x144>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_GPIO_Init+0x144>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <MX_GPIO_Init+0x144>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <MX_GPIO_Init+0x144>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_GPIO_Init+0x144>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80021d4:	4812      	ldr	r0, [pc, #72]	; (8002220 <MX_GPIO_Init+0x148>)
 80021d6:	f003 fccd 	bl	8005b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80021da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	480d      	ldr	r0, [pc, #52]	; (8002224 <MX_GPIO_Init+0x14c>)
 80021f0:	f003 f9f0 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80021f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <MX_GPIO_Init+0x148>)
 800220e:	f003 f9e1 	bl	80055d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002212:	bf00      	nop
 8002214:	3738      	adds	r7, #56	; 0x38
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40021800 	.word	0x40021800
 8002224:	40020c00 	.word	0x40020c00

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_MspInit+0x4c>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_MspInit+0x4c>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2e      	ldr	r2, [pc, #184]	; (800235c <HAL_ADC_MspInit+0xd8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d128      	bne.n	80022f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022de:	2302      	movs	r3, #2
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e2:	2303      	movs	r3, #3
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	481c      	ldr	r0, [pc, #112]	; (8002364 <HAL_ADC_MspInit+0xe0>)
 80022f2:	f003 f96f 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022f6:	e02c      	b.n	8002352 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_ADC_MspInit+0xe4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d127      	bne.n	8002352 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 800230c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_ADC_MspInit+0xdc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800233a:	2304      	movs	r3, #4
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_ADC_MspInit+0xe0>)
 800234e:	f003 f941 	bl	80055d4 <HAL_GPIO_Init>
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40012000 	.word	0x40012000
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000
 8002368:	40012100 	.word	0x40012100

0800236c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_DMA2D_MspInit+0x3c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10d      	bne.n	800239a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_DMA2D_MspInit+0x40>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	4002b000 	.word	0x4002b000
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <HAL_I2C_MspInit+0xc4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d14b      	bne.n	800246a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800240a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002410:	2312      	movs	r3, #18
 8002412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800241c:	2304      	movs	r3, #4
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4815      	ldr	r0, [pc, #84]	; (800247c <HAL_I2C_MspInit+0xcc>)
 8002428:	f003 f8d4 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800242c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002432:	2312      	movs	r3, #18
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800243e:	2304      	movs	r3, #4
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <HAL_I2C_MspInit+0xd0>)
 800244a:	f003 f8c3 	bl	80055d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 8002458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_I2C_MspInit+0xc8>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40005c00 	.word	0x40005c00
 8002478:	40023800 	.word	0x40023800
 800247c:	40020800 	.word	0x40020800
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b09a      	sub	sp, #104	; 0x68
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	2230      	movs	r2, #48	; 0x30
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f007 f98e 	bl	80097c6 <memset>
  if(hltdc->Instance==LTDC)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a81      	ldr	r2, [pc, #516]	; (80026b4 <HAL_LTDC_MspInit+0x230>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f040 80fa 	bne.w	80026aa <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024b6:	2308      	movs	r3, #8
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80024ba:	2331      	movs	r3, #49	; 0x31
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 80024be:	2302      	movs	r3, #2
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024c2:	2300      	movs	r3, #0
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fcd0 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80024d6:	f7ff fea7 	bl	8002228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a75      	ldr	r2, [pc, #468]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 80024e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002500:	f043 0320 	orr.w	r3, r3, #32
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	4b68      	ldr	r3, [pc, #416]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a59      	ldr	r2, [pc, #356]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b4c      	ldr	r3, [pc, #304]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_LTDC_MspInit+0x234>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800259e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025b0:	230e      	movs	r3, #14
 80025b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b8:	4619      	mov	r1, r3
 80025ba:	4840      	ldr	r0, [pc, #256]	; (80026bc <HAL_LTDC_MspInit+0x238>)
 80025bc:	f003 f80a 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 80025c0:	f641 0358 	movw	r3, #6232	; 0x1858
 80025c4:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025d2:	230e      	movs	r3, #14
 80025d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025da:	4619      	mov	r1, r3
 80025dc:	4838      	ldr	r0, [pc, #224]	; (80026c0 <HAL_LTDC_MspInit+0x23c>)
 80025de:	f002 fff9 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e2:	2303      	movs	r3, #3
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025f2:	2309      	movs	r3, #9
 80025f4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025fa:	4619      	mov	r1, r3
 80025fc:	4831      	ldr	r0, [pc, #196]	; (80026c4 <HAL_LTDC_MspInit+0x240>)
 80025fe:	f002 ffe9 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002602:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002606:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002614:	230e      	movs	r3, #14
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800261c:	4619      	mov	r1, r3
 800261e:	4829      	ldr	r0, [pc, #164]	; (80026c4 <HAL_LTDC_MspInit+0x240>)
 8002620:	f002 ffd8 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002624:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002628:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002636:	230e      	movs	r3, #14
 8002638:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800263a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800263e:	4619      	mov	r1, r3
 8002640:	4821      	ldr	r0, [pc, #132]	; (80026c8 <HAL_LTDC_MspInit+0x244>)
 8002642:	f002 ffc7 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8002646:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800264a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002658:	230e      	movs	r3, #14
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002660:	4619      	mov	r1, r3
 8002662:	481a      	ldr	r0, [pc, #104]	; (80026cc <HAL_LTDC_MspInit+0x248>)
 8002664:	f002 ffb6 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8002668:	2348      	movs	r3, #72	; 0x48
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002678:	230e      	movs	r3, #14
 800267a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800267c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002680:	4619      	mov	r1, r3
 8002682:	4813      	ldr	r0, [pc, #76]	; (80026d0 <HAL_LTDC_MspInit+0x24c>)
 8002684:	f002 ffa6 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800268c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800269a:	2309      	movs	r3, #9
 800269c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a2:	4619      	mov	r1, r3
 80026a4:	4808      	ldr	r0, [pc, #32]	; (80026c8 <HAL_LTDC_MspInit+0x244>)
 80026a6:	f002 ff95 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3768      	adds	r7, #104	; 0x68
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40016800 	.word	0x40016800
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40021800 	.word	0x40021800
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00

080026d4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <HAL_RNG_MspInit+0x3c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10d      	bne.n	8002702 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RNG_MspInit+0x40>)
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RNG_MspInit+0x40>)
 80026f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f4:	6353      	str	r3, [r2, #52]	; 0x34
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RNG_MspInit+0x40>)
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	50060800 	.word	0x50060800
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08e      	sub	sp, #56	; 0x38
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	2230      	movs	r2, #48	; 0x30
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f007 f84c 	bl	80097c6 <memset>
  if(hrtc->Instance==RTC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_RTC_MspInit+0x4c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d111      	bne.n	800275c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002738:	2320      	movs	r3, #32
 800273a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800273c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	4618      	mov	r0, r3
 8002748:	f004 fb92 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002752:	f7ff fd69 	bl	8002228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RTC_MspInit+0x50>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3738      	adds	r7, #56	; 0x38
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40002800 	.word	0x40002800
 8002768:	42470e3c 	.word	0x42470e3c

0800276c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_SPI_MspInit+0x84>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12c      	bne.n	80027e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 8002798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_SPI_MspInit+0x88>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0320 	and.w	r3, r3, #32
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80027c6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027d8:	2305      	movs	r3, #5
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <HAL_SPI_MspInit+0x8c>)
 80027e4:	f002 fef6 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40015000 	.word	0x40015000
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40021400 	.word	0x40021400

080027fc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_SPI_MspDeInit+0x30>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10a      	bne.n	8002824 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_SPI_MspDeInit+0x34>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_SPI_MspDeInit+0x34>)
 8002814:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800281a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <HAL_SPI_MspDeInit+0x38>)
 8002820:	f003 f884 	bl	800592c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40015000 	.word	0x40015000
 8002830:	40023800 	.word	0x40023800
 8002834:	40021400 	.word	0x40021400

08002838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <HAL_TIM_Base_MspInit+0x48>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d115      	bne.n	8002876 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_TIM_Base_MspInit+0x4c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_TIM_Base_MspInit+0x4c>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_TIM_Base_MspInit+0x4c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201d      	movs	r0, #29
 800286c:	f002 fa31 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002870:	201d      	movs	r0, #29
 8002872:	f002 fa4a 	bl	8004d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40000400 	.word	0x40000400
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_TIM_MspPostInit+0x68>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11d      	bne.n	80028e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028c6:	2310      	movs	r3, #16
 80028c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d6:	2302      	movs	r3, #2
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_TIM_MspPostInit+0x70>)
 80028e2:	f002 fe77 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028e6:	bf00      	nop
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020400 	.word	0x40020400

080028fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002910:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_FMC_MspInit+0x104>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d16f      	bne.n	80029f8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_FMC_MspInit+0x104>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <HAL_FMC_MspInit+0x108>)
 8002924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002926:	4a37      	ldr	r2, [pc, #220]	; (8002a04 <HAL_FMC_MspInit+0x108>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6393      	str	r3, [r2, #56]	; 0x38
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_FMC_MspInit+0x108>)
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800293a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800293e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800294c:	230c      	movs	r3, #12
 800294e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4619      	mov	r1, r3
 8002954:	482c      	ldr	r0, [pc, #176]	; (8002a08 <HAL_FMC_MspInit+0x10c>)
 8002956:	f002 fe3d 	bl	80055d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800295a:	2301      	movs	r3, #1
 800295c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800296a:	230c      	movs	r3, #12
 800296c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4826      	ldr	r0, [pc, #152]	; (8002a0c <HAL_FMC_MspInit+0x110>)
 8002974:	f002 fe2e 	bl	80055d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002978:	f248 1333 	movw	r3, #33075	; 0x8133
 800297c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800298a:	230c      	movs	r3, #12
 800298c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	481f      	ldr	r0, [pc, #124]	; (8002a10 <HAL_FMC_MspInit+0x114>)
 8002994:	f002 fe1e 	bl	80055d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002998:	f64f 7380 	movw	r3, #65408	; 0xff80
 800299c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029aa:	230c      	movs	r3, #12
 80029ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4818      	ldr	r0, [pc, #96]	; (8002a14 <HAL_FMC_MspInit+0x118>)
 80029b4:	f002 fe0e 	bl	80055d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80029b8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ca:	230c      	movs	r3, #12
 80029cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4811      	ldr	r0, [pc, #68]	; (8002a18 <HAL_FMC_MspInit+0x11c>)
 80029d4:	f002 fdfe 	bl	80055d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029d8:	2360      	movs	r3, #96	; 0x60
 80029da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e4:	2303      	movs	r3, #3
 80029e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e8:	230c      	movs	r3, #12
 80029ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <HAL_FMC_MspInit+0x120>)
 80029f2:	f002 fdef 	bl	80055d4 <HAL_GPIO_Init>
 80029f6:	e000      	b.n	80029fa <HAL_FMC_MspInit+0xfe>
    return;
 80029f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200009a8 	.word	0x200009a8
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40021400 	.word	0x40021400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40020400 	.word	0x40020400

08002a20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a28:	f7ff ff68 	bl	80028fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <NMI_Handler+0x4>

08002a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <MemManage_Handler+0x4>

08002a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f001 fbf8 	bl	8004274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	#define DZIELNIK_1 13
	#define DZIELNIK_2 2
	#define OKRES_BAZOWY 999
	#define CZESTOTLIWOSC_ZASTEPCZA 20

	pozostale_klatki--;
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <TIM3_IRQHandler+0xb4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <TIM3_IRQHandler+0xb4>)
 8002a96:	6013      	str	r3, [r2, #0]
	if (pozostale_klatki == 0) {
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <TIM3_IRQHandler+0xb4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d146      	bne.n	8002b2e <TIM3_IRQHandler+0xa6>
		uint16_t okres;
		uint16_t wypelnienie;
		if (takty_melodii[biezacy_takt] < DZIELNIK_1) {
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <TIM3_IRQHandler+0xbc>)
 8002aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d805      	bhi.n	8002aba <TIM3_IRQHandler+0x32>
			pozostale_klatki = CZESTOTLIWOSC_ZASTEPCZA / DZIELNIK_2;
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <TIM3_IRQHandler+0xb4>)
 8002ab0:	220a      	movs	r2, #10
 8002ab2:	601a      	str	r2, [r3, #0]
			okres = OKRES_BAZOWY / CZESTOTLIWOSC_ZASTEPCZA;
 8002ab4:	2331      	movs	r3, #49	; 0x31
 8002ab6:	80fb      	strh	r3, [r7, #6]
 8002ab8:	e017      	b.n	8002aea <TIM3_IRQHandler+0x62>
		} else {
			pozostale_klatki = takty_melodii[biezacy_takt] / (DZIELNIK_1*DZIELNIK_2);
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <TIM3_IRQHandler+0xbc>)
 8002ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <TIM3_IRQHandler+0xc0>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <TIM3_IRQHandler+0xb4>)
 8002ad2:	601a      	str	r2, [r3, #0]
			okres = OKRES_BAZOWY * DZIELNIK_1 / takty_melodii[biezacy_takt];
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <TIM3_IRQHandler+0xbc>)
 8002ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f243 23bb 	movw	r3, #12987	; 0x32bb
 8002ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ae8:	80fb      	strh	r3, [r7, #6]
		}
		if (muzyka_wlaczona) {
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <TIM3_IRQHandler+0xc4>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <TIM3_IRQHandler+0x72>
			wypelnienie = okres / 2;
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	80bb      	strh	r3, [r7, #4]
 8002af8:	e001      	b.n	8002afe <TIM3_IRQHandler+0x76>
		} else {
			wypelnienie = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	80bb      	strh	r3, [r7, #4]
		}
		biezacy_takt++;
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002b06:	6013      	str	r3, [r2, #0]
		biezacy_takt %= (sizeof(takty_melodii) / sizeof(*takty_melodii));
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <TIM3_IRQHandler+0xc8>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <TIM3_IRQHandler+0xb8>)
 8002b20:	6013      	str	r3, [r2, #0]
		TIM3->ARR = okres;
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <TIM3_IRQHandler+0xcc>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	62d3      	str	r3, [r2, #44]	; 0x2c
		TIM3->CCR1 = wypelnienie;
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <TIM3_IRQHandler+0xcc>)
 8002b2a:	88bb      	ldrh	r3, [r7, #4]
 8002b2c:	6353      	str	r3, [r2, #52]	; 0x34
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b2e:	480a      	ldr	r0, [pc, #40]	; (8002b58 <TIM3_IRQHandler+0xd0>)
 8002b30:	f005 fd2a 	bl	8008588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200004bc 	.word	0x200004bc
 8002b40:	200009ac 	.word	0x200009ac
 8002b44:	200001cc 	.word	0x200001cc
 8002b48:	4ec4ec4f 	.word	0x4ec4ec4f
 8002b4c:	200001c8 	.word	0x200001c8
 8002b50:	ae4c415d 	.word	0xae4c415d
 8002b54:	40000400 	.word	0x40000400
 8002b58:	200007e8 	.word	0x200007e8

08002b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	return 1;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_kill>:

int _kill(int pid, int sig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b76:	f006 fe75 	bl	8009864 <__errno>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2216      	movs	r2, #22
 8002b7e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_exit>:

void _exit (int status)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffe7 	bl	8002b6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b9e:	e7fe      	b.n	8002b9e <_exit+0x12>

08002ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e00a      	b.n	8002bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bb2:	f3af 8000 	nop.w
 8002bb6:	4601      	mov	r1, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	60ba      	str	r2, [r7, #8]
 8002bbe:	b2ca      	uxtb	r2, r1
 8002bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	dbf0      	blt.n	8002bb2 <_read+0x12>
	}

return len;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e009      	b.n	8002c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf1      	blt.n	8002bec <_write+0x12>
	}
	return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_close>:

int _close(int file)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
	return -1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <_isatty>:

int _isatty(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
	return 1;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <_sbrk+0x5c>)
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <_sbrk+0x60>)
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <_sbrk+0x64>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <_sbrk+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cac:	f006 fdda 	bl	8009864 <__errno>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	e009      	b.n	8002cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <_sbrk+0x64>)
 8002ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20030000 	.word	0x20030000
 8002cdc:	00000400 	.word	0x00000400
 8002ce0:	200009b0 	.word	0x200009b0
 8002ce4:	20000d58 	.word	0x20000d58

08002ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <SystemInit+0x20>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <SystemInit+0x20>)
 8002cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d12:	490e      	ldr	r1, [pc, #56]	; (8002d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d28:	4c0b      	ldr	r4, [pc, #44]	; (8002d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d36:	f7ff ffd7 	bl	8002ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f006 fd99 	bl	8009870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7fe fc69 	bl	8001614 <main>
  bx  lr    
 8002d42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	20000578 	.word	0x20000578
  ldr r2, =_sidata
 8002d50:	0800cd14 	.word	0x0800cd14
  ldr r2, =_sbss
 8002d54:	20000578 	.word	0x20000578
  ldr r4, =_ebss
 8002d58:	20000d58 	.word	0x20000d58

08002d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC_IRQHandler>

08002d5e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002d62:	f000 fa5d 	bl	8003220 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002d66:	20ca      	movs	r0, #202	; 0xca
 8002d68:	f000 f95d 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002d6c:	20c3      	movs	r0, #195	; 0xc3
 8002d6e:	f000 f967 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002d72:	2008      	movs	r0, #8
 8002d74:	f000 f964 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002d78:	2050      	movs	r0, #80	; 0x50
 8002d7a:	f000 f961 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002d7e:	20cf      	movs	r0, #207	; 0xcf
 8002d80:	f000 f951 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 f95b 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002d8a:	20c1      	movs	r0, #193	; 0xc1
 8002d8c:	f000 f958 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002d90:	2030      	movs	r0, #48	; 0x30
 8002d92:	f000 f955 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002d96:	20ed      	movs	r0, #237	; 0xed
 8002d98:	f000 f945 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	f000 f94f 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002da2:	2003      	movs	r0, #3
 8002da4:	f000 f94c 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002da8:	2012      	movs	r0, #18
 8002daa:	f000 f949 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002dae:	2081      	movs	r0, #129	; 0x81
 8002db0:	f000 f946 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002db4:	20e8      	movs	r0, #232	; 0xe8
 8002db6:	f000 f936 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002dba:	2085      	movs	r0, #133	; 0x85
 8002dbc:	f000 f940 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f000 f93d 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002dc6:	2078      	movs	r0, #120	; 0x78
 8002dc8:	f000 f93a 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002dcc:	20cb      	movs	r0, #203	; 0xcb
 8002dce:	f000 f92a 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002dd2:	2039      	movs	r0, #57	; 0x39
 8002dd4:	f000 f934 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002dd8:	202c      	movs	r0, #44	; 0x2c
 8002dda:	f000 f931 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 f92e 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002de4:	2034      	movs	r0, #52	; 0x34
 8002de6:	f000 f92b 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002dea:	2002      	movs	r0, #2
 8002dec:	f000 f928 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002df0:	20f7      	movs	r0, #247	; 0xf7
 8002df2:	f000 f918 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002df6:	2020      	movs	r0, #32
 8002df8:	f000 f922 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002dfc:	20ea      	movs	r0, #234	; 0xea
 8002dfe:	f000 f912 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f000 f91c 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f000 f919 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002e0e:	20b1      	movs	r0, #177	; 0xb1
 8002e10:	f000 f909 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f000 f913 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002e1a:	201b      	movs	r0, #27
 8002e1c:	f000 f910 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002e20:	20b6      	movs	r0, #182	; 0xb6
 8002e22:	f000 f900 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002e26:	200a      	movs	r0, #10
 8002e28:	f000 f90a 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002e2c:	20a2      	movs	r0, #162	; 0xa2
 8002e2e:	f000 f907 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002e32:	20c0      	movs	r0, #192	; 0xc0
 8002e34:	f000 f8f7 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002e38:	2010      	movs	r0, #16
 8002e3a:	f000 f901 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002e3e:	20c1      	movs	r0, #193	; 0xc1
 8002e40:	f000 f8f1 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002e44:	2010      	movs	r0, #16
 8002e46:	f000 f8fb 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002e4a:	20c5      	movs	r0, #197	; 0xc5
 8002e4c:	f000 f8eb 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002e50:	2045      	movs	r0, #69	; 0x45
 8002e52:	f000 f8f5 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002e56:	2015      	movs	r0, #21
 8002e58:	f000 f8f2 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002e5c:	20c7      	movs	r0, #199	; 0xc7
 8002e5e:	f000 f8e2 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002e62:	2090      	movs	r0, #144	; 0x90
 8002e64:	f000 f8ec 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002e68:	2036      	movs	r0, #54	; 0x36
 8002e6a:	f000 f8dc 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002e6e:	20c8      	movs	r0, #200	; 0xc8
 8002e70:	f000 f8e6 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002e74:	20f2      	movs	r0, #242	; 0xf2
 8002e76:	f000 f8d6 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 f8e0 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002e80:	20b0      	movs	r0, #176	; 0xb0
 8002e82:	f000 f8d0 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002e86:	20c2      	movs	r0, #194	; 0xc2
 8002e88:	f000 f8da 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002e8c:	20b6      	movs	r0, #182	; 0xb6
 8002e8e:	f000 f8ca 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002e92:	200a      	movs	r0, #10
 8002e94:	f000 f8d4 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002e98:	20a7      	movs	r0, #167	; 0xa7
 8002e9a:	f000 f8d1 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002e9e:	2027      	movs	r0, #39	; 0x27
 8002ea0:	f000 f8ce 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f000 f8cb 	bl	8003040 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002eaa:	202a      	movs	r0, #42	; 0x2a
 8002eac:	f000 f8bb 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f000 f8c5 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f000 f8c2 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f000 f8bf 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002ec2:	20ef      	movs	r0, #239	; 0xef
 8002ec4:	f000 f8bc 	bl	8003040 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002ec8:	202b      	movs	r0, #43	; 0x2b
 8002eca:	f000 f8ac 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f000 f8b6 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f000 f8b3 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f000 f8b0 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002ee0:	203f      	movs	r0, #63	; 0x3f
 8002ee2:	f000 f8ad 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002ee6:	20f6      	movs	r0, #246	; 0xf6
 8002ee8:	f000 f89d 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f000 f8a7 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f000 f8a4 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002ef8:	2006      	movs	r0, #6
 8002efa:	f000 f8a1 	bl	8003040 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002efe:	202c      	movs	r0, #44	; 0x2c
 8002f00:	f000 f891 	bl	8003026 <ili9341_WriteReg>
  LCD_Delay(200);
 8002f04:	20c8      	movs	r0, #200	; 0xc8
 8002f06:	f000 fa79 	bl	80033fc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002f0a:	2026      	movs	r0, #38	; 0x26
 8002f0c:	f000 f88b 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 f895 	bl	8003040 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002f16:	20e0      	movs	r0, #224	; 0xe0
 8002f18:	f000 f885 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002f1c:	200f      	movs	r0, #15
 8002f1e:	f000 f88f 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002f22:	2029      	movs	r0, #41	; 0x29
 8002f24:	f000 f88c 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002f28:	2024      	movs	r0, #36	; 0x24
 8002f2a:	f000 f889 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002f2e:	200c      	movs	r0, #12
 8002f30:	f000 f886 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002f34:	200e      	movs	r0, #14
 8002f36:	f000 f883 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002f3a:	2009      	movs	r0, #9
 8002f3c:	f000 f880 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002f40:	204e      	movs	r0, #78	; 0x4e
 8002f42:	f000 f87d 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002f46:	2078      	movs	r0, #120	; 0x78
 8002f48:	f000 f87a 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002f4c:	203c      	movs	r0, #60	; 0x3c
 8002f4e:	f000 f877 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002f52:	2009      	movs	r0, #9
 8002f54:	f000 f874 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002f58:	2013      	movs	r0, #19
 8002f5a:	f000 f871 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002f5e:	2005      	movs	r0, #5
 8002f60:	f000 f86e 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002f64:	2017      	movs	r0, #23
 8002f66:	f000 f86b 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002f6a:	2011      	movs	r0, #17
 8002f6c:	f000 f868 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f000 f865 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002f76:	20e1      	movs	r0, #225	; 0xe1
 8002f78:	f000 f855 	bl	8003026 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 f85f 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002f82:	2016      	movs	r0, #22
 8002f84:	f000 f85c 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002f88:	201b      	movs	r0, #27
 8002f8a:	f000 f859 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002f8e:	2004      	movs	r0, #4
 8002f90:	f000 f856 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002f94:	2011      	movs	r0, #17
 8002f96:	f000 f853 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002f9a:	2007      	movs	r0, #7
 8002f9c:	f000 f850 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002fa0:	2031      	movs	r0, #49	; 0x31
 8002fa2:	f000 f84d 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002fa6:	2033      	movs	r0, #51	; 0x33
 8002fa8:	f000 f84a 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002fac:	2042      	movs	r0, #66	; 0x42
 8002fae:	f000 f847 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002fb2:	2005      	movs	r0, #5
 8002fb4:	f000 f844 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002fb8:	200c      	movs	r0, #12
 8002fba:	f000 f841 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002fbe:	200a      	movs	r0, #10
 8002fc0:	f000 f83e 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002fc4:	2028      	movs	r0, #40	; 0x28
 8002fc6:	f000 f83b 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002fca:	202f      	movs	r0, #47	; 0x2f
 8002fcc:	f000 f838 	bl	8003040 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002fd0:	200f      	movs	r0, #15
 8002fd2:	f000 f835 	bl	8003040 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002fd6:	2011      	movs	r0, #17
 8002fd8:	f000 f825 	bl	8003026 <ili9341_WriteReg>
  LCD_Delay(200);
 8002fdc:	20c8      	movs	r0, #200	; 0xc8
 8002fde:	f000 fa0d 	bl	80033fc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002fe2:	2029      	movs	r0, #41	; 0x29
 8002fe4:	f000 f81f 	bl	8003026 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002fe8:	202c      	movs	r0, #44	; 0x2c
 8002fea:	f000 f81c 	bl	8003026 <ili9341_WriteReg>
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002ff6:	f000 f913 	bl	8003220 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002ffa:	2103      	movs	r1, #3
 8002ffc:	20d3      	movs	r0, #211	; 0xd3
 8002ffe:	f000 f82c 	bl	800305a <ili9341_ReadData>
 8003002:	4603      	mov	r3, r0
 8003004:	b29b      	uxth	r3, r3
}
 8003006:	4618      	mov	r0, r3
 8003008:	bd80      	pop	{r7, pc}

0800300a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800300e:	2029      	movs	r0, #41	; 0x29
 8003010:	f000 f809 	bl	8003026 <ili9341_WriteReg>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800301c:	2028      	movs	r0, #40	; 0x28
 800301e:	f000 f802 	bl	8003026 <ili9341_WriteReg>
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}

08003026 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f98e 	bl	8003354 <LCD_IO_WriteReg>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f95f 	bl	8003310 <LCD_IO_WriteData>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	460a      	mov	r2, r1
 8003064:	80fb      	strh	r3, [r7, #6]
 8003066:	4613      	mov	r3, r2
 8003068:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800306a:	797a      	ldrb	r2, [r7, #5]
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f991 	bl	8003398 <LCD_IO_ReadData>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003084:	23f0      	movs	r3, #240	; 0xf0
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003094:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80030a8:	4819      	ldr	r0, [pc, #100]	; (8003110 <SPIx_Init+0x6c>)
 80030aa:	f004 ff4c 	bl	8007f46 <HAL_SPI_GetState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d12b      	bne.n	800310c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80030b4:	4b16      	ldr	r3, [pc, #88]	; (8003110 <SPIx_Init+0x6c>)
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <SPIx_Init+0x70>)
 80030b8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <SPIx_Init+0x6c>)
 80030bc:	2218      	movs	r2, #24
 80030be:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <SPIx_Init+0x6c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <SPIx_Init+0x6c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <SPIx_Init+0x6c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <SPIx_Init+0x6c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <SPIx_Init+0x6c>)
 80030da:	2207      	movs	r2, #7
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <SPIx_Init+0x6c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <SPIx_Init+0x6c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <SPIx_Init+0x6c>)
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <SPIx_Init+0x6c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SPIx_Init+0x6c>)
 80030fa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030fe:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <SPIx_Init+0x6c>)
 8003102:	f000 f853 	bl	80031ac <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003106:	4802      	ldr	r0, [pc, #8]	; (8003110 <SPIx_Init+0x6c>)
 8003108:	f004 fa7d 	bl	8007606 <HAL_SPI_Init>
  } 
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200009b4 	.word	0x200009b4
 8003114:	40015000 	.word	0x40015000

08003118 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <SPIx_Read+0x38>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f107 0108 	add.w	r1, r7, #8
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <SPIx_Read+0x3c>)
 8003134:	f004 fc54 	bl	80079e0 <HAL_SPI_Receive>
 8003138:	4603      	mov	r3, r0
 800313a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003142:	f000 f827 	bl	8003194 <SPIx_Error>
  }
  
  return readvalue;
 8003146:	68bb      	ldr	r3, [r7, #8]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200004fc 	.word	0x200004fc
 8003154:	200009b4 	.word	0x200009b4

08003158 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <SPIx_Write+0x34>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1db9      	adds	r1, r7, #6
 800316c:	2201      	movs	r2, #1
 800316e:	4808      	ldr	r0, [pc, #32]	; (8003190 <SPIx_Write+0x38>)
 8003170:	f004 fafa 	bl	8007768 <HAL_SPI_Transmit>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800317e:	f000 f809 	bl	8003194 <SPIx_Error>
  }
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	200004fc 	.word	0x200004fc
 8003190:	200009b4 	.word	0x200009b4

08003194 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003198:	4803      	ldr	r0, [pc, #12]	; (80031a8 <SPIx_Error+0x14>)
 800319a:	f004 fabd 	bl	8007718 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800319e:	f7ff ff81 	bl	80030a4 <SPIx_Init>
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	200009b4 	.word	0x200009b4

080031ac <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	4b17      	ldr	r3, [pc, #92]	; (8003218 <SPIx_MspInit+0x6c>)
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <SPIx_MspInit+0x6c>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	6453      	str	r3, [r2, #68]	; 0x44
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <SPIx_MspInit+0x6c>)
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <SPIx_MspInit+0x6c>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <SPIx_MspInit+0x6c>)
 80031da:	f043 0320 	orr.w	r3, r3, #32
 80031de:	6313      	str	r3, [r2, #48]	; 0x30
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <SPIx_MspInit+0x6c>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80031ec:	f44f 7360 	mov.w	r3, #896	; 0x380
 80031f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80031f6:	2302      	movs	r3, #2
 80031f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80031fa:	2301      	movs	r3, #1
 80031fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80031fe:	2305      	movs	r3, #5
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <SPIx_MspInit+0x70>)
 800320a:	f002 f9e3 	bl	80055d4 <HAL_GPIO_Init>
}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40021400 	.word	0x40021400

08003220 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003226:	4b36      	ldr	r3, [pc, #216]	; (8003300 <LCD_IO_Init+0xe0>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d164      	bne.n	80032f8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <LCD_IO_Init+0xe0>)
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <LCD_IO_Init+0xe4>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4a31      	ldr	r2, [pc, #196]	; (8003304 <LCD_IO_Init+0xe4>)
 800323e:	f043 0308 	orr.w	r3, r3, #8
 8003242:	6313      	str	r3, [r2, #48]	; 0x30
 8003244:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <LCD_IO_Init+0xe4>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003254:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003256:	2301      	movs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800325e:	2302      	movs	r3, #2
 8003260:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4619      	mov	r1, r3
 8003268:	4827      	ldr	r0, [pc, #156]	; (8003308 <LCD_IO_Init+0xe8>)
 800326a:	f002 f9b3 	bl	80055d4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <LCD_IO_Init+0xe4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a23      	ldr	r2, [pc, #140]	; (8003304 <LCD_IO_Init+0xe4>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <LCD_IO_Init+0xe4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800328a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800328e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003290:	2301      	movs	r3, #1
 8003292:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003298:	2302      	movs	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	4819      	ldr	r0, [pc, #100]	; (8003308 <LCD_IO_Init+0xe8>)
 80032a4:	f002 f996 	bl	80055d4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <LCD_IO_Init+0xe4>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <LCD_IO_Init+0xe4>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <LCD_IO_Init+0xe4>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80032c4:	2304      	movs	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	4619      	mov	r1, r3
 80032da:	480c      	ldr	r0, [pc, #48]	; (800330c <LCD_IO_Init+0xec>)
 80032dc:	f002 f97a 	bl	80055d4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80032e0:	2200      	movs	r2, #0
 80032e2:	2104      	movs	r1, #4
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <LCD_IO_Init+0xec>)
 80032e6:	f002 fc45 	bl	8005b74 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80032ea:	2201      	movs	r2, #1
 80032ec:	2104      	movs	r1, #4
 80032ee:	4807      	ldr	r0, [pc, #28]	; (800330c <LCD_IO_Init+0xec>)
 80032f0:	f002 fc40 	bl	8005b74 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80032f4:	f7ff fed6 	bl	80030a4 <SPIx_Init>
  }
}
 80032f8:	bf00      	nop
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000a0c 	.word	0x20000a0c
 8003304:	40023800 	.word	0x40023800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40020800 	.word	0x40020800

08003310 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800331a:	2201      	movs	r2, #1
 800331c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003320:	480a      	ldr	r0, [pc, #40]	; (800334c <LCD_IO_WriteData+0x3c>)
 8003322:	f002 fc27 	bl	8005b74 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003326:	2200      	movs	r2, #0
 8003328:	2104      	movs	r1, #4
 800332a:	4809      	ldr	r0, [pc, #36]	; (8003350 <LCD_IO_WriteData+0x40>)
 800332c:	f002 fc22 	bl	8005b74 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff10 	bl	8003158 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003338:	2201      	movs	r2, #1
 800333a:	2104      	movs	r1, #4
 800333c:	4804      	ldr	r0, [pc, #16]	; (8003350 <LCD_IO_WriteData+0x40>)
 800333e:	f002 fc19 	bl	8005b74 <HAL_GPIO_WritePin>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40020800 	.word	0x40020800

08003354 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800335e:	2200      	movs	r2, #0
 8003360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003364:	480a      	ldr	r0, [pc, #40]	; (8003390 <LCD_IO_WriteReg+0x3c>)
 8003366:	f002 fc05 	bl	8005b74 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800336a:	2200      	movs	r2, #0
 800336c:	2104      	movs	r1, #4
 800336e:	4809      	ldr	r0, [pc, #36]	; (8003394 <LCD_IO_WriteReg+0x40>)
 8003370:	f002 fc00 	bl	8005b74 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff feed 	bl	8003158 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800337e:	2201      	movs	r2, #1
 8003380:	2104      	movs	r1, #4
 8003382:	4804      	ldr	r0, [pc, #16]	; (8003394 <LCD_IO_WriteReg+0x40>)
 8003384:	f002 fbf6 	bl	8005b74 <HAL_GPIO_WritePin>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020c00 	.word	0x40020c00
 8003394:	40020800 	.word	0x40020800

08003398 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	460a      	mov	r2, r1
 80033a2:	80fb      	strh	r3, [r7, #6]
 80033a4:	4613      	mov	r3, r2
 80033a6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80033ac:	2200      	movs	r2, #0
 80033ae:	2104      	movs	r1, #4
 80033b0:	4810      	ldr	r0, [pc, #64]	; (80033f4 <LCD_IO_ReadData+0x5c>)
 80033b2:	f002 fbdf 	bl	8005b74 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033b6:	2200      	movs	r2, #0
 80033b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033bc:	480e      	ldr	r0, [pc, #56]	; (80033f8 <LCD_IO_ReadData+0x60>)
 80033be:	f002 fbd9 	bl	8005b74 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fec7 	bl	8003158 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80033ca:	797b      	ldrb	r3, [r7, #5]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fea3 	bl	8003118 <SPIx_Read>
 80033d2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80033d4:	2201      	movs	r2, #1
 80033d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033da:	4807      	ldr	r0, [pc, #28]	; (80033f8 <LCD_IO_ReadData+0x60>)
 80033dc:	f002 fbca 	bl	8005b74 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033e0:	2201      	movs	r2, #1
 80033e2:	2104      	movs	r1, #4
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <LCD_IO_ReadData+0x5c>)
 80033e6:	f002 fbc5 	bl	8005b74 <HAL_GPIO_WritePin>
  
  return readvalue;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00

080033fc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 ff55 	bl	80042b4 <HAL_Delay>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003418:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <BSP_LCD_Init+0xbc>)
 800341a:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <BSP_LCD_Init+0xc0>)
 800341c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800341e:	4b2c      	ldr	r3, [pc, #176]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003420:	2209      	movs	r2, #9
 8003422:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003426:	2201      	movs	r2, #1
 8003428:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <BSP_LCD_Init+0xbc>)
 800342c:	221d      	movs	r2, #29
 800342e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003432:	2203      	movs	r2, #3
 8003434:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003438:	f240 120d 	movw	r2, #269	; 0x10d
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003440:	f240 1243 	movw	r2, #323	; 0x143
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003446:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003448:	f240 1217 	movw	r2, #279	; 0x117
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003450:	f240 1247 	movw	r2, #327	; 0x147
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800346e:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <BSP_LCD_Init+0xc4>)
 8003470:	2208      	movs	r2, #8
 8003472:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <BSP_LCD_Init+0xc4>)
 8003476:	22c0      	movs	r2, #192	; 0xc0
 8003478:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <BSP_LCD_Init+0xc4>)
 800347c:	2204      	movs	r2, #4
 800347e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <BSP_LCD_Init+0xc4>)
 8003482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003488:	4813      	ldr	r0, [pc, #76]	; (80034d8 <BSP_LCD_Init+0xc4>)
 800348a:	f003 fcf1 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003494:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <BSP_LCD_Init+0xbc>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <BSP_LCD_Init+0xbc>)
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <BSP_LCD_Init+0xbc>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80034a6:	f000 fadb 	bl	8003a60 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80034aa:	4809      	ldr	r0, [pc, #36]	; (80034d0 <BSP_LCD_Init+0xbc>)
 80034ac:	f002 fd3c 	bl	8005f28 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <BSP_LCD_Init+0xc8>)
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <BSP_LCD_Init+0xcc>)
 80034b4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <BSP_LCD_Init+0xc8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80034be:	f000 fcbd 	bl	8003e3c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80034c2:	4808      	ldr	r0, [pc, #32]	; (80034e4 <BSP_LCD_Init+0xd0>)
 80034c4:	f000 f8be 	bl	8003644 <BSP_LCD_SetFont>

  return LCD_OK;
 80034c8:	2300      	movs	r3, #0
}  
 80034ca:	4618      	mov	r0, r3
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000a10 	.word	0x20000a10
 80034d4:	40016800 	.word	0x40016800
 80034d8:	20000af8 	.word	0x20000af8
 80034dc:	20000b44 	.word	0x20000b44
 80034e0:	200004c4 	.word	0x200004c4
 80034e4:	20000500 	.word	0x20000500

080034e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <BSP_LCD_GetXSize+0x14>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4798      	blx	r3
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000b44 	.word	0x20000b44

08003500 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <BSP_LCD_GetYSize+0x14>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	4798      	blx	r3
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000b44 	.word	0x20000b44

08003518 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003518:	b580      	push	{r7, lr}
 800351a:	b090      	sub	sp, #64	; 0x40
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003528:	f7ff ffde 	bl	80034e8 <BSP_LCD_GetXSize>
 800352c:	4603      	mov	r3, r0
 800352e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003534:	f7ff ffe4 	bl	8003500 <BSP_LCD_GetYSize>
 8003538:	4603      	mov	r3, r0
 800353a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003544:	23ff      	movs	r3, #255	; 0xff
 8003546:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800355e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003564:	2307      	movs	r3, #7
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003568:	f7ff ffbe 	bl	80034e8 <BSP_LCD_GetXSize>
 800356c:	4603      	mov	r3, r0
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003570:	f7ff ffc6 	bl	8003500 <BSP_LCD_GetYSize>
 8003574:	4603      	mov	r3, r0
 8003576:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4619      	mov	r1, r3
 8003580:	4814      	ldr	r0, [pc, #80]	; (80035d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003582:	f002 fda1 	bl	80060c8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	4913      	ldr	r1, [pc, #76]	; (80035d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3304      	adds	r3, #4
 8003596:	f04f 32ff 	mov.w	r2, #4294967295
 800359a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	490e      	ldr	r1, [pc, #56]	; (80035d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3308      	adds	r3, #8
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <BSP_LCD_LayerDefaultInit+0xc4>)
 80035ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	4909      	ldr	r1, [pc, #36]	; (80035d8 <BSP_LCD_LayerDefaultInit+0xc0>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80035c2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80035c4:	4803      	ldr	r0, [pc, #12]	; (80035d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80035c6:	f002 fdbd 	bl	8006144 <HAL_LTDC_EnableDither>
}
 80035ca:	bf00      	nop
 80035cc:	3740      	adds	r7, #64	; 0x40
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000a10 	.word	0x20000a10
 80035d8:	20000b2c 	.word	0x20000b2c
 80035dc:	20000500 	.word	0x20000500

080035e0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <BSP_LCD_SetTextColor+0x28>)
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4907      	ldr	r1, [pc, #28]	; (800360c <BSP_LCD_SetTextColor+0x2c>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000b28 	.word	0x20000b28
 800360c:	20000b2c 	.word	0x20000b2c

08003610 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <BSP_LCD_SetBackColor+0x2c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4908      	ldr	r1, [pc, #32]	; (8003640 <BSP_LCD_SetBackColor+0x30>)
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3304      	adds	r3, #4
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	601a      	str	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000b28 	.word	0x20000b28
 8003640:	20000b2c 	.word	0x20000b2c

08003644 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <BSP_LCD_SetFont+0x2c>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4908      	ldr	r1, [pc, #32]	; (8003674 <BSP_LCD_SetFont+0x30>)
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3308      	adds	r3, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000b28 	.word	0x20000b28
 8003674:	20000b2c 	.word	0x20000b2c

08003678 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <BSP_LCD_GetFont+0x24>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4907      	ldr	r1, [pc, #28]	; (80036a0 <BSP_LCD_GetFont+0x28>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3308      	adds	r3, #8
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000b28 	.word	0x20000b28
 80036a0:	20000b2c 	.word	0x20000b2c

080036a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80036a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <BSP_LCD_Clear+0x48>)
 80036ae:	681c      	ldr	r4, [r3, #0]
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <BSP_LCD_Clear+0x48>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <BSP_LCD_Clear+0x4c>)
 80036b6:	2134      	movs	r1, #52	; 0x34
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461e      	mov	r6, r3
 80036c4:	f7ff ff10 	bl	80034e8 <BSP_LCD_GetXSize>
 80036c8:	4605      	mov	r5, r0
 80036ca:	f7ff ff19 	bl	8003500 <BSP_LCD_GetYSize>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	462a      	mov	r2, r5
 80036dc:	4631      	mov	r1, r6
 80036de:	4620      	mov	r0, r4
 80036e0:	f000 fb74 	bl	8003dcc <FillBuffer>
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ec:	20000b28 	.word	0x20000b28
 80036f0:	20000a10 	.word	0x20000a10

080036f4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
 80036fe:	460b      	mov	r3, r1
 8003700:	80bb      	strh	r3, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <BSP_LCD_DisplayChar+0x80>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <BSP_LCD_DisplayChar+0x84>)
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3308      	adds	r3, #8
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <BSP_LCD_DisplayChar+0x80>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4c14      	ldr	r4, [pc, #80]	; (8003778 <BSP_LCD_DisplayChar+0x84>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4423      	add	r3, r4
 8003732:	3308      	adds	r3, #8
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003738:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <BSP_LCD_DisplayChar+0x80>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <BSP_LCD_DisplayChar+0x84>)
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4423      	add	r3, r4
 800374c:	3308      	adds	r3, #8
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	889b      	ldrh	r3, [r3, #4]
 8003752:	3307      	adds	r3, #7
 8003754:	2b00      	cmp	r3, #0
 8003756:	da00      	bge.n	800375a <BSP_LCD_DisplayChar+0x66>
 8003758:	3307      	adds	r3, #7
 800375a:	10db      	asrs	r3, r3, #3
 800375c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003760:	18ca      	adds	r2, r1, r3
 8003762:	88b9      	ldrh	r1, [r7, #4]
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa76 	bl	8003c58 <DrawChar>
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	20000b28 	.word	0x20000b28
 8003778:	20000b2c 	.word	0x20000b2c

0800377c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60ba      	str	r2, [r7, #8]
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	81fb      	strh	r3, [r7, #14]
 800378a:	460b      	mov	r3, r1
 800378c:	81bb      	strh	r3, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003792:	2301      	movs	r3, #1
 8003794:	83fb      	strh	r3, [r7, #30]
 8003796:	2300      	movs	r3, #0
 8003798:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80037a6:	e002      	b.n	80037ae <BSP_LCD_DisplayStringAt+0x32>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	617a      	str	r2, [r7, #20]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f6      	bne.n	80037a8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80037ba:	f7ff fe95 	bl	80034e8 <BSP_LCD_GetXSize>
 80037be:	4601      	mov	r1, r0
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	484b      	ldr	r0, [pc, #300]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4403      	add	r3, r0
 80037d0:	3308      	adds	r3, #8
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	889b      	ldrh	r3, [r3, #4]
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d01c      	beq.n	800381c <BSP_LCD_DisplayStringAt+0xa0>
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	dc33      	bgt.n	800384e <BSP_LCD_DisplayStringAt+0xd2>
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d002      	beq.n	80037f0 <BSP_LCD_DisplayStringAt+0x74>
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d019      	beq.n	8003822 <BSP_LCD_DisplayStringAt+0xa6>
 80037ee:	e02e      	b.n	800384e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	1ad1      	subs	r1, r2, r3
 80037f6:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	483e      	ldr	r0, [pc, #248]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4403      	add	r3, r0
 8003806:	3308      	adds	r3, #8
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	889b      	ldrh	r3, [r3, #4]
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	4413      	add	r3, r2
 8003818:	83fb      	strh	r3, [r7, #30]
      break;
 800381a:	e01b      	b.n	8003854 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 800381c:	89fb      	ldrh	r3, [r7, #14]
 800381e:	83fb      	strh	r3, [r7, #30]
      break;
 8003820:	e018      	b.n	8003854 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	b299      	uxth	r1, r3
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4831      	ldr	r0, [pc, #196]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4403      	add	r3, r0
 800383a:	3308      	adds	r3, #8
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	889b      	ldrh	r3, [r3, #4]
 8003840:	fb11 f303 	smulbb	r3, r1, r3
 8003844:	b29a      	uxth	r2, r3
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	4413      	add	r3, r2
 800384a:	83fb      	strh	r3, [r7, #30]
      break;
 800384c:	e002      	b.n	8003854 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800384e:	89fb      	ldrh	r3, [r7, #14]
 8003850:	83fb      	strh	r3, [r7, #30]
      break;
 8003852:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003854:	e01a      	b.n	800388c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	89b9      	ldrh	r1, [r7, #12]
 800385c:	8bfb      	ldrh	r3, [r7, #30]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff48 	bl	80036f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003864:	4b22      	ldr	r3, [pc, #136]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4922      	ldr	r1, [pc, #136]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3308      	adds	r3, #8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	889a      	ldrh	r2, [r3, #4]
 800387a:	8bfb      	ldrh	r3, [r7, #30]
 800387c:	4413      	add	r3, r2
 800387e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3301      	adds	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
    i++;
 8003886:	8bbb      	ldrh	r3, [r7, #28]
 8003888:	3301      	adds	r3, #1
 800388a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf14      	ite	ne
 8003894:	2301      	movne	r3, #1
 8003896:	2300      	moveq	r3, #0
 8003898:	b2dc      	uxtb	r4, r3
 800389a:	f7ff fe25 	bl	80034e8 <BSP_LCD_GetXSize>
 800389e:	8bb9      	ldrh	r1, [r7, #28]
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4d13      	ldr	r5, [pc, #76]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	442b      	add	r3, r5
 80038b0:	3308      	adds	r3, #8
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	889b      	ldrh	r3, [r3, #4]
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	1ac3      	subs	r3, r0, r3
 80038bc:	b299      	uxth	r1, r3
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <BSP_LCD_DisplayStringAt+0x174>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	480c      	ldr	r0, [pc, #48]	; (80038f4 <BSP_LCD_DisplayStringAt+0x178>)
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4403      	add	r3, r0
 80038ce:	3308      	adds	r3, #8
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	889b      	ldrh	r3, [r3, #4]
 80038d4:	4299      	cmp	r1, r3
 80038d6:	bf2c      	ite	cs
 80038d8:	2301      	movcs	r3, #1
 80038da:	2300      	movcc	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4023      	ands	r3, r4
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1b7      	bne.n	8003856 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdb0      	pop	{r4, r5, r7, pc}
 80038f0:	20000b28 	.word	0x20000b28
 80038f4:	20000b2c 	.word	0x20000b2c

080038f8 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003904:	f7ff feb8 	bl	8003678 <BSP_LCD_GetFont>
 8003908:	4603      	mov	r3, r0
 800390a:	88db      	ldrh	r3, [r3, #6]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	fb12 f303 	smulbb	r3, r2, r3
 8003912:	b299      	uxth	r1, r3
 8003914:	2303      	movs	r3, #3
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	2000      	movs	r0, #0
 800391a:	f7ff ff2f 	bl	800377c <BSP_LCD_DisplayStringAt>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	af02      	add	r7, sp, #8
 800392e:	4603      	mov	r3, r0
 8003930:	80fb      	strh	r3, [r7, #6]
 8003932:	460b      	mov	r3, r1
 8003934:	80bb      	strh	r3, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <BSP_LCD_DrawVLine+0x78>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <BSP_LCD_DrawVLine+0x7c>)
 8003944:	2134      	movs	r1, #52	; 0x34
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	335c      	adds	r3, #92	; 0x5c
 800394e:	681c      	ldr	r4, [r3, #0]
 8003950:	f7ff fdca 	bl	80034e8 <BSP_LCD_GetXSize>
 8003954:	4602      	mov	r2, r0
 8003956:	88bb      	ldrh	r3, [r7, #4]
 8003958:	fb03 f202 	mul.w	r2, r3, r2
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4423      	add	r3, r4
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <BSP_LCD_DrawVLine+0x78>)
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	68fd      	ldr	r5, [r7, #12]
 800396c:	887e      	ldrh	r6, [r7, #2]
 800396e:	f7ff fdbb 	bl	80034e8 <BSP_LCD_GetXSize>
 8003972:	4603      	mov	r3, r0
 8003974:	1e59      	subs	r1, r3, #1
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <BSP_LCD_DrawVLine+0x78>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	480b      	ldr	r0, [pc, #44]	; (80039a8 <BSP_LCD_DrawVLine+0x80>)
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4403      	add	r3, r0
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	9100      	str	r1, [sp, #0]
 800398c:	4633      	mov	r3, r6
 800398e:	2201      	movs	r2, #1
 8003990:	4629      	mov	r1, r5
 8003992:	4620      	mov	r0, r4
 8003994:	f000 fa1a 	bl	8003dcc <FillBuffer>
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a0:	20000b28 	.word	0x20000b28
 80039a4:	20000a10 	.word	0x20000a10
 80039a8:	20000b2c 	.word	0x20000b2c

080039ac <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80039ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af02      	add	r7, sp, #8
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	461a      	mov	r2, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	80fb      	strh	r3, [r7, #6]
 80039c0:	4603      	mov	r3, r0
 80039c2:	80bb      	strh	r3, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80039d0:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <BSP_LCD_FillRect+0xa8>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4920      	ldr	r1, [pc, #128]	; (8003a58 <BSP_LCD_FillRect+0xac>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fdfc 	bl	80035e0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <BSP_LCD_FillRect+0xa8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <BSP_LCD_FillRect+0xb0>)
 80039ee:	2134      	movs	r1, #52	; 0x34
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	335c      	adds	r3, #92	; 0x5c
 80039f8:	681c      	ldr	r4, [r3, #0]
 80039fa:	f7ff fd75 	bl	80034e8 <BSP_LCD_GetXSize>
 80039fe:	4602      	mov	r2, r0
 8003a00:	88bb      	ldrh	r3, [r7, #4]
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4423      	add	r3, r4
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <BSP_LCD_FillRect+0xa8>)
 8003a12:	681c      	ldr	r4, [r3, #0]
 8003a14:	68fd      	ldr	r5, [r7, #12]
 8003a16:	887e      	ldrh	r6, [r7, #2]
 8003a18:	f8b7 8000 	ldrh.w	r8, [r7]
 8003a1c:	f7ff fd64 	bl	80034e8 <BSP_LCD_GetXSize>
 8003a20:	4602      	mov	r2, r0
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	1ad1      	subs	r1, r2, r3
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <BSP_LCD_FillRect+0xa8>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	480b      	ldr	r0, [pc, #44]	; (8003a58 <BSP_LCD_FillRect+0xac>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4403      	add	r3, r0
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	9100      	str	r1, [sp, #0]
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	4632      	mov	r2, r6
 8003a40:	4629      	mov	r1, r5
 8003a42:	4620      	mov	r0, r4
 8003a44:	f000 f9c2 	bl	8003dcc <FillBuffer>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a52:	bf00      	nop
 8003a54:	20000b28 	.word	0x20000b28
 8003a58:	20000b2c 	.word	0x20000b2c
 8003a5c:	20000a10 	.word	0x20000a10

08003a60 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	4b61      	ldr	r3, [pc, #388]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b5e      	ldr	r3, [pc, #376]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a59      	ldr	r2, [pc, #356]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b57      	ldr	r3, [pc, #348]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a44      	ldr	r2, [pc, #272]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a3d      	ldr	r2, [pc, #244]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003afc:	f043 0308 	orr.w	r3, r3, #8
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a36      	ldr	r2, [pc, #216]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b18:	f043 0320 	orr.w	r3, r3, #32
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <BSP_LCD_MspInit+0x190>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003b46:	f641 0358 	movw	r3, #6232	; 0x1858
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b54:	2302      	movs	r3, #2
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003b58:	230e      	movs	r3, #14
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b60:	4619      	mov	r1, r3
 8003b62:	4824      	ldr	r0, [pc, #144]	; (8003bf4 <BSP_LCD_MspInit+0x194>)
 8003b64:	f001 fd36 	bl	80055d4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003b68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b72:	4619      	mov	r1, r3
 8003b74:	4820      	ldr	r0, [pc, #128]	; (8003bf8 <BSP_LCD_MspInit+0x198>)
 8003b76:	f001 fd2d 	bl	80055d4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003b7a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b84:	4619      	mov	r1, r3
 8003b86:	481d      	ldr	r0, [pc, #116]	; (8003bfc <BSP_LCD_MspInit+0x19c>)
 8003b88:	f001 fd24 	bl	80055d4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003b8c:	2348      	movs	r3, #72	; 0x48
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b94:	4619      	mov	r1, r3
 8003b96:	481a      	ldr	r0, [pc, #104]	; (8003c00 <BSP_LCD_MspInit+0x1a0>)
 8003b98:	f001 fd1c 	bl	80055d4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4816      	ldr	r0, [pc, #88]	; (8003c04 <BSP_LCD_MspInit+0x1a4>)
 8003baa:	f001 fd13 	bl	80055d4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003bae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4813      	ldr	r0, [pc, #76]	; (8003c08 <BSP_LCD_MspInit+0x1a8>)
 8003bbc:	f001 fd0a 	bl	80055d4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003bc4:	2309      	movs	r3, #9
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <BSP_LCD_MspInit+0x198>)
 8003bd0:	f001 fd00 	bl	80055d4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bde:	4619      	mov	r1, r3
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <BSP_LCD_MspInit+0x1a8>)
 8003be2:	f001 fcf7 	bl	80055d4 <HAL_GPIO_Init>
}
 8003be6:	bf00      	nop
 8003be8:	3738      	adds	r7, #56	; 0x38
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40020400 	.word	0x40020400
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020c00 	.word	0x40020c00
 8003c04:	40021400 	.word	0x40021400
 8003c08:	40021800 	.word	0x40021800

08003c0c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	603a      	str	r2, [r7, #0]
 8003c16:	80fb      	strh	r3, [r7, #6]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <BSP_LCD_DrawPixel+0x44>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <BSP_LCD_DrawPixel+0x48>)
 8003c22:	2134      	movs	r1, #52	; 0x34
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	335c      	adds	r3, #92	; 0x5c
 8003c2c:	681c      	ldr	r4, [r3, #0]
 8003c2e:	88bd      	ldrh	r5, [r7, #4]
 8003c30:	f7ff fc5a 	bl	80034e8 <BSP_LCD_GetXSize>
 8003c34:	4603      	mov	r3, r0
 8003c36:	fb03 f205 	mul.w	r2, r3, r5
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4423      	add	r3, r4
 8003c42:	461a      	mov	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c50:	20000b28 	.word	0x20000b28
 8003c54:	20000a10 	.word	0x20000a10

08003c58 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	603a      	str	r2, [r7, #0]
 8003c62:	80fb      	strh	r3, [r7, #6]
 8003c64:	460b      	mov	r3, r1
 8003c66:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <DrawChar+0x16c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4953      	ldr	r1, [pc, #332]	; (8003dc8 <DrawChar+0x170>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3308      	adds	r3, #8
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	88db      	ldrh	r3, [r3, #6]
 8003c8a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003c8c:	4b4d      	ldr	r3, [pc, #308]	; (8003dc4 <DrawChar+0x16c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	494d      	ldr	r1, [pc, #308]	; (8003dc8 <DrawChar+0x170>)
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	889b      	ldrh	r3, [r3, #4]
 8003ca2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003ca4:	8a3b      	ldrh	r3, [r7, #16]
 8003ca6:	3307      	adds	r3, #7
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da00      	bge.n	8003cae <DrawChar+0x56>
 8003cac:	3307      	adds	r3, #7
 8003cae:	10db      	asrs	r3, r3, #3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	8a3b      	ldrh	r3, [r7, #16]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e076      	b.n	8003db2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003cc4:	8a3b      	ldrh	r3, [r7, #16]
 8003cc6:	3307      	adds	r3, #7
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da00      	bge.n	8003cce <DrawChar+0x76>
 8003ccc:	3307      	adds	r3, #7
 8003cce:	10db      	asrs	r3, r3, #3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003cde:	8a3b      	ldrh	r3, [r7, #16]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da00      	bge.n	8003ce8 <DrawChar+0x90>
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	10db      	asrs	r3, r3, #3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <DrawChar+0x9c>
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d004      	beq.n	8003cfc <DrawChar+0xa4>
 8003cf2:	e00c      	b.n	8003d0e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	617b      	str	r3, [r7, #20]
      break;
 8003cfa:	e016      	b.n	8003d2a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	3201      	adds	r2, #1
 8003d06:	7812      	ldrb	r2, [r2, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
      break;
 8003d0c:	e00d      	b.n	8003d2a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	041a      	lsls	r2, r3, #16
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3301      	adds	r3, #1
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	3202      	adds	r2, #2
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
      break;
 8003d28:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e036      	b.n	8003d9e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003d30:	8a3a      	ldrh	r2, [r7, #16]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	4413      	add	r3, r2
 8003d54:	b298      	uxth	r0, r3
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <DrawChar+0x16c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	491b      	ldr	r1, [pc, #108]	; (8003dc8 <DrawChar+0x170>)
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	88bb      	ldrh	r3, [r7, #4]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7ff ff4e 	bl	8003c0c <BSP_LCD_DrawPixel>
 8003d70:	e012      	b.n	8003d98 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	4413      	add	r3, r2
 8003d7a:	b298      	uxth	r0, r3
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <DrawChar+0x16c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4911      	ldr	r1, [pc, #68]	; (8003dc8 <DrawChar+0x170>)
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	88bb      	ldrh	r3, [r7, #4]
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7ff ff3a 	bl	8003c0c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	8a3b      	ldrh	r3, [r7, #16]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3c4      	bcc.n	8003d30 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003da6:	88bb      	ldrh	r3, [r7, #4]
 8003da8:	3301      	adds	r3, #1
 8003daa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3301      	adds	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	8a7b      	ldrh	r3, [r7, #18]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d384      	bcc.n	8003cc4 <DrawChar+0x6c>
  }
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000b28 	.word	0x20000b28
 8003dc8:	20000b2c 	.word	0x20000b2c

08003dcc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <FillBuffer+0x68>)
 8003ddc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003de0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <FillBuffer+0x68>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003de8:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <FillBuffer+0x68>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <FillBuffer+0x68>)
 8003df0:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <FillBuffer+0x6c>)
 8003df2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003df4:	480f      	ldr	r0, [pc, #60]	; (8003e34 <FillBuffer+0x68>)
 8003df6:	f001 f961 	bl	80050bc <HAL_DMA2D_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d115      	bne.n	8003e2c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	480c      	ldr	r0, [pc, #48]	; (8003e34 <FillBuffer+0x68>)
 8003e04:	f001 fab8 	bl	8005378 <HAL_DMA2D_ConfigLayer>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10e      	bne.n	8003e2c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69f9      	ldr	r1, [r7, #28]
 8003e18:	4806      	ldr	r0, [pc, #24]	; (8003e34 <FillBuffer+0x68>)
 8003e1a:	f001 f998 	bl	800514e <HAL_DMA2D_Start>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003e24:	210a      	movs	r1, #10
 8003e26:	4803      	ldr	r0, [pc, #12]	; (8003e34 <FillBuffer+0x68>)
 8003e28:	f001 f9bc 	bl	80051a4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000ab8 	.word	0x20000ab8
 8003e38:	4002b000 	.word	0x4002b000

08003e3c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <BSP_SDRAM_Init+0xb0>)
 8003e44:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003e4c:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e4e:	2207      	movs	r2, #7
 8003e50:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e54:	2204      	movs	r2, #4
 8003e56:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e60:	2202      	movs	r2, #2
 8003e62:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e66:	2202      	movs	r2, #2
 8003e68:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003e6a:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e7e:	2204      	movs	r2, #4
 8003e80:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003e82:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e84:	2210      	movs	r2, #16
 8003e86:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e90:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003e94:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003eb6:	f000 f87f 	bl	8003fb8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003eba:	490d      	ldr	r1, [pc, #52]	; (8003ef0 <BSP_SDRAM_Init+0xb4>)
 8003ebc:	480a      	ldr	r0, [pc, #40]	; (8003ee8 <BSP_SDRAM_Init+0xac>)
 8003ebe:	f003 fb11 	bl	80074e4 <HAL_SDRAM_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <BSP_SDRAM_Init+0xb8>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ed0:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <BSP_SDRAM_Init+0xb8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003ed6:	f240 506a 	movw	r0, #1386	; 0x56a
 8003eda:	f000 f80d 	bl	8003ef8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <BSP_SDRAM_Init+0xb8>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000b48 	.word	0x20000b48
 8003eec:	a0000140 	.word	0xa0000140
 8003ef0:	20000b7c 	.word	0x20000b7c
 8003ef4:	20000510 	.word	0x20000510

08003ef8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f0a:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f20:	4923      	ldr	r1, [pc, #140]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f22:	4824      	ldr	r0, [pc, #144]	; (8003fb4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f24:	f003 fb12 	bl	800754c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f000 f9c3 	bl	80042b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f30:	2202      	movs	r2, #2
 8003f32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f36:	2208      	movs	r2, #8
 8003f38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f4a:	4919      	ldr	r1, [pc, #100]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f4c:	4819      	ldr	r0, [pc, #100]	; (8003fb4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f4e:	f003 fafd 	bl	800754c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f54:	2203      	movs	r2, #3
 8003f56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f60:	2204      	movs	r2, #4
 8003f62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6e:	4910      	ldr	r1, [pc, #64]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f70:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f72:	f003 faeb 	bl	800754c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003f76:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003f7a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f7e:	2204      	movs	r2, #4
 8003f80:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f84:	2208      	movs	r2, #8
 8003f86:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f92:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f98:	4905      	ldr	r1, [pc, #20]	; (8003fb0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f9a:	4806      	ldr	r0, [pc, #24]	; (8003fb4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f9c:	f003 fad6 	bl	800754c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4804      	ldr	r0, [pc, #16]	; (8003fb4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fa4:	f003 fb07 	bl	80075b6 <HAL_SDRAM_ProgramRefreshRate>
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000b98 	.word	0x20000b98
 8003fb4:	20000b48 	.word	0x20000b48

08003fb8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b090      	sub	sp, #64	; 0x40
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80ec 	beq.w	80041a2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	4b77      	ldr	r3, [pc, #476]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4a76      	ldr	r2, [pc, #472]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6393      	str	r3, [r2, #56]	; 0x38
 8003fda:	4b74      	ldr	r3, [pc, #464]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	4b70      	ldr	r3, [pc, #448]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a6f      	ldr	r2, [pc, #444]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b6d      	ldr	r3, [pc, #436]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	4b69      	ldr	r3, [pc, #420]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a68      	ldr	r2, [pc, #416]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	623b      	str	r3, [r7, #32]
 800401c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	4b62      	ldr	r3, [pc, #392]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a61      	ldr	r2, [pc, #388]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a5a      	ldr	r2, [pc, #360]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b58      	ldr	r3, [pc, #352]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	4b54      	ldr	r3, [pc, #336]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a53      	ldr	r2, [pc, #332]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004060:	f043 0310 	orr.w	r3, r3, #16
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 800407c:	f043 0320 	orr.w	r3, r3, #32
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4b46      	ldr	r3, [pc, #280]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a45      	ldr	r2, [pc, #276]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 8004098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b43      	ldr	r3, [pc, #268]	; (80041ac <BSP_SDRAM_MspInit+0x1f4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80040aa:	2302      	movs	r3, #2
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80040ae:	2302      	movs	r3, #2
 80040b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80040b6:	230c      	movs	r3, #12
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80040ba:	2360      	movs	r3, #96	; 0x60
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80040be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c2:	4619      	mov	r1, r3
 80040c4:	483a      	ldr	r0, [pc, #232]	; (80041b0 <BSP_SDRAM_MspInit+0x1f8>)
 80040c6:	f001 fa85 	bl	80055d4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80040ca:	2301      	movs	r3, #1
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80040ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d2:	4619      	mov	r1, r3
 80040d4:	4837      	ldr	r0, [pc, #220]	; (80041b4 <BSP_SDRAM_MspInit+0x1fc>)
 80040d6:	f001 fa7d 	bl	80055d4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80040da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80040e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e4:	4619      	mov	r1, r3
 80040e6:	4834      	ldr	r0, [pc, #208]	; (80041b8 <BSP_SDRAM_MspInit+0x200>)
 80040e8:	f001 fa74 	bl	80055d4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80040ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80040f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f6:	4619      	mov	r1, r3
 80040f8:	4830      	ldr	r0, [pc, #192]	; (80041bc <BSP_SDRAM_MspInit+0x204>)
 80040fa:	f001 fa6b 	bl	80055d4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80040fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004108:	4619      	mov	r1, r3
 800410a:	482d      	ldr	r0, [pc, #180]	; (80041c0 <BSP_SDRAM_MspInit+0x208>)
 800410c:	f001 fa62 	bl	80055d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004110:	f248 1333 	movw	r3, #33075	; 0x8133
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411a:	4619      	mov	r1, r3
 800411c:	4829      	ldr	r0, [pc, #164]	; (80041c4 <BSP_SDRAM_MspInit+0x20c>)
 800411e:	f001 fa59 	bl	80055d4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004134:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800413c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004144:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004148:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800414c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004150:	2200      	movs	r2, #0
 8004152:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800415a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 800415e:	2200      	movs	r2, #0
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004164:	2203      	movs	r2, #3
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 800416a:	2200      	movs	r2, #0
 800416c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <BSP_SDRAM_MspInit+0x214>)
 8004178:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004186:	4810      	ldr	r0, [pc, #64]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 8004188:	f000 fe88 	bl	8004e9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800418c:	480e      	ldr	r0, [pc, #56]	; (80041c8 <BSP_SDRAM_MspInit+0x210>)
 800418e:	f000 fdd7 	bl	8004d40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004192:	2200      	movs	r2, #0
 8004194:	210f      	movs	r1, #15
 8004196:	2038      	movs	r0, #56	; 0x38
 8004198:	f000 fd9b 	bl	8004cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800419c:	2038      	movs	r0, #56	; 0x38
 800419e:	f000 fdb4 	bl	8004d0a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80041a2:	bf00      	nop
 80041a4:	3740      	adds	r7, #64	; 0x40
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020800 	.word	0x40020800
 80041b8:	40020c00 	.word	0x40020c00
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40021400 	.word	0x40021400
 80041c4:	40021800 	.word	0x40021800
 80041c8:	20000ba8 	.word	0x20000ba8
 80041cc:	40026410 	.word	0x40026410

080041d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <HAL_Init+0x40>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <HAL_Init+0x40>)
 80041da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_Init+0x40>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0a      	ldr	r2, [pc, #40]	; (8004210 <HAL_Init+0x40>)
 80041e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_Init+0x40>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_Init+0x40>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041f8:	2003      	movs	r0, #3
 80041fa:	f000 fd5f 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041fe:	200f      	movs	r0, #15
 8004200:	f000 f808 	bl	8004214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004204:	f7fe f816 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023c00 	.word	0x40023c00

08004214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_InitTick+0x54>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <HAL_InitTick+0x58>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800422a:	fbb3 f3f1 	udiv	r3, r3, r1
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fd77 	bl	8004d26 <HAL_SYSTICK_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e00e      	b.n	8004260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b0f      	cmp	r3, #15
 8004246:	d80a      	bhi.n	800425e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004248:	2200      	movs	r2, #0
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	f000 fd3f 	bl	8004cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004254:	4a06      	ldr	r2, [pc, #24]	; (8004270 <HAL_InitTick+0x5c>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200004c0 	.word	0x200004c0
 800426c:	20000518 	.word	0x20000518
 8004270:	20000514 	.word	0x20000514

08004274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_IncTick+0x20>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_IncTick+0x24>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4413      	add	r3, r2
 8004284:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_IncTick+0x24>)
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000518 	.word	0x20000518
 8004298:	20000c08 	.word	0x20000c08

0800429c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return uwTick;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_GetTick+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000c08 	.word	0x20000c08

080042b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042bc:	f7ff ffee 	bl	800429c <HAL_GetTick>
 80042c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d005      	beq.n	80042da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_Delay+0x44>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042da:	bf00      	nop
 80042dc:	f7ff ffde 	bl	800429c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d8f7      	bhi.n	80042dc <HAL_Delay+0x28>
  {
  }
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000518 	.word	0x20000518

080042fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e033      	b.n	800437a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd ffb2 	bl	8002284 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d118      	bne.n	800436c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004342:	f023 0302 	bic.w	r3, r3, #2
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fae8 	bl	8004924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	f043 0201 	orr.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
 800436a:	e001      	b.n	8004370 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADC_Start+0x1a>
 800439a:	2302      	movs	r3, #2
 800439c:	e0b2      	b.n	8004504 <HAL_ADC_Start+0x180>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d018      	beq.n	80043e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043c4:	4b52      	ldr	r3, [pc, #328]	; (8004510 <HAL_ADC_Start+0x18c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_ADC_Start+0x190>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0c9a      	lsrs	r2, r3, #18
 80043d0:	4613      	mov	r3, r2
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4413      	add	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043d8:	e002      	b.n	80043e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f9      	bne.n	80043da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d17a      	bne.n	80044ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800441e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004432:	d106      	bne.n	8004442 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	f023 0206 	bic.w	r2, r3, #6
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
 8004440:	e002      	b.n	8004448 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004450:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_ADC_Start+0x194>)
 8004452:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800445c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2b00      	cmp	r3, #0
 8004468:	d12a      	bne.n	80044c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HAL_ADC_Start+0x198>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d015      	beq.n	80044a0 <HAL_ADC_Start+0x11c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_ADC_Start+0x19c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d105      	bne.n	800448a <HAL_ADC_Start+0x106>
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <HAL_ADC_Start+0x194>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_ADC_Start+0x1a0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d136      	bne.n	8004502 <HAL_ADC_Start+0x17e>
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_ADC_Start+0x194>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d130      	bne.n	8004502 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d129      	bne.n	8004502 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	e020      	b.n	8004502 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <HAL_ADC_Start+0x198>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d11b      	bne.n	8004502 <HAL_ADC_Start+0x17e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d114      	bne.n	8004502 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	e00b      	b.n	8004502 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0210 	orr.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	200004c0 	.word	0x200004c0
 8004514:	431bde83 	.word	0x431bde83
 8004518:	40012300 	.word	0x40012300
 800451c:	40012000 	.word	0x40012000
 8004520:	40012100 	.word	0x40012100
 8004524:	40012200 	.word	0x40012200

08004528 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_ADC_Stop+0x16>
 800453a:	2302      	movs	r3, #2
 800453c:	e021      	b.n	8004582 <HAL_ADC_Stop+0x5a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d113      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	d10b      	bne.n	80045d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e063      	b.n	800469c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80045d4:	f7ff fe62 	bl	800429c <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045da:	e021      	b.n	8004620 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d01d      	beq.n	8004620 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_ADC_PollForConversion+0x6c>
 80045ea:	f7ff fe57 	bl	800429c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d212      	bcs.n	8004620 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d00b      	beq.n	8004620 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0204 	orr.w	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e03d      	b.n	800469c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d1d6      	bne.n	80045dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0212 	mvn.w	r2, #18
 8004636:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d123      	bne.n	800469a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d11f      	bne.n	800469a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004664:	2b00      	cmp	r3, #0
 8004666:	d006      	beq.n	8004676 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d111      	bne.n	800469a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e113      	b.n	8004904 <HAL_ADC_ConfigChannel+0x244>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	d925      	bls.n	8004738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68d9      	ldr	r1, [r3, #12]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	3b1e      	subs	r3, #30
 8004702:	2207      	movs	r2, #7
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43da      	mvns	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	400a      	ands	r2, r1
 8004710:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68d9      	ldr	r1, [r3, #12]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	4603      	mov	r3, r0
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4403      	add	r3, r0
 800472a:	3b1e      	subs	r3, #30
 800472c:	409a      	lsls	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	60da      	str	r2, [r3, #12]
 8004736:	e022      	b.n	800477e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6919      	ldr	r1, [r3, #16]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	2207      	movs	r2, #7
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	400a      	ands	r2, r1
 800475a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4618      	mov	r0, r3
 800476e:	4603      	mov	r3, r0
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4403      	add	r3, r0
 8004774:	409a      	lsls	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d824      	bhi.n	80047d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	3b05      	subs	r3, #5
 8004798:	221f      	movs	r2, #31
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	400a      	ands	r2, r1
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	4618      	mov	r0, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	3b05      	subs	r3, #5
 80047c2:	fa00 f203 	lsl.w	r2, r0, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	635a      	str	r2, [r3, #52]	; 0x34
 80047ce:	e04c      	b.n	800486a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d824      	bhi.n	8004822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b23      	subs	r3, #35	; 0x23
 80047ea:	221f      	movs	r2, #31
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43da      	mvns	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	400a      	ands	r2, r1
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	4618      	mov	r0, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	3b23      	subs	r3, #35	; 0x23
 8004814:	fa00 f203 	lsl.w	r2, r0, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
 8004820:	e023      	b.n	800486a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	3b41      	subs	r3, #65	; 0x41
 8004834:	221f      	movs	r2, #31
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	400a      	ands	r2, r1
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	4618      	mov	r0, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	3b41      	subs	r3, #65	; 0x41
 800485e:	fa00 f203 	lsl.w	r2, r0, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800486a:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_ADC_ConfigChannel+0x250>)
 800486c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a28      	ldr	r2, [pc, #160]	; (8004914 <HAL_ADC_ConfigChannel+0x254>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10f      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x1d8>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b12      	cmp	r3, #18
 800487e:	d10b      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <HAL_ADC_ConfigChannel+0x254>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d12b      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x23a>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_ADC_ConfigChannel+0x258>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <HAL_ADC_ConfigChannel+0x1f4>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b11      	cmp	r3, #17
 80048b2:	d122      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <HAL_ADC_ConfigChannel+0x258>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d111      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048d6:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_ADC_ConfigChannel+0x25c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_ADC_ConfigChannel+0x260>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	0c9a      	lsrs	r2, r3, #18
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048ec:	e002      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f9      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40012300 	.word	0x40012300
 8004914:	40012000 	.word	0x40012000
 8004918:	10000012 	.word	0x10000012
 800491c:	200004c0 	.word	0x200004c0
 8004920:	431bde83 	.word	0x431bde83

08004924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800492c:	4b79      	ldr	r3, [pc, #484]	; (8004b14 <ADC_Init+0x1f0>)
 800492e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	021a      	lsls	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800497c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	4a58      	ldr	r2, [pc, #352]	; (8004b18 <ADC_Init+0x1f4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d022      	beq.n	8004a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6899      	ldr	r1, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6899      	ldr	r1, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	e00f      	b.n	8004a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0202 	bic.w	r2, r2, #2
 8004a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7e1b      	ldrb	r3, [r3, #24]
 8004a3c:	005a      	lsls	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01b      	beq.n	8004a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	035a      	lsls	r2, r3, #13
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	e007      	b.n	8004a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	051a      	lsls	r2, r3, #20
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6899      	ldr	r1, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ada:	025a      	lsls	r2, r3, #9
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6899      	ldr	r1, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	029a      	lsls	r2, r3, #10
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40012300 	.word	0x40012300
 8004b18:	0f000001 	.word	0x0f000001

08004b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <__NVIC_SetPriorityGrouping+0x44>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b4e:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <__NVIC_SetPriorityGrouping+0x44>)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	60d3      	str	r3, [r2, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <__NVIC_GetPriorityGrouping+0x18>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	f003 0307 	and.w	r3, r3, #7
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db0b      	blt.n	8004baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <__NVIC_EnableIRQ+0x38>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000e100 	.word	0xe000e100

08004bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db0a      	blt.n	8004be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	490c      	ldr	r1, [pc, #48]	; (8004c08 <__NVIC_SetPriority+0x4c>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	440b      	add	r3, r1
 8004be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be4:	e00a      	b.n	8004bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4908      	ldr	r1, [pc, #32]	; (8004c0c <__NVIC_SetPriority+0x50>)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3b04      	subs	r3, #4
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	761a      	strb	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000e100 	.word	0xe000e100
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f1c3 0307 	rsb	r3, r3, #7
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf28      	it	cs
 8004c2e:	2304      	movcs	r3, #4
 8004c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d902      	bls.n	8004c40 <NVIC_EncodePriority+0x30>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3b03      	subs	r3, #3
 8004c3e:	e000      	b.n	8004c42 <NVIC_EncodePriority+0x32>
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	401a      	ands	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c58:	f04f 31ff 	mov.w	r1, #4294967295
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	43d9      	mvns	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	4313      	orrs	r3, r2
         );
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00f      	b.n	8004cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <SysTick_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c96:	210f      	movs	r1, #15
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f7ff ff8e 	bl	8004bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff29 	bl	8004b1c <__NVIC_SetPriorityGrouping>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce4:	f7ff ff3e 	bl	8004b64 <__NVIC_GetPriorityGrouping>
 8004ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7ff ff8e 	bl	8004c10 <NVIC_EncodePriority>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff5d 	bl	8004bbc <__NVIC_SetPriority>
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff31 	bl	8004b80 <__NVIC_EnableIRQ>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffa2 	bl	8004c78 <SysTick_Config>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7ff faa6 	bl	800429c <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e099      	b.n	8004e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d7c:	e00f      	b.n	8004d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7e:	f7ff fa8d 	bl	800429c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d908      	bls.n	8004d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e078      	b.n	8004e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e8      	bne.n	8004d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <HAL_DMA_Init+0x158>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d107      	bne.n	8004e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	4313      	orrs	r3, r2
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d117      	bne.n	8004e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00e      	beq.n	8004e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8bd 	bl	8004fc4 <DMA_CheckFifoParam>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2240      	movs	r2, #64	; 0x40
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e016      	b.n	8004e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f874 	bl	8004f58 <DMA_CalcBaseAndBitshift>
 8004e70:	4603      	mov	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	223f      	movs	r2, #63	; 0x3f
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	f010803f 	.word	0xf010803f

08004e9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e050      	b.n	8004f50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d101      	bne.n	8004ebe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e048      	b.n	8004f50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f82a 	bl	8004f58 <DMA_CalcBaseAndBitshift>
 8004f04:	4603      	mov	r3, r0
 8004f06:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	223f      	movs	r2, #63	; 0x3f
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	3b10      	subs	r3, #16
 8004f68:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <DMA_CalcBaseAndBitshift+0x64>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f72:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d909      	bls.n	8004f9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58
 8004f98:	e007      	b.n	8004faa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	aaaaaaab 	.word	0xaaaaaaab
 8004fc0:	0800cc1c 	.word	0x0800cc1c

08004fc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11f      	bne.n	800501e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d856      	bhi.n	8005092 <DMA_CheckFifoParam+0xce>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <DMA_CheckFifoParam+0x28>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08004ffd 	.word	0x08004ffd
 8004ff0:	0800500f 	.word	0x0800500f
 8004ff4:	08004ffd 	.word	0x08004ffd
 8004ff8:	08005093 	.word	0x08005093
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d046      	beq.n	8005096 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500c:	e043      	b.n	8005096 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005016:	d140      	bne.n	800509a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800501c:	e03d      	b.n	800509a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	d121      	bne.n	800506c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d837      	bhi.n	800509e <DMA_CheckFifoParam+0xda>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <DMA_CheckFifoParam+0x70>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005045 	.word	0x08005045
 8005038:	0800504b 	.word	0x0800504b
 800503c:	08005045 	.word	0x08005045
 8005040:	0800505d 	.word	0x0800505d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e030      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d025      	beq.n	80050a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505a:	e022      	b.n	80050a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005064:	d11f      	bne.n	80050a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800506a:	e01c      	b.n	80050a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d903      	bls.n	800507a <DMA_CheckFifoParam+0xb6>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d003      	beq.n	8005080 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005078:	e018      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      break;
 800507e:	e015      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00e      	beq.n	80050aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	e00b      	b.n	80050aa <DMA_CheckFifoParam+0xe6>
      break;
 8005092:	bf00      	nop
 8005094:	e00a      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 8005096:	bf00      	nop
 8005098:	e008      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 800509a:	bf00      	nop
 800509c:	e006      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 800509e:	bf00      	nop
 80050a0:	e004      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;   
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <DMA_CheckFifoParam+0xe8>
      break;
 80050aa:	bf00      	nop
    }
  } 
  
  return status; 
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop

080050bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e03b      	b.n	8005146 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fd f942 	bl	800236c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	f023 0107 	bic.w	r1, r3, #7
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005126:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68d1      	ldr	r1, [r2, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	430b      	orrs	r3, r1
 8005134:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af02      	add	r7, sp, #8
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_DMA2D_Start+0x1c>
 8005166:	2302      	movs	r3, #2
 8005168:	e018      	b.n	800519c <HAL_DMA2D_Start+0x4e>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f989 	bl	800549c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d056      	beq.n	800526e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051c0:	f7ff f86c 	bl	800429c <HAL_GetTick>
 80051c4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051c6:	e04b      	b.n	8005260 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d023      	beq.n	8005222 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2221      	movs	r2, #33	; 0x21
 800520c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2204      	movs	r2, #4
 8005212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0a5      	b.n	800536e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d01a      	beq.n	8005260 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7ff f837 	bl	800429c <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <HAL_DMA2D_PollForTransfer+0x9c>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10f      	bne.n	8005260 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2203      	movs	r2, #3
 8005250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e086      	b.n	800536e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ac      	beq.n	80051c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d061      	beq.n	8005354 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005290:	f7ff f804 	bl	800429c <HAL_GetTick>
 8005294:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005296:	e056      	b.n	8005346 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d02e      	beq.n	8005308 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	f043 0204 	orr.w	r2, r3, #4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	f043 0202 	orr.w	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2229      	movs	r2, #41	; 0x29
 80052f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2204      	movs	r2, #4
 80052f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e032      	b.n	800536e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d01a      	beq.n	8005346 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fe ffc4 	bl	800429c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <HAL_DMA2D_PollForTransfer+0x182>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2203      	movs	r2, #3
 8005336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e013      	b.n	800536e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0a1      	beq.n	8005298 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2212      	movs	r2, #18
 800535a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_DMA2D_ConfigLayer+0x20>
 8005394:	2302      	movs	r3, #2
 8005396:	e079      	b.n	800548c <HAL_DMA2D_ConfigLayer+0x114>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	3318      	adds	r3, #24
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053c2:	4b35      	ldr	r3, [pc, #212]	; (8005498 <HAL_DMA2D_ConfigLayer+0x120>)
 80053c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b0a      	cmp	r3, #10
 80053cc:	d003      	beq.n	80053d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b09      	cmp	r3, #9
 80053d4:	d107      	bne.n	80053e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e005      	b.n	80053f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d120      	bne.n	800543a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	43db      	mvns	r3, r3
 8005402:	ea02 0103 	and.w	r1, r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	430a      	orrs	r2, r1
 800540e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b0a      	cmp	r3, #10
 8005420:	d003      	beq.n	800542a <HAL_DMA2D_ConfigLayer+0xb2>
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b09      	cmp	r3, #9
 8005428:	d127      	bne.n	800547a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
 8005438:	e01f      	b.n	800547a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	43db      	mvns	r3, r3
 8005444:	ea02 0103 	and.w	r1, r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	430a      	orrs	r2, r1
 8005450:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b0a      	cmp	r3, #10
 8005462:	d003      	beq.n	800546c <HAL_DMA2D_ConfigLayer+0xf4>
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b09      	cmp	r3, #9
 800546a:	d106      	bne.n	800547a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005478:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	ff03000f 	.word	0xff03000f

0800549c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800549c:	b480      	push	{r7}
 800549e:	b08b      	sub	sp, #44	; 0x2c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	041a      	lsls	r2, r3, #16
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d4:	d174      	bne.n	80055c0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054e4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054ec:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	431a      	orrs	r2, r3
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	4313      	orrs	r3, r2
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
 800550c:	e053      	b.n	80055b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4313      	orrs	r3, r2
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
 8005522:	e048      	b.n	80055b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d111      	bne.n	8005550 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	0cdb      	lsrs	r3, r3, #19
 8005530:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	0a9b      	lsrs	r3, r3, #10
 8005536:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	08db      	lsrs	r3, r3, #3
 800553c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	02db      	lsls	r3, r3, #11
 8005546:	4313      	orrs	r3, r2
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
 800554e:	e032      	b.n	80055b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d117      	bne.n	8005588 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	0fdb      	lsrs	r3, r3, #31
 800555c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	0cdb      	lsrs	r3, r3, #19
 8005562:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	0adb      	lsrs	r3, r3, #11
 8005568:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	431a      	orrs	r2, r3
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	03db      	lsls	r3, r3, #15
 800557e:	4313      	orrs	r3, r2
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e016      	b.n	80055b6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	0f1b      	lsrs	r3, r3, #28
 800558c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	0d1b      	lsrs	r3, r3, #20
 8005592:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	0b1b      	lsrs	r3, r3, #12
 8005598:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	011a      	lsls	r2, r3, #4
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	431a      	orrs	r2, r3
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	4313      	orrs	r3, r2
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80055be:	e003      	b.n	80055c8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	60da      	str	r2, [r3, #12]
}
 80055c8:	bf00      	nop
 80055ca:	372c      	adds	r7, #44	; 0x2c
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e177      	b.n	80058e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f0:	2201      	movs	r2, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 8166 	bne.w	80058da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d005      	beq.n	8005626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005622:	2b02      	cmp	r3, #2
 8005624:	d130      	bne.n	8005688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 0201 	and.w	r2, r3, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d017      	beq.n	80056c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d123      	bne.n	8005718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	220f      	movs	r2, #15
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	08da      	lsrs	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3208      	adds	r2, #8
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80c0 	beq.w	80058da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <HAL_GPIO_Init+0x324>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005776:	4a61      	ldr	r2, [pc, #388]	; (80058fc <HAL_GPIO_Init+0x328>)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	220f      	movs	r2, #15
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_GPIO_Init+0x32c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d037      	beq.n	8005812 <HAL_GPIO_Init+0x23e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a57      	ldr	r2, [pc, #348]	; (8005904 <HAL_GPIO_Init+0x330>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d031      	beq.n	800580e <HAL_GPIO_Init+0x23a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_GPIO_Init+0x334>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d02b      	beq.n	800580a <HAL_GPIO_Init+0x236>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a55      	ldr	r2, [pc, #340]	; (800590c <HAL_GPIO_Init+0x338>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d025      	beq.n	8005806 <HAL_GPIO_Init+0x232>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a54      	ldr	r2, [pc, #336]	; (8005910 <HAL_GPIO_Init+0x33c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01f      	beq.n	8005802 <HAL_GPIO_Init+0x22e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a53      	ldr	r2, [pc, #332]	; (8005914 <HAL_GPIO_Init+0x340>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d019      	beq.n	80057fe <HAL_GPIO_Init+0x22a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_GPIO_Init+0x344>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_GPIO_Init+0x226>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a51      	ldr	r2, [pc, #324]	; (800591c <HAL_GPIO_Init+0x348>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00d      	beq.n	80057f6 <HAL_GPIO_Init+0x222>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a50      	ldr	r2, [pc, #320]	; (8005920 <HAL_GPIO_Init+0x34c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d007      	beq.n	80057f2 <HAL_GPIO_Init+0x21e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a4f      	ldr	r2, [pc, #316]	; (8005924 <HAL_GPIO_Init+0x350>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_GPIO_Init+0x21a>
 80057ea:	2309      	movs	r3, #9
 80057ec:	e012      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057ee:	230a      	movs	r3, #10
 80057f0:	e010      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057f2:	2308      	movs	r3, #8
 80057f4:	e00e      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057f6:	2307      	movs	r3, #7
 80057f8:	e00c      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057fa:	2306      	movs	r3, #6
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057fe:	2305      	movs	r3, #5
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x240>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x240>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005812:	2300      	movs	r3, #0
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f002 0203 	and.w	r2, r2, #3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005824:	4935      	ldr	r1, [pc, #212]	; (80058fc <HAL_GPIO_Init+0x328>)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005856:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <HAL_GPIO_Init+0x354>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005880:	4a29      	ldr	r2, [pc, #164]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005886:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	f67f ae84 	bls.w	80055f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40013800 	.word	0x40013800
 8005900:	40020000 	.word	0x40020000
 8005904:	40020400 	.word	0x40020400
 8005908:	40020800 	.word	0x40020800
 800590c:	40020c00 	.word	0x40020c00
 8005910:	40021000 	.word	0x40021000
 8005914:	40021400 	.word	0x40021400
 8005918:	40021800 	.word	0x40021800
 800591c:	40021c00 	.word	0x40021c00
 8005920:	40022000 	.word	0x40022000
 8005924:	40022400 	.word	0x40022400
 8005928:	40013c00 	.word	0x40013c00

0800592c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e0d9      	b.n	8005afc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005948:	2201      	movs	r2, #1
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	429a      	cmp	r2, r3
 8005960:	f040 80c9 	bne.w	8005af6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005964:	4a6b      	ldr	r2, [pc, #428]	; (8005b14 <HAL_GPIO_DeInit+0x1e8>)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	089b      	lsrs	r3, r3, #2
 800596a:	3302      	adds	r3, #2
 800596c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	220f      	movs	r2, #15
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	4013      	ands	r3, r2
 8005984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_GPIO_DeInit+0x1ec>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d037      	beq.n	80059fe <HAL_GPIO_DeInit+0xd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a62      	ldr	r2, [pc, #392]	; (8005b1c <HAL_GPIO_DeInit+0x1f0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <HAL_GPIO_DeInit+0xce>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a61      	ldr	r2, [pc, #388]	; (8005b20 <HAL_GPIO_DeInit+0x1f4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d02b      	beq.n	80059f6 <HAL_GPIO_DeInit+0xca>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a60      	ldr	r2, [pc, #384]	; (8005b24 <HAL_GPIO_DeInit+0x1f8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d025      	beq.n	80059f2 <HAL_GPIO_DeInit+0xc6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_GPIO_DeInit+0x1fc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01f      	beq.n	80059ee <HAL_GPIO_DeInit+0xc2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a5e      	ldr	r2, [pc, #376]	; (8005b2c <HAL_GPIO_DeInit+0x200>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d019      	beq.n	80059ea <HAL_GPIO_DeInit+0xbe>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a5d      	ldr	r2, [pc, #372]	; (8005b30 <HAL_GPIO_DeInit+0x204>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_GPIO_DeInit+0xba>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a5c      	ldr	r2, [pc, #368]	; (8005b34 <HAL_GPIO_DeInit+0x208>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00d      	beq.n	80059e2 <HAL_GPIO_DeInit+0xb6>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a5b      	ldr	r2, [pc, #364]	; (8005b38 <HAL_GPIO_DeInit+0x20c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <HAL_GPIO_DeInit+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a5a      	ldr	r2, [pc, #360]	; (8005b3c <HAL_GPIO_DeInit+0x210>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_GPIO_DeInit+0xae>
 80059d6:	2309      	movs	r3, #9
 80059d8:	e012      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059da:	230a      	movs	r3, #10
 80059dc:	e010      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059de:	2308      	movs	r3, #8
 80059e0:	e00e      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059e2:	2307      	movs	r3, #7
 80059e4:	e00c      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059e6:	2306      	movs	r3, #6
 80059e8:	e00a      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059ea:	2305      	movs	r3, #5
 80059ec:	e008      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059ee:	2304      	movs	r3, #4
 80059f0:	e006      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059f2:	2303      	movs	r3, #3
 80059f4:	e004      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e002      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_GPIO_DeInit+0xd4>
 80059fe:	2300      	movs	r3, #0
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	f002 0203 	and.w	r2, r2, #3
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	4093      	lsls	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d132      	bne.n	8005a76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	4949      	ldr	r1, [pc, #292]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a1e:	4b48      	ldr	r3, [pc, #288]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	43db      	mvns	r3, r3
 8005a26:	4946      	ldr	r1, [pc, #280]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a2c:	4b44      	ldr	r3, [pc, #272]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	4942      	ldr	r1, [pc, #264]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a3a:	4b41      	ldr	r3, [pc, #260]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	493f      	ldr	r1, [pc, #252]	; (8005b40 <HAL_GPIO_DeInit+0x214>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	220f      	movs	r2, #15
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a58:	4a2e      	ldr	r2, [pc, #184]	; (8005b14 <HAL_GPIO_DeInit+0x1e8>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	43da      	mvns	r2, r3
 8005a68:	482a      	ldr	r0, [pc, #168]	; (8005b14 <HAL_GPIO_DeInit+0x1e8>)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	089b      	lsrs	r3, r3, #2
 8005a6e:	400a      	ands	r2, r1
 8005a70:	3302      	adds	r3, #2
 8005a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2103      	movs	r1, #3
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	401a      	ands	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	08da      	lsrs	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3208      	adds	r2, #8
 8005a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	08d2      	lsrs	r2, r2, #3
 8005aac:	4019      	ands	r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3208      	adds	r2, #8
 8005ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	2103      	movs	r1, #3
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	401a      	ands	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2103      	movs	r1, #3
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	401a      	ands	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	3301      	adds	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	f67f af22 	bls.w	8005948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40013800 	.word	0x40013800
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	40020400 	.word	0x40020400
 8005b20:	40020800 	.word	0x40020800
 8005b24:	40020c00 	.word	0x40020c00
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40021400 	.word	0x40021400
 8005b30:	40021800 	.word	0x40021800
 8005b34:	40021c00 	.word	0x40021c00
 8005b38:	40022000 	.word	0x40022000
 8005b3c:	40022400 	.word	0x40022400
 8005b40:	40013c00 	.word	0x40013c00

08005b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
 8005b60:	e001      	b.n	8005b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
 8005b80:	4613      	mov	r3, r2
 8005b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b84:	787b      	ldrb	r3, [r7, #1]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b8a:	887a      	ldrh	r2, [r7, #2]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b90:	e003      	b.n	8005b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b92:	887b      	ldrh	r3, [r7, #2]
 8005b94:	041a      	lsls	r2, r3, #16
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	619a      	str	r2, [r3, #24]
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e12b      	b.n	8005e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fc fbee 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f001 f91c 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8005c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4a81      	ldr	r2, [pc, #516]	; (8005e1c <HAL_I2C_Init+0x274>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d807      	bhi.n	8005c2c <HAL_I2C_Init+0x84>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a80      	ldr	r2, [pc, #512]	; (8005e20 <HAL_I2C_Init+0x278>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	bf94      	ite	ls
 8005c24:	2301      	movls	r3, #1
 8005c26:	2300      	movhi	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e006      	b.n	8005c3a <HAL_I2C_Init+0x92>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4a7d      	ldr	r2, [pc, #500]	; (8005e24 <HAL_I2C_Init+0x27c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	bf94      	ite	ls
 8005c34:	2301      	movls	r3, #1
 8005c36:	2300      	movhi	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0e7      	b.n	8005e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a78      	ldr	r2, [pc, #480]	; (8005e28 <HAL_I2C_Init+0x280>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	0c9b      	lsrs	r3, r3, #18
 8005c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a6a      	ldr	r2, [pc, #424]	; (8005e1c <HAL_I2C_Init+0x274>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d802      	bhi.n	8005c7c <HAL_I2C_Init+0xd4>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	e009      	b.n	8005c90 <HAL_I2C_Init+0xe8>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	4a69      	ldr	r2, [pc, #420]	; (8005e2c <HAL_I2C_Init+0x284>)
 8005c88:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	3301      	adds	r3, #1
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	495c      	ldr	r1, [pc, #368]	; (8005e1c <HAL_I2C_Init+0x274>)
 8005cac:	428b      	cmp	r3, r1
 8005cae:	d819      	bhi.n	8005ce4 <HAL_I2C_Init+0x13c>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1e59      	subs	r1, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cbe:	1c59      	adds	r1, r3, #1
 8005cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cc4:	400b      	ands	r3, r1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_I2C_Init+0x138>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	1e59      	subs	r1, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cde:	e051      	b.n	8005d84 <HAL_I2C_Init+0x1dc>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	e04f      	b.n	8005d84 <HAL_I2C_Init+0x1dc>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d111      	bne.n	8005d10 <HAL_I2C_Init+0x168>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	440b      	add	r3, r1
 8005cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e012      	b.n	8005d36 <HAL_I2C_Init+0x18e>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1e58      	subs	r0, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	0099      	lsls	r1, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_Init+0x196>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e022      	b.n	8005d84 <HAL_I2C_Init+0x1dc>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10e      	bne.n	8005d64 <HAL_I2C_Init+0x1bc>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e58      	subs	r0, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	e00f      	b.n	8005d84 <HAL_I2C_Init+0x1dc>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1e58      	subs	r0, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	0099      	lsls	r1, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	6809      	ldr	r1, [r1, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6911      	ldr	r1, [r2, #16]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68d2      	ldr	r2, [r2, #12]
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	000186a0 	.word	0x000186a0
 8005e20:	001e847f 	.word	0x001e847f
 8005e24:	003d08ff 	.word	0x003d08ff
 8005e28:	431bde83 	.word	0x431bde83
 8005e2c:	10624dd3 	.word	0x10624dd3

08005e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d129      	bne.n	8005e9a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2224      	movs	r2, #36	; 0x24
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0210 	bic.w	r2, r2, #16
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d12a      	bne.n	8005f18 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2224      	movs	r2, #36	; 0x24
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ee2:	89fb      	ldrh	r3, [r7, #14]
 8005ee4:	f023 030f 	bic.w	r3, r3, #15
 8005ee8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	89fb      	ldrh	r3, [r7, #14]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	89fa      	ldrh	r2, [r7, #14]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e000      	b.n	8005f1a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0bf      	b.n	80060ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d106      	bne.n	8005f54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fc fa98 	bl	8002484 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6999      	ldr	r1, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6899      	ldr	r1, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	; (80060c4 <HAL_LTDC_Init+0x19c>)
 8005f9c:	400b      	ands	r3, r1
 8005f9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68d9      	ldr	r1, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b3e      	ldr	r3, [pc, #248]	; (80060c4 <HAL_LTDC_Init+0x19c>)
 8005fca:	400b      	ands	r3, r1
 8005fcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68d9      	ldr	r1, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1a      	ldr	r2, [r3, #32]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6919      	ldr	r1, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <HAL_LTDC_Init+0x19c>)
 8005ff8:	400b      	ands	r3, r1
 8005ffa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6919      	ldr	r1, [r3, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6959      	ldr	r1, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <HAL_LTDC_Init+0x19c>)
 8006026:	400b      	ands	r3, r1
 8006028:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6959      	ldr	r1, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0206 	orr.w	r2, r2, #6
 8006096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	f000f800 	.word	0xf000f800

080060c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_LTDC_ConfigLayer+0x1a>
 80060de:	2302      	movs	r3, #2
 80060e0:	e02c      	b.n	800613c <HAL_LTDC_ConfigLayer+0x74>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2134      	movs	r1, #52	; 0x34
 80060f8:	fb01 f303 	mul.w	r3, r1, r3
 80060fc:	4413      	add	r3, r2
 80060fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f83b 	bl	8006198 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2201      	movs	r2, #1
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bdb0      	pop	{r4, r5, r7, pc}

08006144 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_LTDC_EnableDither+0x16>
 8006156:	2302      	movs	r3, #2
 8006158:	e016      	b.n	8006188 <HAL_LTDC_EnableDither+0x44>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <HAL_LTDC_EnableDither+0x50>)
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <HAL_LTDC_EnableDither+0x50>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006174:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40016800 	.word	0x40016800

08006198 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006198:	b480      	push	{r7}
 800619a:	b089      	sub	sp, #36	; 0x24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	0c1b      	lsrs	r3, r3, #16
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	4413      	add	r3, r2
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	01db      	lsls	r3, r3, #7
 80061c4:	4413      	add	r3, r2
 80061c6:	3384      	adds	r3, #132	; 0x84
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	4611      	mov	r1, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	01d2      	lsls	r2, r2, #7
 80061d4:	440a      	add	r2, r1
 80061d6:	3284      	adds	r2, #132	; 0x84
 80061d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	440b      	add	r3, r1
 80061fe:	3384      	adds	r3, #132	; 0x84
 8006200:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006206:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006216:	4413      	add	r3, r2
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	01db      	lsls	r3, r3, #7
 8006226:	4413      	add	r3, r2
 8006228:	3384      	adds	r3, #132	; 0x84
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	4611      	mov	r1, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	01d2      	lsls	r2, r2, #7
 8006236:	440a      	add	r2, r1
 8006238:	3284      	adds	r2, #132	; 0x84
 800623a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800623e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624e:	4413      	add	r3, r2
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	440b      	add	r3, r1
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	4619      	mov	r1, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	01db      	lsls	r3, r3, #7
 8006272:	4413      	add	r3, r2
 8006274:	3384      	adds	r3, #132	; 0x84
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	4611      	mov	r1, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	01d2      	lsls	r2, r2, #7
 8006282:	440a      	add	r2, r1
 8006284:	3284      	adds	r2, #132	; 0x84
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4413      	add	r3, r2
 8006298:	3384      	adds	r3, #132	; 0x84
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	01db      	lsls	r3, r3, #7
 80062c8:	4413      	add	r3, r2
 80062ca:	3384      	adds	r3, #132	; 0x84
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	01db      	lsls	r3, r3, #7
 80062d8:	4413      	add	r3, r2
 80062da:	3384      	adds	r3, #132	; 0x84
 80062dc:	461a      	mov	r2, r3
 80062de:	2300      	movs	r3, #0
 80062e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062e8:	461a      	mov	r2, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4619      	mov	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	01db      	lsls	r3, r3, #7
 80062fc:	440b      	add	r3, r1
 80062fe:	3384      	adds	r3, #132	; 0x84
 8006300:	4619      	mov	r1, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	01db      	lsls	r3, r3, #7
 8006312:	4413      	add	r3, r2
 8006314:	3384      	adds	r3, #132	; 0x84
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	4611      	mov	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	01d2      	lsls	r2, r2, #7
 8006322:	440a      	add	r2, r1
 8006324:	3284      	adds	r2, #132	; 0x84
 8006326:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800632a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	01db      	lsls	r3, r3, #7
 8006336:	4413      	add	r3, r2
 8006338:	3384      	adds	r3, #132	; 0x84
 800633a:	461a      	mov	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	01db      	lsls	r3, r3, #7
 800634c:	4413      	add	r3, r2
 800634e:	3384      	adds	r3, #132	; 0x84
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	4611      	mov	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	01d2      	lsls	r2, r2, #7
 800635c:	440a      	add	r2, r1
 800635e:	3284      	adds	r2, #132	; 0x84
 8006360:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006364:	f023 0307 	bic.w	r3, r3, #7
 8006368:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6809      	ldr	r1, [r1, #0]
 8006376:	4608      	mov	r0, r1
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	01c9      	lsls	r1, r1, #7
 800637c:	4401      	add	r1, r0
 800637e:	3184      	adds	r1, #132	; 0x84
 8006380:	4313      	orrs	r3, r2
 8006382:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	3384      	adds	r3, #132	; 0x84
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4413      	add	r3, r2
 80063a0:	3384      	adds	r3, #132	; 0x84
 80063a2:	461a      	mov	r2, r3
 80063a4:	2300      	movs	r3, #0
 80063a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	01db      	lsls	r3, r3, #7
 80063b2:	4413      	add	r3, r2
 80063b4:	3384      	adds	r3, #132	; 0x84
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80063c6:	2304      	movs	r3, #4
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	e01b      	b.n	8006404 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d102      	bne.n	80063da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80063d4:	2303      	movs	r3, #3
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e014      	b.n	8006404 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d00b      	beq.n	80063fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d007      	beq.n	80063fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d003      	beq.n	80063fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063f6:	2b07      	cmp	r3, #7
 80063f8:	d102      	bne.n	8006400 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80063fa:	2302      	movs	r3, #2
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	e001      	b.n	8006404 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	01db      	lsls	r3, r3, #7
 800640e:	4413      	add	r3, r2
 8006410:	3384      	adds	r3, #132	; 0x84
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	4611      	mov	r1, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	01d2      	lsls	r2, r2, #7
 800641e:	440a      	add	r2, r1
 8006420:	3284      	adds	r2, #132	; 0x84
 8006422:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006426:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6859      	ldr	r1, [r3, #4]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	1acb      	subs	r3, r1, r3
 800643e:	69f9      	ldr	r1, [r7, #28]
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	6809      	ldr	r1, [r1, #0]
 800644a:	4608      	mov	r0, r1
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	01c9      	lsls	r1, r1, #7
 8006450:	4401      	add	r1, r0
 8006452:	3184      	adds	r1, #132	; 0x84
 8006454:	4313      	orrs	r3, r2
 8006456:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	4413      	add	r3, r2
 8006464:	3384      	adds	r3, #132	; 0x84
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	4611      	mov	r1, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	01d2      	lsls	r2, r2, #7
 8006472:	440a      	add	r2, r1
 8006474:	3284      	adds	r2, #132	; 0x84
 8006476:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	01db      	lsls	r3, r3, #7
 800648a:	4413      	add	r3, r2
 800648c:	3384      	adds	r3, #132	; 0x84
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	01db      	lsls	r3, r3, #7
 80064a0:	4413      	add	r3, r2
 80064a2:	3384      	adds	r3, #132	; 0x84
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	4611      	mov	r1, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	01d2      	lsls	r2, r2, #7
 80064b0:	440a      	add	r2, r1
 80064b2:	3284      	adds	r2, #132	; 0x84
 80064b4:	f043 0301 	orr.w	r3, r3, #1
 80064b8:	6013      	str	r3, [r2, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3724      	adds	r7, #36	; 0x24
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
	...

080064c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	; 0x40
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_PWREx_EnableOverDrive+0x90>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <HAL_PWREx_EnableOverDrive+0x94>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064f4:	f7fd fed2 	bl	800429c <HAL_GetTick>
 80064f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064fa:	e009      	b.n	8006510 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064fc:	f7fd fece 	bl	800429c <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800650a:	d901      	bls.n	8006510 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e01f      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006510:	4b13      	ldr	r3, [pc, #76]	; (8006560 <HAL_PWREx_EnableOverDrive+0x98>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d1ee      	bne.n	80064fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800651e:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006520:	2201      	movs	r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006524:	f7fd feba 	bl	800429c <HAL_GetTick>
 8006528:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800652a:	e009      	b.n	8006540 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800652c:	f7fd feb6 	bl	800429c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653a:	d901      	bls.n	8006540 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e007      	b.n	8006550 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_PWREx_EnableOverDrive+0x98>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800654c:	d1ee      	bne.n	800652c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40023800 	.word	0x40023800
 800655c:	420e0040 	.word	0x420e0040
 8006560:	40007000 	.word	0x40007000
 8006564:	420e0044 	.word	0x420e0044

08006568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e267      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d075      	beq.n	8006672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006586:	4b88      	ldr	r3, [pc, #544]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 030c 	and.w	r3, r3, #12
 800658e:	2b04      	cmp	r3, #4
 8006590:	d00c      	beq.n	80065ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006592:	4b85      	ldr	r3, [pc, #532]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800659a:	2b08      	cmp	r3, #8
 800659c:	d112      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659e:	4b82      	ldr	r3, [pc, #520]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065aa:	d10b      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ac:	4b7e      	ldr	r3, [pc, #504]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d05b      	beq.n	8006670 <HAL_RCC_OscConfig+0x108>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d157      	bne.n	8006670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e242      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065cc:	d106      	bne.n	80065dc <HAL_RCC_OscConfig+0x74>
 80065ce:	4b76      	ldr	r3, [pc, #472]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a75      	ldr	r2, [pc, #468]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e01d      	b.n	8006618 <HAL_RCC_OscConfig+0xb0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0x98>
 80065e6:	4b70      	ldr	r3, [pc, #448]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6f      	ldr	r2, [pc, #444]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	4b6d      	ldr	r3, [pc, #436]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6c      	ldr	r2, [pc, #432]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0xb0>
 8006600:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a68      	ldr	r2, [pc, #416]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4b66      	ldr	r3, [pc, #408]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a65      	ldr	r2, [pc, #404]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d013      	beq.n	8006648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fd fe3c 	bl	800429c <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006628:	f7fd fe38 	bl	800429c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	; 0x64
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e207      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	4b5b      	ldr	r3, [pc, #364]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCC_OscConfig+0xc0>
 8006646:	e014      	b.n	8006672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006648:	f7fd fe28 	bl	800429c <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006650:	f7fd fe24 	bl	800429c <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	; 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e1f3      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006662:	4b51      	ldr	r3, [pc, #324]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0xe8>
 800666e:	e000      	b.n	8006672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d063      	beq.n	8006746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800667e:	4b4a      	ldr	r3, [pc, #296]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668a:	4b47      	ldr	r3, [pc, #284]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006692:	2b08      	cmp	r3, #8
 8006694:	d11c      	bne.n	80066d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006696:	4b44      	ldr	r3, [pc, #272]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d116      	bne.n	80066d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a2:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_RCC_OscConfig+0x152>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d001      	beq.n	80066ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e1c7      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ba:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4937      	ldr	r1, [pc, #220]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	e03a      	b.n	8006746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066d8:	4b34      	ldr	r3, [pc, #208]	; (80067ac <HAL_RCC_OscConfig+0x244>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066de:	f7fd fddd 	bl	800429c <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e6:	f7fd fdd9 	bl	800429c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e1a8      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f8:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d0f0      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006704:	4b28      	ldr	r3, [pc, #160]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	4925      	ldr	r1, [pc, #148]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 8006714:	4313      	orrs	r3, r2
 8006716:	600b      	str	r3, [r1, #0]
 8006718:	e015      	b.n	8006746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <HAL_RCC_OscConfig+0x244>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fd fdbc 	bl	800429c <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006728:	f7fd fdb8 	bl	800429c <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e187      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d036      	beq.n	80067c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <HAL_RCC_OscConfig+0x248>)
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006760:	f7fd fd9c 	bl	800429c <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006768:	f7fd fd98 	bl	800429c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e167      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <HAL_RCC_OscConfig+0x240>)
 800677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x200>
 8006786:	e01b      	b.n	80067c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_RCC_OscConfig+0x248>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800678e:	f7fd fd85 	bl	800429c <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006794:	e00e      	b.n	80067b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006796:	f7fd fd81 	bl	800429c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d907      	bls.n	80067b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e150      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
 80067a8:	40023800 	.word	0x40023800
 80067ac:	42470000 	.word	0x42470000
 80067b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b4:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80067b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ea      	bne.n	8006796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8097 	beq.w	80068fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067d2:	4b81      	ldr	r3, [pc, #516]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10f      	bne.n	80067fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	4b7d      	ldr	r3, [pc, #500]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	4a7c      	ldr	r2, [pc, #496]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80067e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6413      	str	r3, [r2, #64]	; 0x40
 80067ee:	4b7a      	ldr	r3, [pc, #488]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067fa:	2301      	movs	r3, #1
 80067fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fe:	4b77      	ldr	r3, [pc, #476]	; (80069dc <HAL_RCC_OscConfig+0x474>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006806:	2b00      	cmp	r3, #0
 8006808:	d118      	bne.n	800683c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800680a:	4b74      	ldr	r3, [pc, #464]	; (80069dc <HAL_RCC_OscConfig+0x474>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a73      	ldr	r2, [pc, #460]	; (80069dc <HAL_RCC_OscConfig+0x474>)
 8006810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006816:	f7fd fd41 	bl	800429c <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800681e:	f7fd fd3d 	bl	800429c <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e10c      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006830:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <HAL_RCC_OscConfig+0x474>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d106      	bne.n	8006852 <HAL_RCC_OscConfig+0x2ea>
 8006844:	4b64      	ldr	r3, [pc, #400]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	4a63      	ldr	r2, [pc, #396]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6713      	str	r3, [r2, #112]	; 0x70
 8006850:	e01c      	b.n	800688c <HAL_RCC_OscConfig+0x324>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b05      	cmp	r3, #5
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0x30c>
 800685a:	4b5f      	ldr	r3, [pc, #380]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	4a5e      	ldr	r2, [pc, #376]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006860:	f043 0304 	orr.w	r3, r3, #4
 8006864:	6713      	str	r3, [r2, #112]	; 0x70
 8006866:	4b5c      	ldr	r3, [pc, #368]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
 8006872:	e00b      	b.n	800688c <HAL_RCC_OscConfig+0x324>
 8006874:	4b58      	ldr	r3, [pc, #352]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	4a57      	ldr	r2, [pc, #348]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	6713      	str	r3, [r2, #112]	; 0x70
 8006880:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	4a54      	ldr	r2, [pc, #336]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006886:	f023 0304 	bic.w	r3, r3, #4
 800688a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d015      	beq.n	80068c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006894:	f7fd fd02 	bl	800429c <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689a:	e00a      	b.n	80068b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800689c:	f7fd fcfe 	bl	800429c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e0cb      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b2:	4b49      	ldr	r3, [pc, #292]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0ee      	beq.n	800689c <HAL_RCC_OscConfig+0x334>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c0:	f7fd fcec 	bl	800429c <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068c6:	e00a      	b.n	80068de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c8:	f7fd fce8 	bl	800429c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e0b5      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068de:	4b3e      	ldr	r3, [pc, #248]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ee      	bne.n	80068c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d105      	bne.n	80068fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f0:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	4a38      	ldr	r2, [pc, #224]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80068f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80a1 	beq.w	8006a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006906:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	2b08      	cmp	r3, #8
 8006910:	d05c      	beq.n	80069cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d141      	bne.n	800699e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800691a:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_RCC_OscConfig+0x478>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006920:	f7fd fcbc 	bl	800429c <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006928:	f7fd fcb8 	bl	800429c <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e087      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693a:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f0      	bne.n	8006928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69da      	ldr	r2, [r3, #28]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	019b      	lsls	r3, r3, #6
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	3b01      	subs	r3, #1
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	491b      	ldr	r1, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <HAL_RCC_OscConfig+0x478>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006976:	f7fd fc91 	bl	800429c <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800697e:	f7fd fc8d 	bl	800429c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e05c      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006990:	4b11      	ldr	r3, [pc, #68]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x416>
 800699c:	e054      	b.n	8006a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <HAL_RCC_OscConfig+0x478>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a4:	f7fd fc7a 	bl	800429c <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ac:	f7fd fc76 	bl	800429c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e045      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <HAL_RCC_OscConfig+0x470>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1f0      	bne.n	80069ac <HAL_RCC_OscConfig+0x444>
 80069ca:	e03d      	b.n	8006a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e038      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40007000 	.word	0x40007000
 80069e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <HAL_RCC_OscConfig+0x4ec>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d028      	beq.n	8006a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d121      	bne.n	8006a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d11a      	bne.n	8006a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a14:	4013      	ands	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d111      	bne.n	8006a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d107      	bne.n	8006a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40023800 	.word	0x40023800

08006a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0cc      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a6c:	4b68      	ldr	r3, [pc, #416]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d90c      	bls.n	8006a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7a:	4b65      	ldr	r3, [pc, #404]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a82:	4b63      	ldr	r3, [pc, #396]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0b8      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d020      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006aac:	4b59      	ldr	r3, [pc, #356]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	4a58      	ldr	r2, [pc, #352]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ac4:	4b53      	ldr	r3, [pc, #332]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4a52      	ldr	r2, [pc, #328]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad0:	4b50      	ldr	r3, [pc, #320]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	494d      	ldr	r1, [pc, #308]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d044      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d107      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af6:	4b47      	ldr	r3, [pc, #284]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d119      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e07f      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d003      	beq.n	8006b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d107      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b16:	4b3f      	ldr	r3, [pc, #252]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e06f      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b26:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e067      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b36:	4b37      	ldr	r3, [pc, #220]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f023 0203 	bic.w	r2, r3, #3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4934      	ldr	r1, [pc, #208]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b48:	f7fd fba8 	bl	800429c <HAL_GetTick>
 8006b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4e:	e00a      	b.n	8006b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b50:	f7fd fba4 	bl	800429c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e04f      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b66:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 020c 	and.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d1eb      	bne.n	8006b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d20c      	bcs.n	8006ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b86:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8e:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <HAL_RCC_ClockConfig+0x1b8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e032      	b.n	8006c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bac:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4916      	ldr	r1, [pc, #88]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	490e      	ldr	r1, [pc, #56]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bde:	f000 f821 	bl	8006c24 <HAL_RCC_GetSysClockFreq>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	091b      	lsrs	r3, r3, #4
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	490a      	ldr	r1, [pc, #40]	; (8006c18 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf0:	5ccb      	ldrb	r3, [r1, r3]
 8006bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <HAL_RCC_ClockConfig+0x1c4>)
 8006bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <HAL_RCC_ClockConfig+0x1c8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd fb08 	bl	8004214 <HAL_InitTick>

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40023c00 	.word	0x40023c00
 8006c14:	40023800 	.word	0x40023800
 8006c18:	0800a56c 	.word	0x0800a56c
 8006c1c:	200004c0 	.word	0x200004c0
 8006c20:	20000514 	.word	0x20000514

08006c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c28:	b094      	sub	sp, #80	; 0x50
 8006c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c30:	2300      	movs	r3, #0
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c34:	2300      	movs	r3, #0
 8006c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c3c:	4b79      	ldr	r3, [pc, #484]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 030c 	and.w	r3, r3, #12
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d00d      	beq.n	8006c64 <HAL_RCC_GetSysClockFreq+0x40>
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	f200 80e1 	bhi.w	8006e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_RCC_GetSysClockFreq+0x34>
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d003      	beq.n	8006c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c56:	e0db      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c58:	4b73      	ldr	r3, [pc, #460]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c5c:	e0db      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c5e:	4b73      	ldr	r3, [pc, #460]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c62:	e0d8      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c64:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c6e:	4b6d      	ldr	r3, [pc, #436]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d063      	beq.n	8006d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7a:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	099b      	lsrs	r3, r3, #6
 8006c80:	2200      	movs	r2, #0
 8006c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c8e:	2300      	movs	r3, #0
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
 8006c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c96:	4622      	mov	r2, r4
 8006c98:	462b      	mov	r3, r5
 8006c9a:	f04f 0000 	mov.w	r0, #0
 8006c9e:	f04f 0100 	mov.w	r1, #0
 8006ca2:	0159      	lsls	r1, r3, #5
 8006ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ca8:	0150      	lsls	r0, r2, #5
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4621      	mov	r1, r4
 8006cb0:	1a51      	subs	r1, r2, r1
 8006cb2:	6139      	str	r1, [r7, #16]
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cc8:	4659      	mov	r1, fp
 8006cca:	018b      	lsls	r3, r1, #6
 8006ccc:	4651      	mov	r1, sl
 8006cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	018a      	lsls	r2, r1, #6
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8006cdc:	4659      	mov	r1, fp
 8006cde:	eb63 0901 	sbc.w	r9, r3, r1
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cf6:	4690      	mov	r8, r2
 8006cf8:	4699      	mov	r9, r3
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	eb18 0303 	adds.w	r3, r8, r3
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	462b      	mov	r3, r5
 8006d04:	eb49 0303 	adc.w	r3, r9, r3
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d16:	4629      	mov	r1, r5
 8006d18:	024b      	lsls	r3, r1, #9
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d20:	4621      	mov	r1, r4
 8006d22:	024a      	lsls	r2, r1, #9
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d34:	f7f9 fab4 	bl	80002a0 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d40:	e058      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d42:	4b38      	ldr	r3, [pc, #224]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	099b      	lsrs	r3, r3, #6
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d52:	623b      	str	r3, [r7, #32]
 8006d54:	2300      	movs	r3, #0
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
 8006d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	f04f 0000 	mov.w	r0, #0
 8006d64:	f04f 0100 	mov.w	r1, #0
 8006d68:	0159      	lsls	r1, r3, #5
 8006d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d6e:	0150      	lsls	r0, r2, #5
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4641      	mov	r1, r8
 8006d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d94:	ebb2 040a 	subs.w	r4, r2, sl
 8006d98:	eb63 050b 	sbc.w	r5, r3, fp
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	00eb      	lsls	r3, r5, #3
 8006da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006daa:	00e2      	lsls	r2, r4, #3
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	4643      	mov	r3, r8
 8006db2:	18e3      	adds	r3, r4, r3
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	464b      	mov	r3, r9
 8006db8:	eb45 0303 	adc.w	r3, r5, r3
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dca:	4629      	mov	r1, r5
 8006dcc:	028b      	lsls	r3, r1, #10
 8006dce:	4621      	mov	r1, r4
 8006dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	028a      	lsls	r2, r1, #10
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dde:	2200      	movs	r2, #0
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	61fa      	str	r2, [r7, #28]
 8006de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006de8:	f7f9 fa5a 	bl	80002a0 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4613      	mov	r3, r2
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	0c1b      	lsrs	r3, r3, #16
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	3301      	adds	r3, #1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e0e:	e002      	b.n	8006e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3750      	adds	r7, #80	; 0x50
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
 8006e28:	00f42400 	.word	0x00f42400
 8006e2c:	007a1200 	.word	0x007a1200

08006e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e34:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	200004c0 	.word	0x200004c0

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e4c:	f7ff fff0 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	0a9b      	lsrs	r3, r3, #10
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4903      	ldr	r1, [pc, #12]	; (8006e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	0800a57c 	.word	0x0800a57c

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d075      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ea4:	4b91      	ldr	r3, [pc, #580]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eaa:	f7fd f9f7 	bl	800429c <HAL_GetTick>
 8006eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006eb2:	f7fd f9f3 	bl	800429c <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e189      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ec4:	4b8a      	ldr	r3, [pc, #552]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1f0      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	019a      	lsls	r2, r3, #6
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	071b      	lsls	r3, r3, #28
 8006ee8:	4981      	ldr	r1, [pc, #516]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01f      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006efc:	4b7c      	ldr	r3, [pc, #496]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f02:	0f1b      	lsrs	r3, r3, #28
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	019a      	lsls	r2, r3, #6
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	431a      	orrs	r2, r3
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	071b      	lsls	r3, r3, #28
 8006f1c:	4974      	ldr	r1, [pc, #464]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f24:	4b72      	ldr	r3, [pc, #456]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2a:	f023 021f 	bic.w	r2, r3, #31
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	496e      	ldr	r1, [pc, #440]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	019a      	lsls	r2, r3, #6
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	061b      	lsls	r3, r3, #24
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	071b      	lsls	r3, r3, #28
 8006f5c:	4964      	ldr	r1, [pc, #400]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f64:	4b61      	ldr	r3, [pc, #388]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f6a:	f7fd f997 	bl	800429c <HAL_GetTick>
 8006f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f70:	e008      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f72:	f7fd f993 	bl	800429c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e129      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f84:	4b5a      	ldr	r3, [pc, #360]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0f0      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d079      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fa8:	4b52      	ldr	r3, [pc, #328]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fae:	f7fd f975 	bl	800429c <HAL_GetTick>
 8006fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fb6:	f7fd f971 	bl	800429c <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e107      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fc8:	4b49      	ldr	r3, [pc, #292]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd4:	d0ef      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d020      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006fe2:	4b43      	ldr	r3, [pc, #268]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	0f1b      	lsrs	r3, r3, #28
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	019a      	lsls	r2, r3, #6
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	061b      	lsls	r3, r3, #24
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	071b      	lsls	r3, r3, #28
 8007002:	493b      	ldr	r1, [pc, #236]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800700a:	4b39      	ldr	r3, [pc, #228]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800700c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007010:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	3b01      	subs	r3, #1
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	4934      	ldr	r1, [pc, #208]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01e      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007030:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	0e1b      	lsrs	r3, r3, #24
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	019a      	lsls	r2, r3, #6
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	061b      	lsls	r3, r3, #24
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	071b      	lsls	r3, r3, #28
 8007050:	4927      	ldr	r1, [pc, #156]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007058:	4b25      	ldr	r3, [pc, #148]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800705a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	4922      	ldr	r1, [pc, #136]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800706e:	4b21      	ldr	r3, [pc, #132]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007070:	2201      	movs	r2, #1
 8007072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007074:	f7fd f912 	bl	800429c <HAL_GetTick>
 8007078:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800707a:	e008      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800707c:	f7fd f90e 	bl	800429c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0a4      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800708e:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800709a:	d1ef      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 808b 	beq.w	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b8:	6413      	str	r3, [r2, #64]	; 0x40
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0b      	ldr	r2, [pc, #44]	; (80070f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80070cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070d2:	f7fd f8e3 	bl	800429c <HAL_GetTick>
 80070d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070d8:	e010      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070da:	f7fd f8df 	bl	800429c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d909      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e075      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80070ec:	42470068 	.word	0x42470068
 80070f0:	40023800 	.word	0x40023800
 80070f4:	42470070 	.word	0x42470070
 80070f8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070fc:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0e8      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007108:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007110:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02f      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d028      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007136:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800713c:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007142:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b01      	cmp	r3, #1
 800714c:	d114      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800714e:	f7fd f8a5 	bl	800429c <HAL_GetTick>
 8007152:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007154:	e00a      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007156:	f7fd f8a1 	bl	800429c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	f241 3288 	movw	r2, #5000	; 0x1388
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e035      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0ee      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007184:	d10d      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007186:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719a:	4912      	ldr	r1, [pc, #72]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800719c:	4313      	orrs	r3, r2
 800719e:	608b      	str	r3, [r1, #8]
 80071a0:	e005      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	4a0f      	ldr	r2, [pc, #60]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071ac:	6093      	str	r3, [r2, #8]
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ba:	490a      	ldr	r1, [pc, #40]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d004      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80071d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40007000 	.word	0x40007000
 80071e4:	40023800 	.word	0x40023800
 80071e8:	42470e40 	.word	0x42470e40
 80071ec:	424711e0 	.word	0x424711e0

080071f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e01c      	b.n	800723c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	795b      	ldrb	r3, [r3, #5]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fb fa5e 	bl	80026d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0204 	orr.w	r2, r2, #4
 800722c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	791b      	ldrb	r3, [r3, #4]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_RNG_GenerateRandomNumber+0x1a>
 800725a:	2302      	movs	r3, #2
 800725c:	e044      	b.n	80072e8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	795b      	ldrb	r3, [r3, #5]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b01      	cmp	r3, #1
 800726c:	d133      	bne.n	80072d6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2202      	movs	r2, #2
 8007272:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007274:	f7fd f812 	bl	800429c <HAL_GetTick>
 8007278:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800727a:	e018      	b.n	80072ae <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800727c:	f7fd f80e 	bl	800429c <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d911      	bls.n	80072ae <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b01      	cmp	r3, #1
 8007296:	d00a      	beq.n	80072ae <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e01c      	b.n	80072e8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d1df      	bne.n	800727c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	715a      	strb	r2, [r3, #5]
 80072d4:	e004      	b.n	80072e0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2204      	movs	r2, #4
 80072da:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]

  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e066      	b.n	80073d4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7f5b      	ldrb	r3, [r3, #29]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d105      	bne.n	800731c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fb f9fe 	bl	8002718 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	22ca      	movs	r2, #202	; 0xca
 8007328:	625a      	str	r2, [r3, #36]	; 0x24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2253      	movs	r2, #83	; 0x53
 8007330:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f87a 	bl	800742c <RTC_EnterInitMode>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d12c      	bne.n	800739c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007354:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68d2      	ldr	r2, [r2, #12]
 800737c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6919      	ldr	r1, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	041a      	lsls	r2, r3, #16
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f881 	bl	800749a <RTC_ExitInitMode>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d113      	bne.n	80073ca <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	22ff      	movs	r2, #255	; 0xff
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073f8:	f7fc ff50 	bl	800429c <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073fe:	e009      	b.n	8007414 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007400:	f7fc ff4c 	bl	800429c <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800740e:	d901      	bls.n	8007414 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e007      	b.n	8007424 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0ee      	beq.n	8007400 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d122      	bne.n	8007490 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007458:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800745a:	f7fc ff1f 	bl	800429c <HAL_GetTick>
 800745e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007460:	e00c      	b.n	800747c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007462:	f7fc ff1b 	bl	800429c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007470:	d904      	bls.n	800747c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2204      	movs	r2, #4
 8007476:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <RTC_EnterInitMode+0x64>
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d1e8      	bne.n	8007462 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ff89 	bl	80073dc <HAL_RTC_WaitForSynchro>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2204      	movs	r2, #4
 80074d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e025      	b.n	8007544 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fb fa87 	bl	8002a20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f001 fe93 	bl	8009250 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	461a      	mov	r2, r3
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	f001 fee8 	bl	800930a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800755e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d101      	bne.n	800756a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007566:	2302      	movs	r3, #2
 8007568:	e021      	b.n	80075ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d002      	beq.n	8007576 <HAL_SDRAM_SendCommand+0x2a>
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b05      	cmp	r3, #5
 8007574:	d118      	bne.n	80075a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	4618      	mov	r0, r3
 8007588:	f001 ff28 	bl	80093dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d104      	bne.n	800759e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2205      	movs	r2, #5
 8007598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800759c:	e006      	b.n	80075ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075a6:	e001      	b.n	80075ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e000      	b.n	80075ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d101      	bne.n	80075d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e016      	b.n	80075fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d10f      	bne.n	80075fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 ff33 	bl	8009456 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b082      	sub	sp, #8
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e07b      	b.n	8007710 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007628:	d009      	beq.n	800763e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	61da      	str	r2, [r3, #28]
 8007630:	e005      	b.n	800763e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d106      	bne.n	800765e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fb f887 	bl	800276c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007674:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	ea42 0103 	orr.w	r1, r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 0104 	and.w	r1, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0210 	and.w	r2, r3, #16
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e01a      	b.n	8007760 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007740:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fb f85a 	bl	80027fc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_SPI_Transmit+0x22>
 8007786:	2302      	movs	r3, #2
 8007788:	e126      	b.n	80079d8 <HAL_SPI_Transmit+0x270>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007792:	f7fc fd83 	bl	800429c <HAL_GetTick>
 8007796:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d002      	beq.n	80077ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077a8:	2302      	movs	r3, #2
 80077aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077ac:	e10b      	b.n	80079c6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_SPI_Transmit+0x52>
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077be:	e102      	b.n	80079c6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2203      	movs	r2, #3
 80077c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	88fa      	ldrh	r2, [r7, #6]
 80077d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	88fa      	ldrh	r2, [r7, #6]
 80077de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007806:	d10f      	bne.n	8007828 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007816:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007826:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d007      	beq.n	8007846 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007844:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800784e:	d14b      	bne.n	80078e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_SPI_Transmit+0xf6>
 8007858:	8afb      	ldrh	r3, [r7, #22]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d13e      	bne.n	80078dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	881a      	ldrh	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	1c9a      	adds	r2, r3, #2
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007878:	b29b      	uxth	r3, r3
 800787a:	3b01      	subs	r3, #1
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007882:	e02b      	b.n	80078dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b02      	cmp	r3, #2
 8007890:	d112      	bne.n	80078b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	881a      	ldrh	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	1c9a      	adds	r2, r3, #2
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80078b6:	e011      	b.n	80078dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b8:	f7fc fcf0 	bl	800429c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d803      	bhi.n	80078d0 <HAL_SPI_Transmit+0x168>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_Transmit+0x16e>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078da:	e074      	b.n	80079c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1ce      	bne.n	8007884 <HAL_SPI_Transmit+0x11c>
 80078e6:	e04c      	b.n	8007982 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_Transmit+0x18e>
 80078f0:	8afb      	ldrh	r3, [r7, #22]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d140      	bne.n	8007978 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800791c:	e02c      	b.n	8007978 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b02      	cmp	r3, #2
 800792a:	d113      	bne.n	8007954 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	86da      	strh	r2, [r3, #54]	; 0x36
 8007952:	e011      	b.n	8007978 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007954:	f7fc fca2 	bl	800429c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d803      	bhi.n	800796c <HAL_SPI_Transmit+0x204>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Transmit+0x20a>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007976:	e026      	b.n	80079c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cd      	bne.n	800791e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fbda 	bl	8008140 <SPI_EndRxTxTransaction>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079a0:	2300      	movs	r3, #0
 80079a2:	613b      	str	r3, [r7, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e000      	b.n	80079c6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80079c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3720      	adds	r7, #32
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b088      	sub	sp, #32
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079fc:	d112      	bne.n	8007a24 <HAL_SPI_Receive+0x44>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10e      	bne.n	8007a24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4613      	mov	r3, r2
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f8f1 	bl	8007c02 <HAL_SPI_TransmitReceive>
 8007a20:	4603      	mov	r3, r0
 8007a22:	e0ea      	b.n	8007bfa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_SPI_Receive+0x52>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e0e3      	b.n	8007bfa <HAL_SPI_Receive+0x21a>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a3a:	f7fc fc2f 	bl	800429c <HAL_GetTick>
 8007a3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a50:	e0ca      	b.n	8007be8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <HAL_SPI_Receive+0x7e>
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a62:	e0c1      	b.n	8007be8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2204      	movs	r2, #4
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	88fa      	ldrh	r2, [r7, #6]
 8007a82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aaa:	d10f      	bne.n	8007acc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007aca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d007      	beq.n	8007aea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d162      	bne.n	8007bb8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007af2:	e02e      	b.n	8007b52 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d115      	bne.n	8007b2e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f103 020c 	add.w	r2, r3, #12
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b2c:	e011      	b.n	8007b52 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b2e:	f7fc fbb5 	bl	800429c <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d803      	bhi.n	8007b46 <HAL_SPI_Receive+0x166>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d102      	bne.n	8007b4c <HAL_SPI_Receive+0x16c>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b50:	e04a      	b.n	8007be8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1cb      	bne.n	8007af4 <HAL_SPI_Receive+0x114>
 8007b5c:	e031      	b.n	8007bc2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d113      	bne.n	8007b94 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	b292      	uxth	r2, r2
 8007b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b92:	e011      	b.n	8007bb8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b94:	f7fc fb82 	bl	800429c <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d803      	bhi.n	8007bac <HAL_SPI_Receive+0x1cc>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d102      	bne.n	8007bb2 <HAL_SPI_Receive+0x1d2>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d102      	bne.n	8007bb8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bb6:	e017      	b.n	8007be8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1cd      	bne.n	8007b5e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 fa54 	bl	8008074 <SPI_EndRxTransaction>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
 8007be4:	e000      	b.n	8007be8 <HAL_SPI_Receive+0x208>
  }

error :
 8007be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b08c      	sub	sp, #48	; 0x30
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c10:	2301      	movs	r3, #1
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x26>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e18a      	b.n	8007f3e <HAL_SPI_TransmitReceive+0x33c>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c30:	f7fc fb34 	bl	800429c <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d00f      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x70>
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c58:	d107      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x68>
 8007c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d003      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c70:	e15b      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_SPI_TransmitReceive+0x82>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_SPI_TransmitReceive+0x82>
 8007c7e:	887b      	ldrh	r3, [r7, #2]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c8a:	e14e      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d003      	beq.n	8007ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	887a      	ldrh	r2, [r7, #2]
 8007cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	887a      	ldrh	r2, [r7, #2]
 8007cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	887a      	ldrh	r2, [r7, #2]
 8007cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	887a      	ldrh	r2, [r7, #2]
 8007cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d007      	beq.n	8007cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfc:	d178      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x10a>
 8007d06:	8b7b      	ldrh	r3, [r7, #26]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d166      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d30:	e053      	b.n	8007dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d11b      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x176>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d016      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x176>
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d113      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d54:	881a      	ldrh	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	1c9a      	adds	r2, r3, #2
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d119      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x1b8>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d014      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	1c9a      	adds	r2, r3, #2
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007db6:	2301      	movs	r3, #1
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dba:	f7fc fa6f 	bl	800429c <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d807      	bhi.n	8007dda <HAL_SPI_TransmitReceive+0x1d8>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d003      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dd8:	e0a7      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1a6      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x130>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1a1      	bne.n	8007d32 <HAL_SPI_TransmitReceive+0x130>
 8007dee:	e07c      	b.n	8007eea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x1fc>
 8007df8:	8b7b      	ldrh	r3, [r7, #26]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d16b      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e24:	e057      	b.n	8007ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d11c      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x26c>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <HAL_SPI_TransmitReceive+0x26c>
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d114      	bne.n	8007e6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d119      	bne.n	8007eb0 <HAL_SPI_TransmitReceive+0x2ae>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d014      	beq.n	8007eb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eac:	2301      	movs	r3, #1
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eb0:	f7fc f9f4 	bl	800429c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d803      	bhi.n	8007ec8 <HAL_SPI_TransmitReceive+0x2c6>
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d102      	bne.n	8007ece <HAL_SPI_TransmitReceive+0x2cc>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ed4:	e029      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1a2      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x224>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d19d      	bne.n	8007e26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 f926 	bl	8008140 <SPI_EndRxTxTransaction>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f06:	e010      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	e000      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3730      	adds	r7, #48	; 0x30
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f54:	b2db      	uxtb	r3, r3
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f74:	f7fc f992 	bl	800429c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4413      	add	r3, r2
 8007f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f84:	f7fc f98a 	bl	800429c <HAL_GetTick>
 8007f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f8a:	4b39      	ldr	r3, [pc, #228]	; (8008070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	015b      	lsls	r3, r3, #5
 8007f90:	0d1b      	lsrs	r3, r3, #20
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	fb02 f303 	mul.w	r3, r2, r3
 8007f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f9a:	e054      	b.n	8008046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d050      	beq.n	8008046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fa4:	f7fc f97a 	bl	800429c <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	69fa      	ldr	r2, [r7, #28]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d902      	bls.n	8007fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d13d      	bne.n	8008036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fd2:	d111      	bne.n	8007ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fdc:	d004      	beq.n	8007fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fe6:	d107      	bne.n	8007ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008000:	d10f      	bne.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e017      	b.n	8008066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	3b01      	subs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4013      	ands	r3, r2
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	429a      	cmp	r2, r3
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	429a      	cmp	r2, r3
 8008062:	d19b      	bne.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	200004c0 	.word	0x200004c0

08008074 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008088:	d111      	bne.n	80080ae <SPI_EndRxTransaction+0x3a>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008092:	d004      	beq.n	800809e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809c:	d107      	bne.n	80080ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d12a      	bne.n	800810e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c0:	d012      	beq.n	80080e8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2200      	movs	r2, #0
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff ff49 	bl	8007f64 <SPI_WaitFlagStateUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02d      	beq.n	8008134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080dc:	f043 0220 	orr.w	r2, r3, #32
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e026      	b.n	8008136 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	2101      	movs	r1, #1
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7ff ff36 	bl	8007f64 <SPI_WaitFlagStateUntilTimeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01a      	beq.n	8008134 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	f043 0220 	orr.w	r2, r3, #32
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e013      	b.n	8008136 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2101      	movs	r1, #1
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff ff23 	bl	8007f64 <SPI_WaitFlagStateUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008128:	f043 0220 	orr.w	r2, r3, #32
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e000      	b.n	8008136 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <SPI_EndRxTxTransaction+0x7c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <SPI_EndRxTxTransaction+0x80>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	0d5b      	lsrs	r3, r3, #21
 8008158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800815c:	fb02 f303 	mul.w	r3, r2, r3
 8008160:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800816a:	d112      	bne.n	8008192 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2200      	movs	r2, #0
 8008174:	2180      	movs	r1, #128	; 0x80
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fef4 	bl	8007f64 <SPI_WaitFlagStateUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e00f      	b.n	80081b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00a      	beq.n	80081ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3b01      	subs	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d0f2      	beq.n	8008192 <SPI_EndRxTxTransaction+0x52>
 80081ac:	e000      	b.n	80081b0 <SPI_EndRxTxTransaction+0x70>
        break;
 80081ae:	bf00      	nop
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200004c0 	.word	0x200004c0
 80081c0:	165e9f81 	.word	0x165e9f81

080081c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e041      	b.n	800825a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fa fb24 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f000 fc84 	bl	8008b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	d001      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e04e      	b.n	800831a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a23      	ldr	r2, [pc, #140]	; (8008328 <HAL_TIM_Base_Start_IT+0xc4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d022      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d01d      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1f      	ldr	r2, [pc, #124]	; (800832c <HAL_TIM_Base_Start_IT+0xc8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d018      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1e      	ldr	r2, [pc, #120]	; (8008330 <HAL_TIM_Base_Start_IT+0xcc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d013      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIM_Base_Start_IT+0xd0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d00e      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a1b      	ldr	r2, [pc, #108]	; (8008338 <HAL_TIM_Base_Start_IT+0xd4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a19      	ldr	r2, [pc, #100]	; (800833c <HAL_TIM_Base_Start_IT+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_TIM_Base_Start_IT+0x80>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a18      	ldr	r2, [pc, #96]	; (8008340 <HAL_TIM_Base_Start_IT+0xdc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d111      	bne.n	8008308 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b06      	cmp	r3, #6
 80082f4:	d010      	beq.n	8008318 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008306:	e007      	b.n	8008318 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40010000 	.word	0x40010000
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800
 8008334:	40000c00 	.word	0x40000c00
 8008338:	40010400 	.word	0x40010400
 800833c:	40014000 	.word	0x40014000
 8008340:	40001800 	.word	0x40001800

08008344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e041      	b.n	80083da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f839 	bl	80083e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f000 fbc4 	bl	8008b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
	...

080083f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <HAL_TIM_PWM_Start+0x24>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e022      	b.n	8008462 <HAL_TIM_PWM_Start+0x6a>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d109      	bne.n	8008436 <HAL_TIM_PWM_Start+0x3e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b01      	cmp	r3, #1
 800842c:	bf14      	ite	ne
 800842e:	2301      	movne	r3, #1
 8008430:	2300      	moveq	r3, #0
 8008432:	b2db      	uxtb	r3, r3
 8008434:	e015      	b.n	8008462 <HAL_TIM_PWM_Start+0x6a>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b08      	cmp	r3, #8
 800843a:	d109      	bne.n	8008450 <HAL_TIM_PWM_Start+0x58>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	bf14      	ite	ne
 8008448:	2301      	movne	r3, #1
 800844a:	2300      	moveq	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	e008      	b.n	8008462 <HAL_TIM_PWM_Start+0x6a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e07c      	b.n	8008564 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <HAL_TIM_PWM_Start+0x82>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008478:	e013      	b.n	80084a2 <HAL_TIM_PWM_Start+0xaa>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b04      	cmp	r3, #4
 800847e:	d104      	bne.n	800848a <HAL_TIM_PWM_Start+0x92>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008488:	e00b      	b.n	80084a2 <HAL_TIM_PWM_Start+0xaa>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b08      	cmp	r3, #8
 800848e:	d104      	bne.n	800849a <HAL_TIM_PWM_Start+0xa2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008498:	e003      	b.n	80084a2 <HAL_TIM_PWM_Start+0xaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2201      	movs	r2, #1
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fe1a 	bl	80090e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a2d      	ldr	r2, [pc, #180]	; (800856c <HAL_TIM_PWM_Start+0x174>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_PWM_Start+0xcc>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a2c      	ldr	r2, [pc, #176]	; (8008570 <HAL_TIM_PWM_Start+0x178>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d101      	bne.n	80084c8 <HAL_TIM_PWM_Start+0xd0>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_TIM_PWM_Start+0xd2>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a22      	ldr	r2, [pc, #136]	; (800856c <HAL_TIM_PWM_Start+0x174>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d022      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d01d      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1f      	ldr	r2, [pc, #124]	; (8008574 <HAL_TIM_PWM_Start+0x17c>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d018      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <HAL_TIM_PWM_Start+0x180>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1c      	ldr	r2, [pc, #112]	; (800857c <HAL_TIM_PWM_Start+0x184>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00e      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a16      	ldr	r2, [pc, #88]	; (8008570 <HAL_TIM_PWM_Start+0x178>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_TIM_PWM_Start+0x188>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_TIM_PWM_Start+0x136>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a16      	ldr	r2, [pc, #88]	; (8008584 <HAL_TIM_PWM_Start+0x18c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d111      	bne.n	8008552 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b06      	cmp	r3, #6
 800853e:	d010      	beq.n	8008562 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008550:	e007      	b.n	8008562 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0201 	orr.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40000c00 	.word	0x40000c00
 8008580:	40014000 	.word	0x40014000
 8008584:	40001800 	.word	0x40001800

08008588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b02      	cmp	r3, #2
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0202 	mvn.w	r2, #2
 80085b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa81 	bl	8008ad2 <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa73 	bl	8008abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa84 	bl	8008ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0204 	mvn.w	r2, #4
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa57 	bl	8008ad2 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa49 	bl	8008abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fa5a 	bl	8008ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b08      	cmp	r3, #8
 8008644:	d122      	bne.n	800868c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b08      	cmp	r3, #8
 8008652:	d11b      	bne.n	800868c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0208 	mvn.w	r2, #8
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2204      	movs	r2, #4
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa2d 	bl	8008ad2 <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa1f 	bl	8008abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fa30 	bl	8008ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b10      	cmp	r3, #16
 8008698:	d122      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b10      	cmp	r3, #16
 80086a6:	d11b      	bne.n	80086e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0210 	mvn.w	r2, #16
 80086b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2208      	movs	r2, #8
 80086b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa03 	bl	8008ad2 <HAL_TIM_IC_CaptureCallback>
 80086cc:	e005      	b.n	80086da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f9f5 	bl	8008abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa06 	bl	8008ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d10e      	bne.n	800870c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d107      	bne.n	800870c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0201 	mvn.w	r2, #1
 8008704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f9cf 	bl	8008aaa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d10e      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d107      	bne.n	8008738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fd82 	bl	800923c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d10e      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008750:	2b40      	cmp	r3, #64	; 0x40
 8008752:	d107      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f9cb 	bl	8008afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b20      	cmp	r3, #32
 8008770:	d10e      	bne.n	8008790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b20      	cmp	r3, #32
 800877e:	d107      	bne.n	8008790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0220 	mvn.w	r2, #32
 8008788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fd4c 	bl	8009228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e0ae      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b0c      	cmp	r3, #12
 80087c2:	f200 809f 	bhi.w	8008904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	08008801 	.word	0x08008801
 80087d0:	08008905 	.word	0x08008905
 80087d4:	08008905 	.word	0x08008905
 80087d8:	08008905 	.word	0x08008905
 80087dc:	08008841 	.word	0x08008841
 80087e0:	08008905 	.word	0x08008905
 80087e4:	08008905 	.word	0x08008905
 80087e8:	08008905 	.word	0x08008905
 80087ec:	08008883 	.word	0x08008883
 80087f0:	08008905 	.word	0x08008905
 80087f4:	08008905 	.word	0x08008905
 80087f8:	08008905 	.word	0x08008905
 80087fc:	080088c3 	.word	0x080088c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fa22 	bl	8008c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0208 	orr.w	r2, r2, #8
 800881a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699a      	ldr	r2, [r3, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0204 	bic.w	r2, r2, #4
 800882a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6999      	ldr	r1, [r3, #24]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	619a      	str	r2, [r3, #24]
      break;
 800883e:	e064      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 fa72 	bl	8008d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800885a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800886a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6999      	ldr	r1, [r3, #24]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	021a      	lsls	r2, r3, #8
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	619a      	str	r2, [r3, #24]
      break;
 8008880:	e043      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	4618      	mov	r0, r3
 800888a:	f000 fac7 	bl	8008e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69da      	ldr	r2, [r3, #28]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0208 	orr.w	r2, r2, #8
 800889c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69da      	ldr	r2, [r3, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0204 	bic.w	r2, r2, #4
 80088ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69d9      	ldr	r1, [r3, #28]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	691a      	ldr	r2, [r3, #16]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	61da      	str	r2, [r3, #28]
      break;
 80088c0:	e023      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fb1b 	bl	8008f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69d9      	ldr	r1, [r3, #28]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	021a      	lsls	r2, r3, #8
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	61da      	str	r2, [r3, #28]
      break;
 8008902:	e002      	b.n	800890a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
      break;
 8008908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIM_ConfigClockSource+0x1c>
 8008934:	2302      	movs	r3, #2
 8008936:	e0b4      	b.n	8008aa2 <HAL_TIM_ConfigClockSource+0x186>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800895e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008970:	d03e      	beq.n	80089f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	f200 8087 	bhi.w	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897e:	f000 8086 	beq.w	8008a8e <HAL_TIM_ConfigClockSource+0x172>
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008986:	d87f      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b70      	cmp	r3, #112	; 0x70
 800898a:	d01a      	beq.n	80089c2 <HAL_TIM_ConfigClockSource+0xa6>
 800898c:	2b70      	cmp	r3, #112	; 0x70
 800898e:	d87b      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b60      	cmp	r3, #96	; 0x60
 8008992:	d050      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0x11a>
 8008994:	2b60      	cmp	r3, #96	; 0x60
 8008996:	d877      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b50      	cmp	r3, #80	; 0x50
 800899a:	d03c      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0xfa>
 800899c:	2b50      	cmp	r3, #80	; 0x50
 800899e:	d873      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	d058      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x13a>
 80089a4:	2b40      	cmp	r3, #64	; 0x40
 80089a6:	d86f      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d064      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b30      	cmp	r3, #48	; 0x30
 80089ae:	d86b      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d060      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d867      	bhi.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05c      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089bc:	2b10      	cmp	r3, #16
 80089be:	d05a      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x15a>
 80089c0:	e062      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6899      	ldr	r1, [r3, #8]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f000 fb67 	bl	80090a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	609a      	str	r2, [r3, #8]
      break;
 80089ee:	e04f      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	6899      	ldr	r1, [r3, #8]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f000 fb50 	bl	80090a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689a      	ldr	r2, [r3, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a12:	609a      	str	r2, [r3, #8]
      break;
 8008a14:	e03c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6859      	ldr	r1, [r3, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f000 fac4 	bl	8008fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2150      	movs	r1, #80	; 0x50
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fb1d 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008a34:	e02c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6859      	ldr	r1, [r3, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f000 fae3 	bl	800900e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2160      	movs	r1, #96	; 0x60
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fb0d 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008a54:	e01c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6859      	ldr	r1, [r3, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f000 faa4 	bl	8008fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2140      	movs	r1, #64	; 0x40
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fafd 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008a74:	e00c      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	4610      	mov	r0, r2
 8008a82:	f000 faf4 	bl	800906e <TIM_ITRx_SetConfig>
      break;
 8008a86:	e003      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8c:	e000      	b.n	8008a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b02:	bf00      	nop
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a40      	ldr	r2, [pc, #256]	; (8008c24 <TIM_Base_SetConfig+0x114>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d013      	beq.n	8008b50 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2e:	d00f      	beq.n	8008b50 <TIM_Base_SetConfig+0x40>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3d      	ldr	r2, [pc, #244]	; (8008c28 <TIM_Base_SetConfig+0x118>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00b      	beq.n	8008b50 <TIM_Base_SetConfig+0x40>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a3c      	ldr	r2, [pc, #240]	; (8008c2c <TIM_Base_SetConfig+0x11c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d007      	beq.n	8008b50 <TIM_Base_SetConfig+0x40>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <TIM_Base_SetConfig+0x120>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a3a      	ldr	r2, [pc, #232]	; (8008c34 <TIM_Base_SetConfig+0x124>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d108      	bne.n	8008b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2f      	ldr	r2, [pc, #188]	; (8008c24 <TIM_Base_SetConfig+0x114>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02b      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b70:	d027      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a2c      	ldr	r2, [pc, #176]	; (8008c28 <TIM_Base_SetConfig+0x118>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d023      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2b      	ldr	r2, [pc, #172]	; (8008c2c <TIM_Base_SetConfig+0x11c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01f      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <TIM_Base_SetConfig+0x120>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d01b      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a29      	ldr	r2, [pc, #164]	; (8008c34 <TIM_Base_SetConfig+0x124>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d017      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a28      	ldr	r2, [pc, #160]	; (8008c38 <TIM_Base_SetConfig+0x128>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d013      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a27      	ldr	r2, [pc, #156]	; (8008c3c <TIM_Base_SetConfig+0x12c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00f      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a26      	ldr	r2, [pc, #152]	; (8008c40 <TIM_Base_SetConfig+0x130>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d00b      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a25      	ldr	r2, [pc, #148]	; (8008c44 <TIM_Base_SetConfig+0x134>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d007      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a24      	ldr	r2, [pc, #144]	; (8008c48 <TIM_Base_SetConfig+0x138>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d003      	beq.n	8008bc2 <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a23      	ldr	r2, [pc, #140]	; (8008c4c <TIM_Base_SetConfig+0x13c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d108      	bne.n	8008bd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a0a      	ldr	r2, [pc, #40]	; (8008c24 <TIM_Base_SetConfig+0x114>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d003      	beq.n	8008c08 <TIM_Base_SetConfig+0xf8>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <TIM_Base_SetConfig+0x124>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d103      	bne.n	8008c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	615a      	str	r2, [r3, #20]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40010000 	.word	0x40010000
 8008c28:	40000400 	.word	0x40000400
 8008c2c:	40000800 	.word	0x40000800
 8008c30:	40000c00 	.word	0x40000c00
 8008c34:	40010400 	.word	0x40010400
 8008c38:	40014000 	.word	0x40014000
 8008c3c:	40014400 	.word	0x40014400
 8008c40:	40014800 	.word	0x40014800
 8008c44:	40001800 	.word	0x40001800
 8008c48:	40001c00 	.word	0x40001c00
 8008c4c:	40002000 	.word	0x40002000

08008c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 0303 	bic.w	r3, r3, #3
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f023 0302 	bic.w	r3, r3, #2
 8008c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a20      	ldr	r2, [pc, #128]	; (8008d28 <TIM_OC1_SetConfig+0xd8>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d003      	beq.n	8008cb4 <TIM_OC1_SetConfig+0x64>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1f      	ldr	r2, [pc, #124]	; (8008d2c <TIM_OC1_SetConfig+0xdc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d10c      	bne.n	8008cce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f023 0308 	bic.w	r3, r3, #8
 8008cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f023 0304 	bic.w	r3, r3, #4
 8008ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a15      	ldr	r2, [pc, #84]	; (8008d28 <TIM_OC1_SetConfig+0xd8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC1_SetConfig+0x8e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <TIM_OC1_SetConfig+0xdc>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d111      	bne.n	8008d02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400

08008d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f023 0210 	bic.w	r2, r3, #16
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	021b      	lsls	r3, r3, #8
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f023 0320 	bic.w	r3, r3, #32
 8008d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a22      	ldr	r2, [pc, #136]	; (8008e14 <TIM_OC2_SetConfig+0xe4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <TIM_OC2_SetConfig+0x68>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a21      	ldr	r2, [pc, #132]	; (8008e18 <TIM_OC2_SetConfig+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d10d      	bne.n	8008db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a17      	ldr	r2, [pc, #92]	; (8008e14 <TIM_OC2_SetConfig+0xe4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC2_SetConfig+0x94>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <TIM_OC2_SetConfig+0xe8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d113      	bne.n	8008dec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	621a      	str	r2, [r3, #32]
}
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40010400 	.word	0x40010400

08008e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a21      	ldr	r2, [pc, #132]	; (8008efc <TIM_OC3_SetConfig+0xe0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d003      	beq.n	8008e82 <TIM_OC3_SetConfig+0x66>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a20      	ldr	r2, [pc, #128]	; (8008f00 <TIM_OC3_SetConfig+0xe4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d10d      	bne.n	8008e9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a16      	ldr	r2, [pc, #88]	; (8008efc <TIM_OC3_SetConfig+0xe0>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_OC3_SetConfig+0x92>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <TIM_OC3_SetConfig+0xe4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d113      	bne.n	8008ed6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	621a      	str	r2, [r3, #32]
}
 8008ef0:	bf00      	nop
 8008ef2:	371c      	adds	r7, #28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40010400 	.word	0x40010400

08008f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a12      	ldr	r2, [pc, #72]	; (8008fa8 <TIM_OC4_SetConfig+0xa4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_OC4_SetConfig+0x68>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a11      	ldr	r2, [pc, #68]	; (8008fac <TIM_OC4_SetConfig+0xa8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d109      	bne.n	8008f80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	019b      	lsls	r3, r3, #6
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	621a      	str	r2, [r3, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400

08008fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	f023 0201 	bic.w	r2, r3, #1
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f023 030a 	bic.w	r3, r3, #10
 8008fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800900e:	b480      	push	{r7}
 8009010:	b087      	sub	sp, #28
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f023 0210 	bic.w	r2, r3, #16
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	031b      	lsls	r3, r3, #12
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800904a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	bf00      	nop
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	f043 0307 	orr.w	r3, r3, #7
 8009090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	609a      	str	r2, [r3, #8]
}
 8009098:	bf00      	nop
 800909a:	3714      	adds	r7, #20
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	021a      	lsls	r2, r3, #8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	609a      	str	r2, [r3, #8]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	2201      	movs	r2, #1
 80090f8:	fa02 f303 	lsl.w	r3, r2, r3
 80090fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a1a      	ldr	r2, [r3, #32]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	43db      	mvns	r3, r3
 8009106:	401a      	ands	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a1a      	ldr	r2, [r3, #32]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	fa01 f303 	lsl.w	r3, r1, r3
 800911c:	431a      	orrs	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	621a      	str	r2, [r3, #32]
}
 8009122:	bf00      	nop
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009144:	2302      	movs	r3, #2
 8009146:	e05a      	b.n	80091fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a21      	ldr	r2, [pc, #132]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d022      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009194:	d01d      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1d      	ldr	r2, [pc, #116]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d018      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1b      	ldr	r2, [pc, #108]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d013      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1a      	ldr	r2, [pc, #104]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00e      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a18      	ldr	r2, [pc, #96]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d009      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a17      	ldr	r2, [pc, #92]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d004      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a15      	ldr	r2, [pc, #84]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10c      	bne.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40010000 	.word	0x40010000
 8009210:	40000400 	.word	0x40000400
 8009214:	40000800 	.word	0x40000800
 8009218:	40000c00 	.word	0x40000c00
 800921c:	40010400 	.word	0x40010400
 8009220:	40014000 	.word	0x40014000
 8009224:	40001800 	.word	0x40001800

08009228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d123      	bne.n	80092aa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800926a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	6851      	ldr	r1, [r2, #4]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	6892      	ldr	r2, [r2, #8]
 8009276:	4311      	orrs	r1, r2
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	4311      	orrs	r1, r2
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	6912      	ldr	r2, [r2, #16]
 8009282:	4311      	orrs	r1, r2
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	6952      	ldr	r2, [r2, #20]
 8009288:	4311      	orrs	r1, r2
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	6992      	ldr	r2, [r2, #24]
 800928e:	4311      	orrs	r1, r2
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	69d2      	ldr	r2, [r2, #28]
 8009294:	4311      	orrs	r1, r2
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	6a12      	ldr	r2, [r2, #32]
 800929a:	4311      	orrs	r1, r2
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092a0:	430a      	orrs	r2, r1
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	e028      	b.n	80092fc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	69d9      	ldr	r1, [r3, #28]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	4319      	orrs	r1, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	430b      	orrs	r3, r1
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	6851      	ldr	r1, [r2, #4]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	6892      	ldr	r2, [r2, #8]
 80092dc:	4311      	orrs	r1, r2
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	68d2      	ldr	r2, [r2, #12]
 80092e2:	4311      	orrs	r1, r2
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	6912      	ldr	r2, [r2, #16]
 80092e8:	4311      	orrs	r1, r2
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	6952      	ldr	r2, [r2, #20]
 80092ee:	4311      	orrs	r1, r2
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	6992      	ldr	r2, [r2, #24]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d128      	bne.n	800936e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	1e59      	subs	r1, r3, #1
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	3b01      	subs	r3, #1
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	4319      	orrs	r1, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	3b01      	subs	r3, #1
 800933a:	021b      	lsls	r3, r3, #8
 800933c:	4319      	orrs	r1, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	3b01      	subs	r3, #1
 8009344:	031b      	lsls	r3, r3, #12
 8009346:	4319      	orrs	r1, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	041b      	lsls	r3, r3, #16
 8009350:	4319      	orrs	r1, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	3b01      	subs	r3, #1
 8009358:	051b      	lsls	r3, r3, #20
 800935a:	4319      	orrs	r1, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	3b01      	subs	r3, #1
 8009362:	061b      	lsls	r3, r3, #24
 8009364:	430b      	orrs	r3, r1
 8009366:	431a      	orrs	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	e02f      	b.n	80093ce <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	68d2      	ldr	r2, [r2, #12]
 800937e:	3a01      	subs	r2, #1
 8009380:	0311      	lsls	r1, r2, #12
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	6952      	ldr	r2, [r2, #20]
 8009386:	3a01      	subs	r2, #1
 8009388:	0512      	lsls	r2, r2, #20
 800938a:	430a      	orrs	r2, r1
 800938c:	431a      	orrs	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	1e59      	subs	r1, r3, #1
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	4319      	orrs	r1, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	4319      	orrs	r1, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	4319      	orrs	r1, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	430b      	orrs	r3, r1
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	0d9b      	lsrs	r3, r3, #22
 80093f2:	059b      	lsls	r3, r3, #22
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	6811      	ldr	r1, [r2, #0]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	6852      	ldr	r2, [r2, #4]
 80093fc:	4311      	orrs	r1, r2
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	6892      	ldr	r2, [r2, #8]
 8009402:	3a01      	subs	r2, #1
 8009404:	0152      	lsls	r2, r2, #5
 8009406:	4311      	orrs	r1, r2
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	68d2      	ldr	r2, [r2, #12]
 800940c:	0252      	lsls	r2, r2, #9
 800940e:	430a      	orrs	r2, r1
 8009410:	431a      	orrs	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009416:	f7fa ff41 	bl	800429c <HAL_GetTick>
 800941a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800941c:	e010      	b.n	8009440 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d00c      	beq.n	8009440 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d007      	beq.n	800943c <FMC_SDRAM_SendCommand+0x60>
 800942c:	f7fa ff36 	bl	800429c <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	429a      	cmp	r2, r3
 800943a:	d201      	bcs.n	8009440 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e006      	b.n	800944e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b20      	cmp	r3, #32
 800944a:	d0e8      	beq.n	800941e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009468:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	0052      	lsls	r2, r2, #1
 8009470:	431a      	orrs	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <__assert_func>:
 8009484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009486:	4614      	mov	r4, r2
 8009488:	461a      	mov	r2, r3
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <__assert_func+0x2c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4605      	mov	r5, r0
 8009490:	68d8      	ldr	r0, [r3, #12]
 8009492:	b14c      	cbz	r4, 80094a8 <__assert_func+0x24>
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <__assert_func+0x30>)
 8009496:	9100      	str	r1, [sp, #0]
 8009498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800949c:	4906      	ldr	r1, [pc, #24]	; (80094b8 <__assert_func+0x34>)
 800949e:	462b      	mov	r3, r5
 80094a0:	f000 f91e 	bl	80096e0 <fiprintf>
 80094a4:	f000 fa19 	bl	80098da <abort>
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <__assert_func+0x38>)
 80094aa:	461c      	mov	r4, r3
 80094ac:	e7f3      	b.n	8009496 <__assert_func+0x12>
 80094ae:	bf00      	nop
 80094b0:	20000574 	.word	0x20000574
 80094b4:	0800cc24 	.word	0x0800cc24
 80094b8:	0800cc31 	.word	0x0800cc31
 80094bc:	0800cc5f 	.word	0x0800cc5f

080094c0 <srand>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4b10      	ldr	r3, [pc, #64]	; (8009504 <srand+0x44>)
 80094c4:	681d      	ldr	r5, [r3, #0]
 80094c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80094c8:	4604      	mov	r4, r0
 80094ca:	b9b3      	cbnz	r3, 80094fa <srand+0x3a>
 80094cc:	2018      	movs	r0, #24
 80094ce:	f000 fa57 	bl	8009980 <malloc>
 80094d2:	4602      	mov	r2, r0
 80094d4:	6328      	str	r0, [r5, #48]	; 0x30
 80094d6:	b920      	cbnz	r0, 80094e2 <srand+0x22>
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <srand+0x48>)
 80094da:	480c      	ldr	r0, [pc, #48]	; (800950c <srand+0x4c>)
 80094dc:	2146      	movs	r1, #70	; 0x46
 80094de:	f7ff ffd1 	bl	8009484 <__assert_func>
 80094e2:	490b      	ldr	r1, [pc, #44]	; (8009510 <srand+0x50>)
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <srand+0x54>)
 80094e6:	e9c0 1300 	strd	r1, r3, [r0]
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <srand+0x58>)
 80094ec:	6083      	str	r3, [r0, #8]
 80094ee:	230b      	movs	r3, #11
 80094f0:	8183      	strh	r3, [r0, #12]
 80094f2:	2100      	movs	r1, #0
 80094f4:	2001      	movs	r0, #1
 80094f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80094fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80094fc:	2200      	movs	r2, #0
 80094fe:	611c      	str	r4, [r3, #16]
 8009500:	615a      	str	r2, [r3, #20]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20000574 	.word	0x20000574
 8009508:	0800cc60 	.word	0x0800cc60
 800950c:	0800cc77 	.word	0x0800cc77
 8009510:	abcd330e 	.word	0xabcd330e
 8009514:	e66d1234 	.word	0xe66d1234
 8009518:	0005deec 	.word	0x0005deec

0800951c <rand>:
 800951c:	4b16      	ldr	r3, [pc, #88]	; (8009578 <rand+0x5c>)
 800951e:	b510      	push	{r4, lr}
 8009520:	681c      	ldr	r4, [r3, #0]
 8009522:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009524:	b9b3      	cbnz	r3, 8009554 <rand+0x38>
 8009526:	2018      	movs	r0, #24
 8009528:	f000 fa2a 	bl	8009980 <malloc>
 800952c:	4602      	mov	r2, r0
 800952e:	6320      	str	r0, [r4, #48]	; 0x30
 8009530:	b920      	cbnz	r0, 800953c <rand+0x20>
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <rand+0x60>)
 8009534:	4812      	ldr	r0, [pc, #72]	; (8009580 <rand+0x64>)
 8009536:	2152      	movs	r1, #82	; 0x52
 8009538:	f7ff ffa4 	bl	8009484 <__assert_func>
 800953c:	4911      	ldr	r1, [pc, #68]	; (8009584 <rand+0x68>)
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <rand+0x6c>)
 8009540:	e9c0 1300 	strd	r1, r3, [r0]
 8009544:	4b11      	ldr	r3, [pc, #68]	; (800958c <rand+0x70>)
 8009546:	6083      	str	r3, [r0, #8]
 8009548:	230b      	movs	r3, #11
 800954a:	8183      	strh	r3, [r0, #12]
 800954c:	2100      	movs	r1, #0
 800954e:	2001      	movs	r0, #1
 8009550:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009554:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009556:	480e      	ldr	r0, [pc, #56]	; (8009590 <rand+0x74>)
 8009558:	690b      	ldr	r3, [r1, #16]
 800955a:	694c      	ldr	r4, [r1, #20]
 800955c:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <rand+0x78>)
 800955e:	4358      	muls	r0, r3
 8009560:	fb02 0004 	mla	r0, r2, r4, r0
 8009564:	fba3 3202 	umull	r3, r2, r3, r2
 8009568:	3301      	adds	r3, #1
 800956a:	eb40 0002 	adc.w	r0, r0, r2
 800956e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009572:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009576:	bd10      	pop	{r4, pc}
 8009578:	20000574 	.word	0x20000574
 800957c:	0800cc60 	.word	0x0800cc60
 8009580:	0800cc77 	.word	0x0800cc77
 8009584:	abcd330e 	.word	0xabcd330e
 8009588:	e66d1234 	.word	0xe66d1234
 800958c:	0005deec 	.word	0x0005deec
 8009590:	5851f42d 	.word	0x5851f42d
 8009594:	4c957f2d 	.word	0x4c957f2d

08009598 <std>:
 8009598:	2300      	movs	r3, #0
 800959a:	b510      	push	{r4, lr}
 800959c:	4604      	mov	r4, r0
 800959e:	e9c0 3300 	strd	r3, r3, [r0]
 80095a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095a6:	6083      	str	r3, [r0, #8]
 80095a8:	8181      	strh	r1, [r0, #12]
 80095aa:	6643      	str	r3, [r0, #100]	; 0x64
 80095ac:	81c2      	strh	r2, [r0, #14]
 80095ae:	6183      	str	r3, [r0, #24]
 80095b0:	4619      	mov	r1, r3
 80095b2:	2208      	movs	r2, #8
 80095b4:	305c      	adds	r0, #92	; 0x5c
 80095b6:	f000 f906 	bl	80097c6 <memset>
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <std+0x58>)
 80095bc:	6263      	str	r3, [r4, #36]	; 0x24
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <std+0x5c>)
 80095c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <std+0x60>)
 80095c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <std+0x64>)
 80095c8:	6323      	str	r3, [r4, #48]	; 0x30
 80095ca:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <std+0x68>)
 80095cc:	6224      	str	r4, [r4, #32]
 80095ce:	429c      	cmp	r4, r3
 80095d0:	d006      	beq.n	80095e0 <std+0x48>
 80095d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80095d6:	4294      	cmp	r4, r2
 80095d8:	d002      	beq.n	80095e0 <std+0x48>
 80095da:	33d0      	adds	r3, #208	; 0xd0
 80095dc:	429c      	cmp	r4, r3
 80095de:	d105      	bne.n	80095ec <std+0x54>
 80095e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	f000 b966 	b.w	80098b8 <__retarget_lock_init_recursive>
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	08009741 	.word	0x08009741
 80095f4:	08009763 	.word	0x08009763
 80095f8:	0800979b 	.word	0x0800979b
 80095fc:	080097bf 	.word	0x080097bf
 8009600:	20000c0c 	.word	0x20000c0c

08009604 <stdio_exit_handler>:
 8009604:	4a02      	ldr	r2, [pc, #8]	; (8009610 <stdio_exit_handler+0xc>)
 8009606:	4903      	ldr	r1, [pc, #12]	; (8009614 <stdio_exit_handler+0x10>)
 8009608:	4803      	ldr	r0, [pc, #12]	; (8009618 <stdio_exit_handler+0x14>)
 800960a:	f000 b87b 	b.w	8009704 <_fwalk_sglue>
 800960e:	bf00      	nop
 8009610:	2000051c 	.word	0x2000051c
 8009614:	0800a19d 	.word	0x0800a19d
 8009618:	20000528 	.word	0x20000528

0800961c <cleanup_stdio>:
 800961c:	6841      	ldr	r1, [r0, #4]
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <cleanup_stdio+0x34>)
 8009620:	4299      	cmp	r1, r3
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	d001      	beq.n	800962c <cleanup_stdio+0x10>
 8009628:	f000 fdb8 	bl	800a19c <_fflush_r>
 800962c:	68a1      	ldr	r1, [r4, #8]
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <cleanup_stdio+0x38>)
 8009630:	4299      	cmp	r1, r3
 8009632:	d002      	beq.n	800963a <cleanup_stdio+0x1e>
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fdb1 	bl	800a19c <_fflush_r>
 800963a:	68e1      	ldr	r1, [r4, #12]
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <cleanup_stdio+0x3c>)
 800963e:	4299      	cmp	r1, r3
 8009640:	d004      	beq.n	800964c <cleanup_stdio+0x30>
 8009642:	4620      	mov	r0, r4
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f000 bda8 	b.w	800a19c <_fflush_r>
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	20000c0c 	.word	0x20000c0c
 8009654:	20000c74 	.word	0x20000c74
 8009658:	20000cdc 	.word	0x20000cdc

0800965c <global_stdio_init.part.0>:
 800965c:	b510      	push	{r4, lr}
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <global_stdio_init.part.0+0x30>)
 8009660:	4c0b      	ldr	r4, [pc, #44]	; (8009690 <global_stdio_init.part.0+0x34>)
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <global_stdio_init.part.0+0x38>)
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	4620      	mov	r0, r4
 8009668:	2200      	movs	r2, #0
 800966a:	2104      	movs	r1, #4
 800966c:	f7ff ff94 	bl	8009598 <std>
 8009670:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009674:	2201      	movs	r2, #1
 8009676:	2109      	movs	r1, #9
 8009678:	f7ff ff8e 	bl	8009598 <std>
 800967c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009680:	2202      	movs	r2, #2
 8009682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff bf86 	b.w	8009598 <std>
 800968c:	20000d44 	.word	0x20000d44
 8009690:	20000c0c 	.word	0x20000c0c
 8009694:	08009605 	.word	0x08009605

08009698 <__sfp_lock_acquire>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sfp_lock_acquire+0x8>)
 800969a:	f000 b90e 	b.w	80098ba <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	20000d4d 	.word	0x20000d4d

080096a4 <__sfp_lock_release>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sfp_lock_release+0x8>)
 80096a6:	f000 b909 	b.w	80098bc <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	20000d4d 	.word	0x20000d4d

080096b0 <__sinit>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4604      	mov	r4, r0
 80096b4:	f7ff fff0 	bl	8009698 <__sfp_lock_acquire>
 80096b8:	6a23      	ldr	r3, [r4, #32]
 80096ba:	b11b      	cbz	r3, 80096c4 <__sinit+0x14>
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f7ff bff0 	b.w	80096a4 <__sfp_lock_release>
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <__sinit+0x28>)
 80096c6:	6223      	str	r3, [r4, #32]
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <__sinit+0x2c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f5      	bne.n	80096bc <__sinit+0xc>
 80096d0:	f7ff ffc4 	bl	800965c <global_stdio_init.part.0>
 80096d4:	e7f2      	b.n	80096bc <__sinit+0xc>
 80096d6:	bf00      	nop
 80096d8:	0800961d 	.word	0x0800961d
 80096dc:	20000d44 	.word	0x20000d44

080096e0 <fiprintf>:
 80096e0:	b40e      	push	{r1, r2, r3}
 80096e2:	b503      	push	{r0, r1, lr}
 80096e4:	4601      	mov	r1, r0
 80096e6:	ab03      	add	r3, sp, #12
 80096e8:	4805      	ldr	r0, [pc, #20]	; (8009700 <fiprintf+0x20>)
 80096ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ee:	6800      	ldr	r0, [r0, #0]
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	f000 fa23 	bl	8009b3c <_vfiprintf_r>
 80096f6:	b002      	add	sp, #8
 80096f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096fc:	b003      	add	sp, #12
 80096fe:	4770      	bx	lr
 8009700:	20000574 	.word	0x20000574

08009704 <_fwalk_sglue>:
 8009704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009708:	4607      	mov	r7, r0
 800970a:	4688      	mov	r8, r1
 800970c:	4614      	mov	r4, r2
 800970e:	2600      	movs	r6, #0
 8009710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009714:	f1b9 0901 	subs.w	r9, r9, #1
 8009718:	d505      	bpl.n	8009726 <_fwalk_sglue+0x22>
 800971a:	6824      	ldr	r4, [r4, #0]
 800971c:	2c00      	cmp	r4, #0
 800971e:	d1f7      	bne.n	8009710 <_fwalk_sglue+0xc>
 8009720:	4630      	mov	r0, r6
 8009722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d907      	bls.n	800973c <_fwalk_sglue+0x38>
 800972c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009730:	3301      	adds	r3, #1
 8009732:	d003      	beq.n	800973c <_fwalk_sglue+0x38>
 8009734:	4629      	mov	r1, r5
 8009736:	4638      	mov	r0, r7
 8009738:	47c0      	blx	r8
 800973a:	4306      	orrs	r6, r0
 800973c:	3568      	adds	r5, #104	; 0x68
 800973e:	e7e9      	b.n	8009714 <_fwalk_sglue+0x10>

08009740 <__sread>:
 8009740:	b510      	push	{r4, lr}
 8009742:	460c      	mov	r4, r1
 8009744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009748:	f000 f868 	bl	800981c <_read_r>
 800974c:	2800      	cmp	r0, #0
 800974e:	bfab      	itete	ge
 8009750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009752:	89a3      	ldrhlt	r3, [r4, #12]
 8009754:	181b      	addge	r3, r3, r0
 8009756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800975a:	bfac      	ite	ge
 800975c:	6563      	strge	r3, [r4, #84]	; 0x54
 800975e:	81a3      	strhlt	r3, [r4, #12]
 8009760:	bd10      	pop	{r4, pc}

08009762 <__swrite>:
 8009762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	461f      	mov	r7, r3
 8009768:	898b      	ldrh	r3, [r1, #12]
 800976a:	05db      	lsls	r3, r3, #23
 800976c:	4605      	mov	r5, r0
 800976e:	460c      	mov	r4, r1
 8009770:	4616      	mov	r6, r2
 8009772:	d505      	bpl.n	8009780 <__swrite+0x1e>
 8009774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009778:	2302      	movs	r3, #2
 800977a:	2200      	movs	r2, #0
 800977c:	f000 f83c 	bl	80097f8 <_lseek_r>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800978a:	81a3      	strh	r3, [r4, #12]
 800978c:	4632      	mov	r2, r6
 800978e:	463b      	mov	r3, r7
 8009790:	4628      	mov	r0, r5
 8009792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009796:	f000 b853 	b.w	8009840 <_write_r>

0800979a <__sseek>:
 800979a:	b510      	push	{r4, lr}
 800979c:	460c      	mov	r4, r1
 800979e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a2:	f000 f829 	bl	80097f8 <_lseek_r>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	89a3      	ldrh	r3, [r4, #12]
 80097aa:	bf15      	itete	ne
 80097ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097b6:	81a3      	strheq	r3, [r4, #12]
 80097b8:	bf18      	it	ne
 80097ba:	81a3      	strhne	r3, [r4, #12]
 80097bc:	bd10      	pop	{r4, pc}

080097be <__sclose>:
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 b809 	b.w	80097d8 <_close_r>

080097c6 <memset>:
 80097c6:	4402      	add	r2, r0
 80097c8:	4603      	mov	r3, r0
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d100      	bne.n	80097d0 <memset+0xa>
 80097ce:	4770      	bx	lr
 80097d0:	f803 1b01 	strb.w	r1, [r3], #1
 80097d4:	e7f9      	b.n	80097ca <memset+0x4>
	...

080097d8 <_close_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	; (80097f4 <_close_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f9 fa15 	bl	8002c12 <_close>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_close_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_close_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000d48 	.word	0x20000d48

080097f8 <_lseek_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	; (8009818 <_lseek_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f9 fa2a 	bl	8002c60 <_lseek>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_lseek_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_lseek_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20000d48 	.word	0x20000d48

0800981c <_read_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	; (800983c <_read_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f9 f9b8 	bl	8002ba0 <_read>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_read_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_read_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20000d48 	.word	0x20000d48

08009840 <_write_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <_write_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f9 f9c3 	bl	8002bda <_write>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_write_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_write_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20000d48 	.word	0x20000d48

08009864 <__errno>:
 8009864:	4b01      	ldr	r3, [pc, #4]	; (800986c <__errno+0x8>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000574 	.word	0x20000574

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4d0d      	ldr	r5, [pc, #52]	; (80098a8 <__libc_init_array+0x38>)
 8009874:	4c0d      	ldr	r4, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	2600      	movs	r6, #0
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	4d0b      	ldr	r5, [pc, #44]	; (80098b0 <__libc_init_array+0x40>)
 8009882:	4c0c      	ldr	r4, [pc, #48]	; (80098b4 <__libc_init_array+0x44>)
 8009884:	f000 fe20 	bl	800a4c8 <_init>
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	2600      	movs	r6, #0
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800cd0c 	.word	0x0800cd0c
 80098ac:	0800cd0c 	.word	0x0800cd0c
 80098b0:	0800cd0c 	.word	0x0800cd0c
 80098b4:	0800cd10 	.word	0x0800cd10

080098b8 <__retarget_lock_init_recursive>:
 80098b8:	4770      	bx	lr

080098ba <__retarget_lock_acquire_recursive>:
 80098ba:	4770      	bx	lr

080098bc <__retarget_lock_release_recursive>:
 80098bc:	4770      	bx	lr

080098be <memcpy>:
 80098be:	440a      	add	r2, r1
 80098c0:	4291      	cmp	r1, r2
 80098c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c6:	d100      	bne.n	80098ca <memcpy+0xc>
 80098c8:	4770      	bx	lr
 80098ca:	b510      	push	{r4, lr}
 80098cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d4:	4291      	cmp	r1, r2
 80098d6:	d1f9      	bne.n	80098cc <memcpy+0xe>
 80098d8:	bd10      	pop	{r4, pc}

080098da <abort>:
 80098da:	b508      	push	{r3, lr}
 80098dc:	2006      	movs	r0, #6
 80098de:	f000 fd43 	bl	800a368 <raise>
 80098e2:	2001      	movs	r0, #1
 80098e4:	f7f9 f952 	bl	8002b8c <_exit>

080098e8 <_free_r>:
 80098e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ea:	2900      	cmp	r1, #0
 80098ec:	d044      	beq.n	8009978 <_free_r+0x90>
 80098ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098f2:	9001      	str	r0, [sp, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f1a1 0404 	sub.w	r4, r1, #4
 80098fa:	bfb8      	it	lt
 80098fc:	18e4      	addlt	r4, r4, r3
 80098fe:	f000 f8e7 	bl	8009ad0 <__malloc_lock>
 8009902:	4a1e      	ldr	r2, [pc, #120]	; (800997c <_free_r+0x94>)
 8009904:	9801      	ldr	r0, [sp, #4]
 8009906:	6813      	ldr	r3, [r2, #0]
 8009908:	b933      	cbnz	r3, 8009918 <_free_r+0x30>
 800990a:	6063      	str	r3, [r4, #4]
 800990c:	6014      	str	r4, [r2, #0]
 800990e:	b003      	add	sp, #12
 8009910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009914:	f000 b8e2 	b.w	8009adc <__malloc_unlock>
 8009918:	42a3      	cmp	r3, r4
 800991a:	d908      	bls.n	800992e <_free_r+0x46>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf01      	itttt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	1949      	addeq	r1, r1, r5
 800992a:	6021      	streq	r1, [r4, #0]
 800992c:	e7ed      	b.n	800990a <_free_r+0x22>
 800992e:	461a      	mov	r2, r3
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b10b      	cbz	r3, 8009938 <_free_r+0x50>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d9fa      	bls.n	800992e <_free_r+0x46>
 8009938:	6811      	ldr	r1, [r2, #0]
 800993a:	1855      	adds	r5, r2, r1
 800993c:	42a5      	cmp	r5, r4
 800993e:	d10b      	bne.n	8009958 <_free_r+0x70>
 8009940:	6824      	ldr	r4, [r4, #0]
 8009942:	4421      	add	r1, r4
 8009944:	1854      	adds	r4, r2, r1
 8009946:	42a3      	cmp	r3, r4
 8009948:	6011      	str	r1, [r2, #0]
 800994a:	d1e0      	bne.n	800990e <_free_r+0x26>
 800994c:	681c      	ldr	r4, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	6053      	str	r3, [r2, #4]
 8009952:	440c      	add	r4, r1
 8009954:	6014      	str	r4, [r2, #0]
 8009956:	e7da      	b.n	800990e <_free_r+0x26>
 8009958:	d902      	bls.n	8009960 <_free_r+0x78>
 800995a:	230c      	movs	r3, #12
 800995c:	6003      	str	r3, [r0, #0]
 800995e:	e7d6      	b.n	800990e <_free_r+0x26>
 8009960:	6825      	ldr	r5, [r4, #0]
 8009962:	1961      	adds	r1, r4, r5
 8009964:	428b      	cmp	r3, r1
 8009966:	bf04      	itt	eq
 8009968:	6819      	ldreq	r1, [r3, #0]
 800996a:	685b      	ldreq	r3, [r3, #4]
 800996c:	6063      	str	r3, [r4, #4]
 800996e:	bf04      	itt	eq
 8009970:	1949      	addeq	r1, r1, r5
 8009972:	6021      	streq	r1, [r4, #0]
 8009974:	6054      	str	r4, [r2, #4]
 8009976:	e7ca      	b.n	800990e <_free_r+0x26>
 8009978:	b003      	add	sp, #12
 800997a:	bd30      	pop	{r4, r5, pc}
 800997c:	20000d50 	.word	0x20000d50

08009980 <malloc>:
 8009980:	4b02      	ldr	r3, [pc, #8]	; (800998c <malloc+0xc>)
 8009982:	4601      	mov	r1, r0
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	f000 b823 	b.w	80099d0 <_malloc_r>
 800998a:	bf00      	nop
 800998c:	20000574 	.word	0x20000574

08009990 <sbrk_aligned>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4e0e      	ldr	r6, [pc, #56]	; (80099cc <sbrk_aligned+0x3c>)
 8009994:	460c      	mov	r4, r1
 8009996:	6831      	ldr	r1, [r6, #0]
 8009998:	4605      	mov	r5, r0
 800999a:	b911      	cbnz	r1, 80099a2 <sbrk_aligned+0x12>
 800999c:	f000 fd00 	bl	800a3a0 <_sbrk_r>
 80099a0:	6030      	str	r0, [r6, #0]
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 fcfb 	bl	800a3a0 <_sbrk_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	d00a      	beq.n	80099c4 <sbrk_aligned+0x34>
 80099ae:	1cc4      	adds	r4, r0, #3
 80099b0:	f024 0403 	bic.w	r4, r4, #3
 80099b4:	42a0      	cmp	r0, r4
 80099b6:	d007      	beq.n	80099c8 <sbrk_aligned+0x38>
 80099b8:	1a21      	subs	r1, r4, r0
 80099ba:	4628      	mov	r0, r5
 80099bc:	f000 fcf0 	bl	800a3a0 <_sbrk_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d101      	bne.n	80099c8 <sbrk_aligned+0x38>
 80099c4:	f04f 34ff 	mov.w	r4, #4294967295
 80099c8:	4620      	mov	r0, r4
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	20000d54 	.word	0x20000d54

080099d0 <_malloc_r>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	1ccd      	adds	r5, r1, #3
 80099d6:	f025 0503 	bic.w	r5, r5, #3
 80099da:	3508      	adds	r5, #8
 80099dc:	2d0c      	cmp	r5, #12
 80099de:	bf38      	it	cc
 80099e0:	250c      	movcc	r5, #12
 80099e2:	2d00      	cmp	r5, #0
 80099e4:	4607      	mov	r7, r0
 80099e6:	db01      	blt.n	80099ec <_malloc_r+0x1c>
 80099e8:	42a9      	cmp	r1, r5
 80099ea:	d905      	bls.n	80099f8 <_malloc_r+0x28>
 80099ec:	230c      	movs	r3, #12
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	2600      	movs	r6, #0
 80099f2:	4630      	mov	r0, r6
 80099f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009acc <_malloc_r+0xfc>
 80099fc:	f000 f868 	bl	8009ad0 <__malloc_lock>
 8009a00:	f8d8 3000 	ldr.w	r3, [r8]
 8009a04:	461c      	mov	r4, r3
 8009a06:	bb5c      	cbnz	r4, 8009a60 <_malloc_r+0x90>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4638      	mov	r0, r7
 8009a0c:	f7ff ffc0 	bl	8009990 <sbrk_aligned>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	4604      	mov	r4, r0
 8009a14:	d155      	bne.n	8009ac2 <_malloc_r+0xf2>
 8009a16:	f8d8 4000 	ldr.w	r4, [r8]
 8009a1a:	4626      	mov	r6, r4
 8009a1c:	2e00      	cmp	r6, #0
 8009a1e:	d145      	bne.n	8009aac <_malloc_r+0xdc>
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	d048      	beq.n	8009ab6 <_malloc_r+0xe6>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	4631      	mov	r1, r6
 8009a28:	4638      	mov	r0, r7
 8009a2a:	eb04 0903 	add.w	r9, r4, r3
 8009a2e:	f000 fcb7 	bl	800a3a0 <_sbrk_r>
 8009a32:	4581      	cmp	r9, r0
 8009a34:	d13f      	bne.n	8009ab6 <_malloc_r+0xe6>
 8009a36:	6821      	ldr	r1, [r4, #0]
 8009a38:	1a6d      	subs	r5, r5, r1
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f7ff ffa7 	bl	8009990 <sbrk_aligned>
 8009a42:	3001      	adds	r0, #1
 8009a44:	d037      	beq.n	8009ab6 <_malloc_r+0xe6>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	442b      	add	r3, r5
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d038      	beq.n	8009ac6 <_malloc_r+0xf6>
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	42a2      	cmp	r2, r4
 8009a58:	d12b      	bne.n	8009ab2 <_malloc_r+0xe2>
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	e00f      	b.n	8009a80 <_malloc_r+0xb0>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1b52      	subs	r2, r2, r5
 8009a64:	d41f      	bmi.n	8009aa6 <_malloc_r+0xd6>
 8009a66:	2a0b      	cmp	r2, #11
 8009a68:	d917      	bls.n	8009a9a <_malloc_r+0xca>
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	6059      	strne	r1, [r3, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	bf08      	it	eq
 8009a78:	f8c8 1000 	streq.w	r1, [r8]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4638      	mov	r0, r7
 8009a82:	f104 060b 	add.w	r6, r4, #11
 8009a86:	f000 f829 	bl	8009adc <__malloc_unlock>
 8009a8a:	f026 0607 	bic.w	r6, r6, #7
 8009a8e:	1d23      	adds	r3, r4, #4
 8009a90:	1af2      	subs	r2, r6, r3
 8009a92:	d0ae      	beq.n	80099f2 <_malloc_r+0x22>
 8009a94:	1b9b      	subs	r3, r3, r6
 8009a96:	50a3      	str	r3, [r4, r2]
 8009a98:	e7ab      	b.n	80099f2 <_malloc_r+0x22>
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	6862      	ldr	r2, [r4, #4]
 8009a9e:	d1dd      	bne.n	8009a5c <_malloc_r+0x8c>
 8009aa0:	f8c8 2000 	str.w	r2, [r8]
 8009aa4:	e7ec      	b.n	8009a80 <_malloc_r+0xb0>
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	6864      	ldr	r4, [r4, #4]
 8009aaa:	e7ac      	b.n	8009a06 <_malloc_r+0x36>
 8009aac:	4634      	mov	r4, r6
 8009aae:	6876      	ldr	r6, [r6, #4]
 8009ab0:	e7b4      	b.n	8009a1c <_malloc_r+0x4c>
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	e7cc      	b.n	8009a50 <_malloc_r+0x80>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	603b      	str	r3, [r7, #0]
 8009aba:	4638      	mov	r0, r7
 8009abc:	f000 f80e 	bl	8009adc <__malloc_unlock>
 8009ac0:	e797      	b.n	80099f2 <_malloc_r+0x22>
 8009ac2:	6025      	str	r5, [r4, #0]
 8009ac4:	e7dc      	b.n	8009a80 <_malloc_r+0xb0>
 8009ac6:	605b      	str	r3, [r3, #4]
 8009ac8:	deff      	udf	#255	; 0xff
 8009aca:	bf00      	nop
 8009acc:	20000d50 	.word	0x20000d50

08009ad0 <__malloc_lock>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__malloc_lock+0x8>)
 8009ad2:	f7ff bef2 	b.w	80098ba <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000d4c 	.word	0x20000d4c

08009adc <__malloc_unlock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_unlock+0x8>)
 8009ade:	f7ff beed 	b.w	80098bc <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20000d4c 	.word	0x20000d4c

08009ae8 <__sfputc_r>:
 8009ae8:	6893      	ldr	r3, [r2, #8]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	b410      	push	{r4}
 8009af0:	6093      	str	r3, [r2, #8]
 8009af2:	da08      	bge.n	8009b06 <__sfputc_r+0x1e>
 8009af4:	6994      	ldr	r4, [r2, #24]
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	db01      	blt.n	8009afe <__sfputc_r+0x16>
 8009afa:	290a      	cmp	r1, #10
 8009afc:	d103      	bne.n	8009b06 <__sfputc_r+0x1e>
 8009afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b02:	f000 bb73 	b.w	800a1ec <__swbuf_r>
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	1c58      	adds	r0, r3, #1
 8009b0a:	6010      	str	r0, [r2, #0]
 8009b0c:	7019      	strb	r1, [r3, #0]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <__sfputs_r>:
 8009b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	18d5      	adds	r5, r2, r3
 8009b20:	42ac      	cmp	r4, r5
 8009b22:	d101      	bne.n	8009b28 <__sfputs_r+0x12>
 8009b24:	2000      	movs	r0, #0
 8009b26:	e007      	b.n	8009b38 <__sfputs_r+0x22>
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ffda 	bl	8009ae8 <__sfputc_r>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d1f3      	bne.n	8009b20 <__sfputs_r+0xa>
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b3c <_vfiprintf_r>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	460d      	mov	r5, r1
 8009b42:	b09d      	sub	sp, #116	; 0x74
 8009b44:	4614      	mov	r4, r2
 8009b46:	4698      	mov	r8, r3
 8009b48:	4606      	mov	r6, r0
 8009b4a:	b118      	cbz	r0, 8009b54 <_vfiprintf_r+0x18>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <_vfiprintf_r+0x18>
 8009b50:	f7ff fdae 	bl	80096b0 <__sinit>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b62:	f7ff feaa 	bl	80098ba <__retarget_lock_acquire_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	071b      	lsls	r3, r3, #28
 8009b6a:	d501      	bpl.n	8009b70 <_vfiprintf_r+0x34>
 8009b6c:	692b      	ldr	r3, [r5, #16]
 8009b6e:	b99b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x5c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 fb78 	bl	800a268 <__swsetup_r>
 8009b78:	b170      	cbz	r0, 8009b98 <_vfiprintf_r+0x5c>
 8009b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b7c:	07dc      	lsls	r4, r3, #31
 8009b7e:	d504      	bpl.n	8009b8a <_vfiprintf_r+0x4e>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	b01d      	add	sp, #116	; 0x74
 8009b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4f7      	bmi.n	8009b80 <_vfiprintf_r+0x44>
 8009b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b92:	f7ff fe93 	bl	80098bc <__retarget_lock_release_recursive>
 8009b96:	e7f3      	b.n	8009b80 <_vfiprintf_r+0x44>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	; 0x30
 8009ba8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d5c <_vfiprintf_r+0x220>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0x86>
 8009bbe:	2a25      	cmp	r2, #37	; 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x7a>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xa4>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ffa1 	bl	8009b16 <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80a9 	beq.w	8009d2c <_vfiprintf_r+0x1f0>
 8009bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	; 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80a1 	beq.w	8009d2c <_vfiprintf_r+0x1f0>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c00:	931a      	str	r3, [sp, #104]	; 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4854      	ldr	r0, [pc, #336]	; (8009d5c <_vfiprintf_r+0x220>)
 8009c0c:	f7f6 faf8 	bl	8000200 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x110>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	; 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x120>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	; 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94d      	bls.n	8009ce2 <_vfiprintf_r+0x1a6>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x13a>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x13a>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xc6>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7a:	d10c      	bne.n	8009c96 <_vfiprintf_r+0x15a>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c80:	d134      	bne.n	8009cec <_vfiprintf_r+0x1b0>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfb8      	it	lt
 8009c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c92:	3402      	adds	r4, #2
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d6c <_vfiprintf_r+0x230>
 8009c9a:	7821      	ldrb	r1, [r4, #0]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f7f6 faae 	bl	8000200 <memchr>
 8009ca4:	b138      	cbz	r0, 8009cb6 <_vfiprintf_r+0x17a>
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	eba0 000a 	sub.w	r0, r0, sl
 8009cac:	2240      	movs	r2, #64	; 0x40
 8009cae:	4082      	lsls	r2, r0
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	3401      	adds	r4, #1
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cba:	4829      	ldr	r0, [pc, #164]	; (8009d60 <_vfiprintf_r+0x224>)
 8009cbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cc0:	2206      	movs	r2, #6
 8009cc2:	f7f6 fa9d 	bl	8000200 <memchr>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d03f      	beq.n	8009d4a <_vfiprintf_r+0x20e>
 8009cca:	4b26      	ldr	r3, [pc, #152]	; (8009d64 <_vfiprintf_r+0x228>)
 8009ccc:	bb1b      	cbnz	r3, 8009d16 <_vfiprintf_r+0x1da>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	f023 0307 	bic.w	r3, r3, #7
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	443b      	add	r3, r7
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	e768      	b.n	8009bb4 <_vfiprintf_r+0x78>
 8009ce2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	2001      	movs	r0, #1
 8009cea:	e7a6      	b.n	8009c3a <_vfiprintf_r+0xfe>
 8009cec:	2300      	movs	r3, #0
 8009cee:	3401      	adds	r4, #1
 8009cf0:	9305      	str	r3, [sp, #20]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f04f 0c0a 	mov.w	ip, #10
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfe:	3a30      	subs	r2, #48	; 0x30
 8009d00:	2a09      	cmp	r2, #9
 8009d02:	d903      	bls.n	8009d0c <_vfiprintf_r+0x1d0>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0c6      	beq.n	8009c96 <_vfiprintf_r+0x15a>
 8009d08:	9105      	str	r1, [sp, #20]
 8009d0a:	e7c4      	b.n	8009c96 <_vfiprintf_r+0x15a>
 8009d0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d10:	4604      	mov	r4, r0
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7f0      	b.n	8009cf8 <_vfiprintf_r+0x1bc>
 8009d16:	ab03      	add	r3, sp, #12
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	462a      	mov	r2, r5
 8009d1c:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <_vfiprintf_r+0x22c>)
 8009d1e:	a904      	add	r1, sp, #16
 8009d20:	4630      	mov	r0, r6
 8009d22:	f3af 8000 	nop.w
 8009d26:	4607      	mov	r7, r0
 8009d28:	1c78      	adds	r0, r7, #1
 8009d2a:	d1d6      	bne.n	8009cda <_vfiprintf_r+0x19e>
 8009d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d2e:	07d9      	lsls	r1, r3, #31
 8009d30:	d405      	bmi.n	8009d3e <_vfiprintf_r+0x202>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	059a      	lsls	r2, r3, #22
 8009d36:	d402      	bmi.n	8009d3e <_vfiprintf_r+0x202>
 8009d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3a:	f7ff fdbf 	bl	80098bc <__retarget_lock_release_recursive>
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	065b      	lsls	r3, r3, #25
 8009d42:	f53f af1d 	bmi.w	8009b80 <_vfiprintf_r+0x44>
 8009d46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d48:	e71c      	b.n	8009b84 <_vfiprintf_r+0x48>
 8009d4a:	ab03      	add	r3, sp, #12
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	462a      	mov	r2, r5
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <_vfiprintf_r+0x22c>)
 8009d52:	a904      	add	r1, sp, #16
 8009d54:	4630      	mov	r0, r6
 8009d56:	f000 f879 	bl	8009e4c <_printf_i>
 8009d5a:	e7e4      	b.n	8009d26 <_vfiprintf_r+0x1ea>
 8009d5c:	0800cccf 	.word	0x0800cccf
 8009d60:	0800ccd9 	.word	0x0800ccd9
 8009d64:	00000000 	.word	0x00000000
 8009d68:	08009b17 	.word	0x08009b17
 8009d6c:	0800ccd5 	.word	0x0800ccd5

08009d70 <_printf_common>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	4616      	mov	r6, r2
 8009d76:	4699      	mov	r9, r3
 8009d78:	688a      	ldr	r2, [r1, #8]
 8009d7a:	690b      	ldr	r3, [r1, #16]
 8009d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	bfb8      	it	lt
 8009d84:	4613      	movlt	r3, r2
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	b10a      	cbz	r2, 8009d96 <_printf_common+0x26>
 8009d92:	3301      	adds	r3, #1
 8009d94:	6033      	str	r3, [r6, #0]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	0699      	lsls	r1, r3, #26
 8009d9a:	bf42      	ittt	mi
 8009d9c:	6833      	ldrmi	r3, [r6, #0]
 8009d9e:	3302      	addmi	r3, #2
 8009da0:	6033      	strmi	r3, [r6, #0]
 8009da2:	6825      	ldr	r5, [r4, #0]
 8009da4:	f015 0506 	ands.w	r5, r5, #6
 8009da8:	d106      	bne.n	8009db8 <_printf_common+0x48>
 8009daa:	f104 0a19 	add.w	sl, r4, #25
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	6832      	ldr	r2, [r6, #0]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dc26      	bgt.n	8009e06 <_printf_common+0x96>
 8009db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dbc:	1e13      	subs	r3, r2, #0
 8009dbe:	6822      	ldr	r2, [r4, #0]
 8009dc0:	bf18      	it	ne
 8009dc2:	2301      	movne	r3, #1
 8009dc4:	0692      	lsls	r2, r2, #26
 8009dc6:	d42b      	bmi.n	8009e20 <_printf_common+0xb0>
 8009dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4638      	mov	r0, r7
 8009dd0:	47c0      	blx	r8
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d01e      	beq.n	8009e14 <_printf_common+0xa4>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	6922      	ldr	r2, [r4, #16]
 8009dda:	f003 0306 	and.w	r3, r3, #6
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	bf02      	ittt	eq
 8009de2:	68e5      	ldreq	r5, [r4, #12]
 8009de4:	6833      	ldreq	r3, [r6, #0]
 8009de6:	1aed      	subeq	r5, r5, r3
 8009de8:	68a3      	ldr	r3, [r4, #8]
 8009dea:	bf0c      	ite	eq
 8009dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df0:	2500      	movne	r5, #0
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bfc4      	itt	gt
 8009df6:	1a9b      	subgt	r3, r3, r2
 8009df8:	18ed      	addgt	r5, r5, r3
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	341a      	adds	r4, #26
 8009dfe:	42b5      	cmp	r5, r6
 8009e00:	d11a      	bne.n	8009e38 <_printf_common+0xc8>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e008      	b.n	8009e18 <_printf_common+0xa8>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4652      	mov	r2, sl
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	47c0      	blx	r8
 8009e10:	3001      	adds	r0, #1
 8009e12:	d103      	bne.n	8009e1c <_printf_common+0xac>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	e7c6      	b.n	8009dae <_printf_common+0x3e>
 8009e20:	18e1      	adds	r1, r4, r3
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	2030      	movs	r0, #48	; 0x30
 8009e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e2a:	4422      	add	r2, r4
 8009e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e34:	3302      	adds	r3, #2
 8009e36:	e7c7      	b.n	8009dc8 <_printf_common+0x58>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c0      	blx	r8
 8009e42:	3001      	adds	r0, #1
 8009e44:	d0e6      	beq.n	8009e14 <_printf_common+0xa4>
 8009e46:	3601      	adds	r6, #1
 8009e48:	e7d9      	b.n	8009dfe <_printf_common+0x8e>
	...

08009e4c <_printf_i>:
 8009e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	7e0f      	ldrb	r7, [r1, #24]
 8009e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e54:	2f78      	cmp	r7, #120	; 0x78
 8009e56:	4691      	mov	r9, r2
 8009e58:	4680      	mov	r8, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	469a      	mov	sl, r3
 8009e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e62:	d807      	bhi.n	8009e74 <_printf_i+0x28>
 8009e64:	2f62      	cmp	r7, #98	; 0x62
 8009e66:	d80a      	bhi.n	8009e7e <_printf_i+0x32>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	f000 80d4 	beq.w	800a016 <_printf_i+0x1ca>
 8009e6e:	2f58      	cmp	r7, #88	; 0x58
 8009e70:	f000 80c0 	beq.w	8009ff4 <_printf_i+0x1a8>
 8009e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e7c:	e03a      	b.n	8009ef4 <_printf_i+0xa8>
 8009e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e82:	2b15      	cmp	r3, #21
 8009e84:	d8f6      	bhi.n	8009e74 <_printf_i+0x28>
 8009e86:	a101      	add	r1, pc, #4	; (adr r1, 8009e8c <_printf_i+0x40>)
 8009e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009e75 	.word	0x08009e75
 8009e98:	08009e75 	.word	0x08009e75
 8009e9c:	08009e75 	.word	0x08009e75
 8009ea0:	08009e75 	.word	0x08009e75
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	08009e75 	.word	0x08009e75
 8009eac:	08009e75 	.word	0x08009e75
 8009eb0:	08009e75 	.word	0x08009e75
 8009eb4:	08009e75 	.word	0x08009e75
 8009eb8:	08009ffd 	.word	0x08009ffd
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009fb7 	.word	0x08009fb7
 8009ec4:	08009e75 	.word	0x08009e75
 8009ec8:	08009e75 	.word	0x08009e75
 8009ecc:	0800a01f 	.word	0x0800a01f
 8009ed0:	08009e75 	.word	0x08009e75
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009e75 	.word	0x08009e75
 8009edc:	08009e75 	.word	0x08009e75
 8009ee0:	08009fbf 	.word	0x08009fbf
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	602a      	str	r2, [r5, #0]
 8009eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e09f      	b.n	800a038 <_printf_i+0x1ec>
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	0607      	lsls	r7, r0, #24
 8009efe:	f103 0104 	add.w	r1, r3, #4
 8009f02:	6029      	str	r1, [r5, #0]
 8009f04:	d501      	bpl.n	8009f0a <_printf_i+0xbe>
 8009f06:	681e      	ldr	r6, [r3, #0]
 8009f08:	e003      	b.n	8009f12 <_printf_i+0xc6>
 8009f0a:	0646      	lsls	r6, r0, #25
 8009f0c:	d5fb      	bpl.n	8009f06 <_printf_i+0xba>
 8009f0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	da03      	bge.n	8009f1e <_printf_i+0xd2>
 8009f16:	232d      	movs	r3, #45	; 0x2d
 8009f18:	4276      	negs	r6, r6
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	485a      	ldr	r0, [pc, #360]	; (800a088 <_printf_i+0x23c>)
 8009f20:	230a      	movs	r3, #10
 8009f22:	e012      	b.n	8009f4a <_printf_i+0xfe>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	6029      	str	r1, [r5, #0]
 8009f2c:	0605      	lsls	r5, r0, #24
 8009f2e:	d501      	bpl.n	8009f34 <_printf_i+0xe8>
 8009f30:	681e      	ldr	r6, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <_printf_i+0xee>
 8009f34:	0641      	lsls	r1, r0, #25
 8009f36:	d5fb      	bpl.n	8009f30 <_printf_i+0xe4>
 8009f38:	881e      	ldrh	r6, [r3, #0]
 8009f3a:	4853      	ldr	r0, [pc, #332]	; (800a088 <_printf_i+0x23c>)
 8009f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f3e:	bf0c      	ite	eq
 8009f40:	2308      	moveq	r3, #8
 8009f42:	230a      	movne	r3, #10
 8009f44:	2100      	movs	r1, #0
 8009f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f4a:	6865      	ldr	r5, [r4, #4]
 8009f4c:	60a5      	str	r5, [r4, #8]
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	bfa2      	ittt	ge
 8009f52:	6821      	ldrge	r1, [r4, #0]
 8009f54:	f021 0104 	bicge.w	r1, r1, #4
 8009f58:	6021      	strge	r1, [r4, #0]
 8009f5a:	b90e      	cbnz	r6, 8009f60 <_printf_i+0x114>
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	d04b      	beq.n	8009ff8 <_printf_i+0x1ac>
 8009f60:	4615      	mov	r5, r2
 8009f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f66:	fb03 6711 	mls	r7, r3, r1, r6
 8009f6a:	5dc7      	ldrb	r7, [r0, r7]
 8009f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f70:	4637      	mov	r7, r6
 8009f72:	42bb      	cmp	r3, r7
 8009f74:	460e      	mov	r6, r1
 8009f76:	d9f4      	bls.n	8009f62 <_printf_i+0x116>
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d10b      	bne.n	8009f94 <_printf_i+0x148>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	07de      	lsls	r6, r3, #31
 8009f80:	d508      	bpl.n	8009f94 <_printf_i+0x148>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	6861      	ldr	r1, [r4, #4]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	bfde      	ittt	le
 8009f8a:	2330      	movle	r3, #48	; 0x30
 8009f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f94:	1b52      	subs	r2, r2, r5
 8009f96:	6122      	str	r2, [r4, #16]
 8009f98:	f8cd a000 	str.w	sl, [sp]
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	aa03      	add	r2, sp, #12
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	f7ff fee4 	bl	8009d70 <_printf_common>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d14a      	bne.n	800a042 <_printf_i+0x1f6>
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	b004      	add	sp, #16
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	f043 0320 	orr.w	r3, r3, #32
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	4833      	ldr	r0, [pc, #204]	; (800a08c <_printf_i+0x240>)
 8009fc0:	2778      	movs	r7, #120	; 0x78
 8009fc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	061f      	lsls	r7, r3, #24
 8009fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fd0:	d402      	bmi.n	8009fd8 <_printf_i+0x18c>
 8009fd2:	065f      	lsls	r7, r3, #25
 8009fd4:	bf48      	it	mi
 8009fd6:	b2b6      	uxthmi	r6, r6
 8009fd8:	07df      	lsls	r7, r3, #31
 8009fda:	bf48      	it	mi
 8009fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe0:	6029      	str	r1, [r5, #0]
 8009fe2:	bf48      	it	mi
 8009fe4:	6023      	strmi	r3, [r4, #0]
 8009fe6:	b91e      	cbnz	r6, 8009ff0 <_printf_i+0x1a4>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	f023 0320 	bic.w	r3, r3, #32
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	e7a7      	b.n	8009f44 <_printf_i+0xf8>
 8009ff4:	4824      	ldr	r0, [pc, #144]	; (800a088 <_printf_i+0x23c>)
 8009ff6:	e7e4      	b.n	8009fc2 <_printf_i+0x176>
 8009ff8:	4615      	mov	r5, r2
 8009ffa:	e7bd      	b.n	8009f78 <_printf_i+0x12c>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	6826      	ldr	r6, [r4, #0]
 800a000:	6961      	ldr	r1, [r4, #20]
 800a002:	1d18      	adds	r0, r3, #4
 800a004:	6028      	str	r0, [r5, #0]
 800a006:	0635      	lsls	r5, r6, #24
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	d501      	bpl.n	800a010 <_printf_i+0x1c4>
 800a00c:	6019      	str	r1, [r3, #0]
 800a00e:	e002      	b.n	800a016 <_printf_i+0x1ca>
 800a010:	0670      	lsls	r0, r6, #25
 800a012:	d5fb      	bpl.n	800a00c <_printf_i+0x1c0>
 800a014:	8019      	strh	r1, [r3, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	4615      	mov	r5, r2
 800a01c:	e7bc      	b.n	8009f98 <_printf_i+0x14c>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	1d1a      	adds	r2, r3, #4
 800a022:	602a      	str	r2, [r5, #0]
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	6862      	ldr	r2, [r4, #4]
 800a028:	2100      	movs	r1, #0
 800a02a:	4628      	mov	r0, r5
 800a02c:	f7f6 f8e8 	bl	8000200 <memchr>
 800a030:	b108      	cbz	r0, 800a036 <_printf_i+0x1ea>
 800a032:	1b40      	subs	r0, r0, r5
 800a034:	6060      	str	r0, [r4, #4]
 800a036:	6863      	ldr	r3, [r4, #4]
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	2300      	movs	r3, #0
 800a03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a040:	e7aa      	b.n	8009f98 <_printf_i+0x14c>
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	462a      	mov	r2, r5
 800a046:	4649      	mov	r1, r9
 800a048:	4640      	mov	r0, r8
 800a04a:	47d0      	blx	sl
 800a04c:	3001      	adds	r0, #1
 800a04e:	d0ad      	beq.n	8009fac <_printf_i+0x160>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	079b      	lsls	r3, r3, #30
 800a054:	d413      	bmi.n	800a07e <_printf_i+0x232>
 800a056:	68e0      	ldr	r0, [r4, #12]
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	4298      	cmp	r0, r3
 800a05c:	bfb8      	it	lt
 800a05e:	4618      	movlt	r0, r3
 800a060:	e7a6      	b.n	8009fb0 <_printf_i+0x164>
 800a062:	2301      	movs	r3, #1
 800a064:	4632      	mov	r2, r6
 800a066:	4649      	mov	r1, r9
 800a068:	4640      	mov	r0, r8
 800a06a:	47d0      	blx	sl
 800a06c:	3001      	adds	r0, #1
 800a06e:	d09d      	beq.n	8009fac <_printf_i+0x160>
 800a070:	3501      	adds	r5, #1
 800a072:	68e3      	ldr	r3, [r4, #12]
 800a074:	9903      	ldr	r1, [sp, #12]
 800a076:	1a5b      	subs	r3, r3, r1
 800a078:	42ab      	cmp	r3, r5
 800a07a:	dcf2      	bgt.n	800a062 <_printf_i+0x216>
 800a07c:	e7eb      	b.n	800a056 <_printf_i+0x20a>
 800a07e:	2500      	movs	r5, #0
 800a080:	f104 0619 	add.w	r6, r4, #25
 800a084:	e7f5      	b.n	800a072 <_printf_i+0x226>
 800a086:	bf00      	nop
 800a088:	0800cce0 	.word	0x0800cce0
 800a08c:	0800ccf1 	.word	0x0800ccf1

0800a090 <__sflush_r>:
 800a090:	898a      	ldrh	r2, [r1, #12]
 800a092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	4605      	mov	r5, r0
 800a098:	0710      	lsls	r0, r2, #28
 800a09a:	460c      	mov	r4, r1
 800a09c:	d458      	bmi.n	800a150 <__sflush_r+0xc0>
 800a09e:	684b      	ldr	r3, [r1, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dc05      	bgt.n	800a0b0 <__sflush_r+0x20>
 800a0a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dc02      	bgt.n	800a0b0 <__sflush_r+0x20>
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b2:	2e00      	cmp	r6, #0
 800a0b4:	d0f9      	beq.n	800a0aa <__sflush_r+0x1a>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0bc:	682f      	ldr	r7, [r5, #0]
 800a0be:	6a21      	ldr	r1, [r4, #32]
 800a0c0:	602b      	str	r3, [r5, #0]
 800a0c2:	d032      	beq.n	800a12a <__sflush_r+0x9a>
 800a0c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	075a      	lsls	r2, r3, #29
 800a0ca:	d505      	bpl.n	800a0d8 <__sflush_r+0x48>
 800a0cc:	6863      	ldr	r3, [r4, #4]
 800a0ce:	1ac0      	subs	r0, r0, r3
 800a0d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0d2:	b10b      	cbz	r3, 800a0d8 <__sflush_r+0x48>
 800a0d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0d6:	1ac0      	subs	r0, r0, r3
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0de:	6a21      	ldr	r1, [r4, #32]
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b0      	blx	r6
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	d106      	bne.n	800a0f8 <__sflush_r+0x68>
 800a0ea:	6829      	ldr	r1, [r5, #0]
 800a0ec:	291d      	cmp	r1, #29
 800a0ee:	d82b      	bhi.n	800a148 <__sflush_r+0xb8>
 800a0f0:	4a29      	ldr	r2, [pc, #164]	; (800a198 <__sflush_r+0x108>)
 800a0f2:	410a      	asrs	r2, r1
 800a0f4:	07d6      	lsls	r6, r2, #31
 800a0f6:	d427      	bmi.n	800a148 <__sflush_r+0xb8>
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	6062      	str	r2, [r4, #4]
 800a0fc:	04d9      	lsls	r1, r3, #19
 800a0fe:	6922      	ldr	r2, [r4, #16]
 800a100:	6022      	str	r2, [r4, #0]
 800a102:	d504      	bpl.n	800a10e <__sflush_r+0x7e>
 800a104:	1c42      	adds	r2, r0, #1
 800a106:	d101      	bne.n	800a10c <__sflush_r+0x7c>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b903      	cbnz	r3, 800a10e <__sflush_r+0x7e>
 800a10c:	6560      	str	r0, [r4, #84]	; 0x54
 800a10e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a110:	602f      	str	r7, [r5, #0]
 800a112:	2900      	cmp	r1, #0
 800a114:	d0c9      	beq.n	800a0aa <__sflush_r+0x1a>
 800a116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a11a:	4299      	cmp	r1, r3
 800a11c:	d002      	beq.n	800a124 <__sflush_r+0x94>
 800a11e:	4628      	mov	r0, r5
 800a120:	f7ff fbe2 	bl	80098e8 <_free_r>
 800a124:	2000      	movs	r0, #0
 800a126:	6360      	str	r0, [r4, #52]	; 0x34
 800a128:	e7c0      	b.n	800a0ac <__sflush_r+0x1c>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b0      	blx	r6
 800a130:	1c41      	adds	r1, r0, #1
 800a132:	d1c8      	bne.n	800a0c6 <__sflush_r+0x36>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d0c5      	beq.n	800a0c6 <__sflush_r+0x36>
 800a13a:	2b1d      	cmp	r3, #29
 800a13c:	d001      	beq.n	800a142 <__sflush_r+0xb2>
 800a13e:	2b16      	cmp	r3, #22
 800a140:	d101      	bne.n	800a146 <__sflush_r+0xb6>
 800a142:	602f      	str	r7, [r5, #0]
 800a144:	e7b1      	b.n	800a0aa <__sflush_r+0x1a>
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	e7ad      	b.n	800a0ac <__sflush_r+0x1c>
 800a150:	690f      	ldr	r7, [r1, #16]
 800a152:	2f00      	cmp	r7, #0
 800a154:	d0a9      	beq.n	800a0aa <__sflush_r+0x1a>
 800a156:	0793      	lsls	r3, r2, #30
 800a158:	680e      	ldr	r6, [r1, #0]
 800a15a:	bf08      	it	eq
 800a15c:	694b      	ldreq	r3, [r1, #20]
 800a15e:	600f      	str	r7, [r1, #0]
 800a160:	bf18      	it	ne
 800a162:	2300      	movne	r3, #0
 800a164:	eba6 0807 	sub.w	r8, r6, r7
 800a168:	608b      	str	r3, [r1, #8]
 800a16a:	f1b8 0f00 	cmp.w	r8, #0
 800a16e:	dd9c      	ble.n	800a0aa <__sflush_r+0x1a>
 800a170:	6a21      	ldr	r1, [r4, #32]
 800a172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a174:	4643      	mov	r3, r8
 800a176:	463a      	mov	r2, r7
 800a178:	4628      	mov	r0, r5
 800a17a:	47b0      	blx	r6
 800a17c:	2800      	cmp	r0, #0
 800a17e:	dc06      	bgt.n	800a18e <__sflush_r+0xfe>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	e78e      	b.n	800a0ac <__sflush_r+0x1c>
 800a18e:	4407      	add	r7, r0
 800a190:	eba8 0800 	sub.w	r8, r8, r0
 800a194:	e7e9      	b.n	800a16a <__sflush_r+0xda>
 800a196:	bf00      	nop
 800a198:	dfbffffe 	.word	0xdfbffffe

0800a19c <_fflush_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	690b      	ldr	r3, [r1, #16]
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b913      	cbnz	r3, 800a1ac <_fflush_r+0x10>
 800a1a6:	2500      	movs	r5, #0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	b118      	cbz	r0, 800a1b6 <_fflush_r+0x1a>
 800a1ae:	6a03      	ldr	r3, [r0, #32]
 800a1b0:	b90b      	cbnz	r3, 800a1b6 <_fflush_r+0x1a>
 800a1b2:	f7ff fa7d 	bl	80096b0 <__sinit>
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f3      	beq.n	800a1a6 <_fflush_r+0xa>
 800a1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1c0:	07d0      	lsls	r0, r2, #31
 800a1c2:	d404      	bmi.n	800a1ce <_fflush_r+0x32>
 800a1c4:	0599      	lsls	r1, r3, #22
 800a1c6:	d402      	bmi.n	800a1ce <_fflush_r+0x32>
 800a1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ca:	f7ff fb76 	bl	80098ba <__retarget_lock_acquire_recursive>
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	f7ff ff5d 	bl	800a090 <__sflush_r>
 800a1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1d8:	07da      	lsls	r2, r3, #31
 800a1da:	4605      	mov	r5, r0
 800a1dc:	d4e4      	bmi.n	800a1a8 <_fflush_r+0xc>
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	059b      	lsls	r3, r3, #22
 800a1e2:	d4e1      	bmi.n	800a1a8 <_fflush_r+0xc>
 800a1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e6:	f7ff fb69 	bl	80098bc <__retarget_lock_release_recursive>
 800a1ea:	e7dd      	b.n	800a1a8 <_fflush_r+0xc>

0800a1ec <__swbuf_r>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	460e      	mov	r6, r1
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	b118      	cbz	r0, 800a1fe <__swbuf_r+0x12>
 800a1f6:	6a03      	ldr	r3, [r0, #32]
 800a1f8:	b90b      	cbnz	r3, 800a1fe <__swbuf_r+0x12>
 800a1fa:	f7ff fa59 	bl	80096b0 <__sinit>
 800a1fe:	69a3      	ldr	r3, [r4, #24]
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	071a      	lsls	r2, r3, #28
 800a206:	d525      	bpl.n	800a254 <__swbuf_r+0x68>
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	b31b      	cbz	r3, 800a254 <__swbuf_r+0x68>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	6922      	ldr	r2, [r4, #16]
 800a210:	1a98      	subs	r0, r3, r2
 800a212:	6963      	ldr	r3, [r4, #20]
 800a214:	b2f6      	uxtb	r6, r6
 800a216:	4283      	cmp	r3, r0
 800a218:	4637      	mov	r7, r6
 800a21a:	dc04      	bgt.n	800a226 <__swbuf_r+0x3a>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f7ff ffbc 	bl	800a19c <_fflush_r>
 800a224:	b9e0      	cbnz	r0, 800a260 <__swbuf_r+0x74>
 800a226:	68a3      	ldr	r3, [r4, #8]
 800a228:	3b01      	subs	r3, #1
 800a22a:	60a3      	str	r3, [r4, #8]
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	6022      	str	r2, [r4, #0]
 800a232:	701e      	strb	r6, [r3, #0]
 800a234:	6962      	ldr	r2, [r4, #20]
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	429a      	cmp	r2, r3
 800a23a:	d004      	beq.n	800a246 <__swbuf_r+0x5a>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	07db      	lsls	r3, r3, #31
 800a240:	d506      	bpl.n	800a250 <__swbuf_r+0x64>
 800a242:	2e0a      	cmp	r6, #10
 800a244:	d104      	bne.n	800a250 <__swbuf_r+0x64>
 800a246:	4621      	mov	r1, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	f7ff ffa7 	bl	800a19c <_fflush_r>
 800a24e:	b938      	cbnz	r0, 800a260 <__swbuf_r+0x74>
 800a250:	4638      	mov	r0, r7
 800a252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a254:	4621      	mov	r1, r4
 800a256:	4628      	mov	r0, r5
 800a258:	f000 f806 	bl	800a268 <__swsetup_r>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d0d5      	beq.n	800a20c <__swbuf_r+0x20>
 800a260:	f04f 37ff 	mov.w	r7, #4294967295
 800a264:	e7f4      	b.n	800a250 <__swbuf_r+0x64>
	...

0800a268 <__swsetup_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4b2a      	ldr	r3, [pc, #168]	; (800a314 <__swsetup_r+0xac>)
 800a26c:	4605      	mov	r5, r0
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	460c      	mov	r4, r1
 800a272:	b118      	cbz	r0, 800a27c <__swsetup_r+0x14>
 800a274:	6a03      	ldr	r3, [r0, #32]
 800a276:	b90b      	cbnz	r3, 800a27c <__swsetup_r+0x14>
 800a278:	f7ff fa1a 	bl	80096b0 <__sinit>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a282:	0718      	lsls	r0, r3, #28
 800a284:	d422      	bmi.n	800a2cc <__swsetup_r+0x64>
 800a286:	06d9      	lsls	r1, r3, #27
 800a288:	d407      	bmi.n	800a29a <__swsetup_r+0x32>
 800a28a:	2309      	movs	r3, #9
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	f04f 30ff 	mov.w	r0, #4294967295
 800a298:	e034      	b.n	800a304 <__swsetup_r+0x9c>
 800a29a:	0758      	lsls	r0, r3, #29
 800a29c:	d512      	bpl.n	800a2c4 <__swsetup_r+0x5c>
 800a29e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a0:	b141      	cbz	r1, 800a2b4 <__swsetup_r+0x4c>
 800a2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a6:	4299      	cmp	r1, r3
 800a2a8:	d002      	beq.n	800a2b0 <__swsetup_r+0x48>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff fb1c 	bl	80098e8 <_free_r>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6063      	str	r3, [r4, #4]
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	f043 0308 	orr.w	r3, r3, #8
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	b94b      	cbnz	r3, 800a2e4 <__swsetup_r+0x7c>
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2da:	d003      	beq.n	800a2e4 <__swsetup_r+0x7c>
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 f894 	bl	800a40c <__smakebuf_r>
 800a2e4:	89a0      	ldrh	r0, [r4, #12]
 800a2e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2ea:	f010 0301 	ands.w	r3, r0, #1
 800a2ee:	d00a      	beq.n	800a306 <__swsetup_r+0x9e>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	6963      	ldr	r3, [r4, #20]
 800a2f6:	425b      	negs	r3, r3
 800a2f8:	61a3      	str	r3, [r4, #24]
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	b943      	cbnz	r3, 800a310 <__swsetup_r+0xa8>
 800a2fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a302:	d1c4      	bne.n	800a28e <__swsetup_r+0x26>
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	0781      	lsls	r1, r0, #30
 800a308:	bf58      	it	pl
 800a30a:	6963      	ldrpl	r3, [r4, #20]
 800a30c:	60a3      	str	r3, [r4, #8]
 800a30e:	e7f4      	b.n	800a2fa <__swsetup_r+0x92>
 800a310:	2000      	movs	r0, #0
 800a312:	e7f7      	b.n	800a304 <__swsetup_r+0x9c>
 800a314:	20000574 	.word	0x20000574

0800a318 <_raise_r>:
 800a318:	291f      	cmp	r1, #31
 800a31a:	b538      	push	{r3, r4, r5, lr}
 800a31c:	4604      	mov	r4, r0
 800a31e:	460d      	mov	r5, r1
 800a320:	d904      	bls.n	800a32c <_raise_r+0x14>
 800a322:	2316      	movs	r3, #22
 800a324:	6003      	str	r3, [r0, #0]
 800a326:	f04f 30ff 	mov.w	r0, #4294967295
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a32e:	b112      	cbz	r2, 800a336 <_raise_r+0x1e>
 800a330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a334:	b94b      	cbnz	r3, 800a34a <_raise_r+0x32>
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f830 	bl	800a39c <_getpid_r>
 800a33c:	462a      	mov	r2, r5
 800a33e:	4601      	mov	r1, r0
 800a340:	4620      	mov	r0, r4
 800a342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a346:	f000 b817 	b.w	800a378 <_kill_r>
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d00a      	beq.n	800a364 <_raise_r+0x4c>
 800a34e:	1c59      	adds	r1, r3, #1
 800a350:	d103      	bne.n	800a35a <_raise_r+0x42>
 800a352:	2316      	movs	r3, #22
 800a354:	6003      	str	r3, [r0, #0]
 800a356:	2001      	movs	r0, #1
 800a358:	e7e7      	b.n	800a32a <_raise_r+0x12>
 800a35a:	2400      	movs	r4, #0
 800a35c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a360:	4628      	mov	r0, r5
 800a362:	4798      	blx	r3
 800a364:	2000      	movs	r0, #0
 800a366:	e7e0      	b.n	800a32a <_raise_r+0x12>

0800a368 <raise>:
 800a368:	4b02      	ldr	r3, [pc, #8]	; (800a374 <raise+0xc>)
 800a36a:	4601      	mov	r1, r0
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	f7ff bfd3 	b.w	800a318 <_raise_r>
 800a372:	bf00      	nop
 800a374:	20000574 	.word	0x20000574

0800a378 <_kill_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	; (800a398 <_kill_r+0x20>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	f7f8 fbf1 	bl	8002b6c <_kill>
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d102      	bne.n	800a394 <_kill_r+0x1c>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b103      	cbz	r3, 800a394 <_kill_r+0x1c>
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	20000d48 	.word	0x20000d48

0800a39c <_getpid_r>:
 800a39c:	f7f8 bbde 	b.w	8002b5c <_getpid>

0800a3a0 <_sbrk_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d06      	ldr	r5, [pc, #24]	; (800a3bc <_sbrk_r+0x1c>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7f8 fc66 	bl	8002c7c <_sbrk>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_sbrk_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_sbrk_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20000d48 	.word	0x20000d48

0800a3c0 <__swhatbuf_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	4615      	mov	r5, r2
 800a3ce:	461e      	mov	r6, r3
 800a3d0:	da0d      	bge.n	800a3ee <__swhatbuf_r+0x2e>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3d8:	f04f 0100 	mov.w	r1, #0
 800a3dc:	bf0c      	ite	eq
 800a3de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3e2:	2340      	movne	r3, #64	; 0x40
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	6031      	str	r1, [r6, #0]
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	b016      	add	sp, #88	; 0x58
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
 800a3ee:	466a      	mov	r2, sp
 800a3f0:	f000 f848 	bl	800a484 <_fstat_r>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	dbec      	blt.n	800a3d2 <__swhatbuf_r+0x12>
 800a3f8:	9901      	ldr	r1, [sp, #4]
 800a3fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a3fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a402:	4259      	negs	r1, r3
 800a404:	4159      	adcs	r1, r3
 800a406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40a:	e7eb      	b.n	800a3e4 <__swhatbuf_r+0x24>

0800a40c <__smakebuf_r>:
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a410:	079d      	lsls	r5, r3, #30
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	d507      	bpl.n	800a428 <__smakebuf_r+0x1c>
 800a418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2301      	movs	r3, #1
 800a422:	6163      	str	r3, [r4, #20]
 800a424:	b002      	add	sp, #8
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	ab01      	add	r3, sp, #4
 800a42a:	466a      	mov	r2, sp
 800a42c:	f7ff ffc8 	bl	800a3c0 <__swhatbuf_r>
 800a430:	9900      	ldr	r1, [sp, #0]
 800a432:	4605      	mov	r5, r0
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff facb 	bl	80099d0 <_malloc_r>
 800a43a:	b948      	cbnz	r0, 800a450 <__smakebuf_r+0x44>
 800a43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d4ef      	bmi.n	800a424 <__smakebuf_r+0x18>
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e7e3      	b.n	800a418 <__smakebuf_r+0xc>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	9b00      	ldr	r3, [sp, #0]
 800a45c:	6163      	str	r3, [r4, #20]
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	6120      	str	r0, [r4, #16]
 800a462:	b15b      	cbz	r3, 800a47c <__smakebuf_r+0x70>
 800a464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f81d 	bl	800a4a8 <_isatty_r>
 800a46e:	b128      	cbz	r0, 800a47c <__smakebuf_r+0x70>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	f043 0301 	orr.w	r3, r3, #1
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	431d      	orrs	r5, r3
 800a480:	81a5      	strh	r5, [r4, #12]
 800a482:	e7cf      	b.n	800a424 <__smakebuf_r+0x18>

0800a484 <_fstat_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_fstat_r+0x20>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f7f8 fbca 	bl	8002c2a <_fstat>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d102      	bne.n	800a4a0 <_fstat_r+0x1c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b103      	cbz	r3, 800a4a0 <_fstat_r+0x1c>
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20000d48 	.word	0x20000d48

0800a4a8 <_isatty_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_isatty_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f8 fbc9 	bl	8002c4a <_isatty>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_isatty_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_isatty_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20000d48 	.word	0x20000d48

0800a4c8 <_init>:
 800a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ca:	bf00      	nop
 800a4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ce:	bc08      	pop	{r3}
 800a4d0:	469e      	mov	lr, r3
 800a4d2:	4770      	bx	lr

0800a4d4 <_fini>:
 800a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d6:	bf00      	nop
 800a4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4da:	bc08      	pop	{r3}
 800a4dc:	469e      	mov	lr, r3
 800a4de:	4770      	bx	lr
